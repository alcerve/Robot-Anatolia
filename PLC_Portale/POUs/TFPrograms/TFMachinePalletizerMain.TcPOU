<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TFMachinePalletizerMain" Id="{221e7216-b954-4275-985d-be09336b2a7f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TFMachinePalletizerMain
VAR
	ManCmdXHomeTRIG 			: BOOL;
	ManCmdYHomeTRIG 			: BOOL;
	ManCmdZHomeTRIG 			: BOOL;
	ManCmdJHomeTRIG 			: BOOL;
	ManCmdKHomeTRIG 			: BOOL;
	ManCmdGeneralHomeTRIG 		: BOOL;
	
	Formacion_bandelCalOk		:ARRAY [1..3] OF BOOL ;
	Formacion_FrameCalOk		:ARRAY [1..3] OF BOOL ;
	Formacion_De_listaOk		:ARRAY [1..3] OF BOOL ;
	 

	i : UINT;
	k : UINT;
	j : UINT;
	TEST_ENABLE 		: BOOL:= FALSE;
	POTENZA_TEST_ENABLE : BOOL:= FALSE;
	TestSenzaHw 		: BOOL;
	DriveNeedReset 		: BOOL := TRUE;
	first 				: BOOL;
	InitWAZone 			: BOOL;
	EmergenzeOK_Simulazione : BOOL;
	SimulaArrayPacchi 		: BOOL;
	iLgv 					: UINT;//Indice per aggiornare dati verso bridge navette
	iLgvPack 				: UINT;//Indice per aggiornare pacchi formature dati verso bridge navette
	iLgvPackP				: UINT;
	iLgvPackN 				: UINT;
	AggioraDatiLgv			: UINT;
	Post 					: UINT;
	CmdJogNeg_X 			: BOOL;
	CmdJogPos_X 			: BOOL;
	PowerEnableAssi 		: BOOL; //Presneza marcia e abilitazione power assi
	Auto_GENERAL			: INT;
	TotalePacchiParziali	: DWORD;
	TimerConsensoValle 		: REAL;
	TimerAutomaticoValle 	: REAL;
	GestionePickPoint 		: TFPalletizerGestione_PickPoint_Rulliere;
	CalcolaFormaturaTrig 	: BOOL;
	icode 					: UINT;
	icode2 					: UINT;
	iform 					: UINT;
	DisablePowerPerConfig 	: BOOL;
	AggiuntaPalletManuale 			: TFAggiuntaSupportoManuale;
	FiltroFTCPalletPerManuale		: ARRAY[1..MAXAREA] OF Signal_Filter;
	TFCalcolaNumeroPostazioneDXSX 	: TFCalcolaNumeroPostazioneDXSX;
	postest 						: REAL;
	iformaturatest 					: UINT := 2;
	fbGetCurTaskIdx  				: GETCURTASKINDEX;
	
	idxForm : uint;
	CalcolaFormaturaTrig2 : BOOL;
	CalcolaFormingRT : ARRAY[1..3] OF BOOL;
	CalcolaFormingRT2 : ARRAY[1..3] OF BOOL;
	IdxLista : UINT;
	Iforstart : UINT;
	Iforend : UINT;
	TimerAggancioBloccoDicurezza 	: Tc2_Standard.TOF;
	InPosPx: INT;
	Prueva: BOOL;
	MissionClr : POINTER TO TFMachinePalletizer_Mission;
	
	TraiettoriaClr : POINTER TO TFTraiettoria;
	jj: UINT;
	ClrEstructura: POINTER TO ARRAY [1..MAXPALLET] OF e_Tipo_Pallet;
	// Variable para rellenar la estrctura con las dimensiones de la pieza
	InPiezasPos: UINT;
	// Variable pafa Calcular las formaciones
	CalFor: UINT;
	// Recorre los casos para crear la formacion
	CrearFormacion: UINT;
	uu: UINT;
	pruevaFor: BOOL;
	HH: INT;
	Hhbilita_quitar: BOOL;
	ja: UINT;
	
	pr1: UINT;
	pr2: UINT;
	P_ladoA: UINT;
	P_ladoB: UINT;
	LadoRegistar: UINT;
	CooCavallete: INT;
	DD: UINT;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[_01_Init();
_02_LeggiInput();
_03_Modules();
_04_Comunicazione();
_05_ManualCmds();
_06_ScriviOutput();
_07_ScriviStatus();
//_08_DataLogger_ACT();
//_09_CalcolaFormatura();
_10_PackModifier();
IF NOT pruevaFor THEN 
	_11_CalcolaListaProduzione();
ELSE
	_11_CalcolaListaProduzioneNew();	
END_IF

//##
Test_Variabili();
//##
]]></ST>
    </Implementation>
    <Action Name="_01_Init" Id="{fa3d889e-765b-4ab4-a788-a005a143d5ea}">
      <Implementation>
        <ST><![CDATA[//Al primo giro di PLC inizializzo le variabili che mi servono
fbGetCurTaskIdx();
IF _TaskInfo[fbGetCurTaskIdx.index].FirstCycle THEN
	TimeBase := UDINT_TO_REAL(_TaskInfo[fbGetCurTaskIdx.index].CycleTime/10000);//Valorizzazione del tempo ciclo del PLC
	LOCAL_AmsNetId := F_CreateAmsNetId(AmsNetId);
	
	HMI_NumeroPezziPresentiPostazione[i] := WorkAreaState[i].P-1; 	
	
	OffsetDistacco.Lastra.Z := 30;
	OffsetDistacco.Lastra.Y := 30;
	
	OffsetSicurezza.Y.Avuoto := 200; //Canada 300
	OffsetSicurezza.Y.Carico := 200; //canada 300
	
	OffsetSicurezza.Z.Avuoto := 200;
	OffsetSicurezza.Z.Carico := 350;
	IF Habilito_Pos_j_Fc THEN 
		HMI_AbilitaPosJPrelConFTC := TRUE;
	ELSE
		HMI_AbilitaPosJPrelConFTC := FALSE;
	END_IF
		
	
END_IF


IF MachinePalletizerInitVariables THEN
	MachinePalletizerInitVariables := FALSE;
	NUMERO_MACCHINA := 1;
	(***********************************************************************************************************************************************************************************)
	(***********************************************************************************************************************************************************************************)
	VERSO_PALLETTIZZATORE 			 	:= PALLETTIZZATORE_SX; 		//Verso Pallettizzatore: stabilito guardando il pallettizzatore con la linea alle spalle
	TIPO_MAGAZZINO_FALDE  			 	:= MAGAZZINO_FALDE_IN_WA; 	//Identifica il tipo di magazzino falde: MAGAZZINO_FALDE_CENTRO_FISSO = LA Y DI PRELIEVO RIMANE COSTANTE PER OGNI FORMATO,MAGAZZINO_FALDE_CENTRO_VARIABILE=LA Y DI PRELIEVO SI ADATTA AL FORMATO DELLA FALDA
	RIFERIMENTO_POSTAZIONE_WA			:= e_RiferimentoPostazione.CENTRALE;
	ASSE_DISPOSIZIONE_POSTAZIONI		:= e_Disposizione_Postazioni.LUNGO_X;
	TIPOLOGIA_FUNZIONAMENTO_MACCHINA	:= FUNZIONAMENTO_PICKING;

	ORDINE_DISPOSIZIONE_POSTAZIONI		:= CRESCENTE;
	
	OFFSET_POSTAZIONE_LEGNO 	:= 1335;// 1200 + 150 anatolia EEUU Offset filo fisso per legni rispetto al filo del bundle che è la quota di riferimento della WORKAREA lungo Y
	OFFSET_POSTAZIONE_TELAIO 	:= 3157 ;//3060 +150 ;//Offset filo fisso per TELAI rispetto al filo del bundle che è la quota di riferimento della WORKAREA lungo Y
	
	INGOMBRO_RISCONTRO_BUNDLE := 100;
	
	MAXAREAPRESENT := 8; //Numeor di postazioni effettivamente presenti in macchina
	(***********************************************************************************************************************************************************************************)
	(* Postazioni *)
	(***********************************************************************************************************************************************************************************)
	NumPostazioneDeposito 			:= 1;// Numero della postazione di deposito materiale
	NumPostazioneSuRulliera			:= 1;// Numero della postazione di deposito materiale su rulliera: se ho pal picking!!	
	NumPostazioneFALDE 				:= 10; //Numero postazione dedicata alle falde
	NumPostazioneDiPareggiatura 	:= 10; //Numero Postazione dedicata alla pareggiatura
	NumPostazioneBundle 			:= 11; //Numero Postazione dedicata al bundle
	AngoloInclinazioneBundle 		:= 7; //Angolo di inclinazione del bundle

	AngoloInclinazioneTavolaPareggiatura := 7;//173; //Gradi di inclinazione della Tavola di pareggiatura
	(***********************************************************************************************************************************************************************************)
	(* Spazio di lavoro *)
	(***********************************************************************************************************************************************************************************)
	WorkSpace.X := 33345;
	WorkSpace.Y := 3120;
	WorkSpace.Z := 1730;
	(***********************************************************************************************************************************************************************************)
	(* Quote Punto di Prelievo 1 *)
	(***********************************************************************************************************************************************************************************)
	WorkPickPoint[1].X := 155;
	WorkPickPoint[1].Y := 2800;
	WorkPickPoint[1].Z := 0;
	WorkPickPoint[1].J := 90;
	WorkPickPoint[1].ZRaise := 0;
	WorkPickPoint[1].Enable := 0;
	WorkPickPoint[1].Tipologia := RULLIERA;

	(* Dimensioni fisiche Punto di Prelievo *)
	WorkPickPointDimension[1].Xdim := 0;
	WorkPickPointDimension[1].Ydim := 0;
	WorkPickPointDimension[1].Zdim := 0;
	
	(* Ingombri *)
	WorkFootprint[1].X := 5385;
	WorkFootprint[1].Y := 15;
	WorkFootprint[1].Z := 0;//10;
	WorkFootprint[1].XDim := 20;
	WorkFootprint[1].YDim := 1000;
	WorkFootprint[1].ZDim := 500;//900;
	
	WorkFootprint[2].X := 6669;
	WorkFootprint[2].Y := 15;
	WorkFootprint[2].Z := 0;//10;
	WorkFootprint[2].XDim := 20;
	WorkFootprint[2].YDim := 1000;
	WorkFootprint[2].ZDim := 900;//900;
	
	WorkFootprint[3].X := 7184;
	WorkFootprint[3].Y := 15;
	WorkFootprint[3].Z := 0;//10;
	WorkFootprint[3].XDim := 20; //0;
	WorkFootprint[3].YDim := 1700; //0;
	WorkFootprint[3].ZDim := 500; //0;
	
	WorkFootprint[4].X := 8100;
	WorkFootprint[4].Y := 15;
	WorkFootprint[4].Z := 0; //10;
	WorkFootprint[4].XDim := 20;//0;
	WorkFootprint[4].YDim := 1700;//0;
	WorkFootprint[4].ZDim := 500;//0;
	
	CASE VERSO_PALLETTIZZATORE OF
		PALLETTIZZATORE_DX:
			(* Colonna SX *)				//valori online
			WorkFootprint[5].X := 5020;
			WorkFootprint[5].Y := 3356;		//0
			WorkFootprint[5].Z := 300; 
			WorkFootprint[5].XDim := 300;
			WorkFootprint[5].YDim := 0;
			WorkFootprint[5].ZDim := 0;
			
			(* Colonna DX *)
			WorkFootprint[6].X := 5020;
			WorkFootprint[6].Y := 0;		//3360
			WorkFootprint[6].Z := 0; 		//300
			WorkFootprint[6].XDim := 300;
			WorkFootprint[6].YDim := 0;
			WorkFootprint[6].ZDim := 0;
		
		PALLETTIZZATORE_SX:
			(* Colonna SX *)
			WorkFootprint[5].X := 5020;
			WorkFootprint[5].Y := 0;
			WorkFootprint[5].Z := 300; 
			WorkFootprint[5].XDim := 300;
			WorkFootprint[5].YDim := 0;
			WorkFootprint[5].ZDim := 0;
			
			(* Colonna DX *)
			WorkFootprint[6].X := 5020;
			WorkFootprint[6].Y := 3050;
			WorkFootprint[6].Z := 0; 		//300
			WorkFootprint[6].XDim := 300;
			WorkFootprint[6].YDim := 0;
			WorkFootprint[6].ZDim := 0;
			
	END_CASE
	
	(* Postazioni *)
	WorkArea[1].Enable := 1;
	WorkArea[1].Typology := TYPOLOGY_PALLET;
	WorkArea[1].X := 2118; // 2128;
	WorkArea[1].Y := 745; //877;
	WorkArea[1].Z := 0;
	WorkAreaState[1].H := 0;
	WorkAreaState[1].HPL := 0;

	WorkArea[2].Enable := 1;
	WorkArea[2].Typology := TYPOLOGY_PALLET;
	WorkArea[2].X := 6210; //6270;
	WorkArea[2].Y := 745; //877;
	WorkArea[2].Z := 0;
	WorkAreaState[2].H := 0;
	WorkAreaState[2].HPL := 0;

	WorkArea[3].Enable := 1;
	WorkArea[3].Typology := TYPOLOGY_PALLET;
	WorkArea[3].X := 10699; //10744;
	WorkArea[3].Y := 745; //877;
	WorkArea[3].Z := 0;//595;
	WorkAreaState[3].H := 0;
	WorkAreaState[3].HPL := 0;

	WorkArea[4].Enable := 1;
	WorkArea[4].Typology := TYPOLOGY_PALLET;
	WorkArea[4].X := 14789; //14844;
	WorkArea[4].Y := 745; //877;
	WorkArea[4].Z := 0;
	WorkAreaState[3].H := 0;
	WorkAreaState[3].HPL := 0;

	WorkArea[5].Enable := 0;
	WorkArea[5].Typology := TYPOLOGY_PALLET;
	WorkArea[5].X := 19189; //18944;
	WorkArea[5].Y := 745; //877; //755;
	WorkArea[5].Z := 0;
	WorkAreaState[5].H := 0;
	WorkAreaState[5].HPL := 0;

	WorkArea[6].Enable := 0;
	WorkArea[6].Typology := TYPOLOGY_PALLET;
	WorkArea[6].X := 23303; //23418;
	WorkArea[6].Y := 745; //877;//755;
	WorkArea[6].Z := 0;
	WorkAreaState[6].H := 0;
	WorkAreaState[6].HPL := 0;
	
	WorkArea[7].Enable := 1;
	WorkArea[7].Typology := TYPOLOGY_PALLET;
	WorkArea[7].X := 27792; //27892;
	WorkArea[7].Y := 745; //877;
	WorkArea[7].Z := 0;
	WorkAreaState[7].H := 0;
	WorkAreaState[7].HPL := 0;

	WorkArea[8].Enable := 0;
	WorkArea[8].Typology := TYPOLOGY_PALLET;
	WorkArea[8].X := 31872; //31992;
	WorkArea[8].Y := 745; //877;
	WorkArea[8].Z := 0;
	WorkAreaState[8].H := 0;
	WorkAreaState[8].HPL := 0;
	
		
	WorkAreaState[1].State := 0;
	WorkAreaState[1].F := -1;
	WorkAreaState[1].P := -1;
	
	WorkAreaState[2].State := 0;
	WorkAreaState[2].F := -1;
	WorkAreaState[2].P := -1;
	
	WorkAreaState[3].State := 0;
	WorkAreaState[3].F := -1;
	WorkAreaState[3].P := -1;

	WorkAreaState[4].State := 0;
	WorkAreaState[4].F := -1;
	WorkAreaState[4].P := -1;

	WorkAreaState[5].State := 0;
	WorkAreaState[6].State := 0;
	WorkAreaState[7].State := 0;
	WorkAreaState[8].State := 0;


	(* Pallet *)
	Pallet[1].XDim := 800;
	Pallet[1].YDim := 1200;
	Pallet[1].ZDim := 125;
	(* Falde *)
	Layer[1].XDim := 800;
	Layer[1].YDim := 1200;
	Layer[1].ZDim := 2.8;
		
	TCPParameter.X := 0;
	TCPParameter.Y := 0;
	TCPParameter.Z := 112;
	
	PreviousStackWA	:= 1;
	
	HMI_OverideDinamico.NTrasportiOccupati[1] := 7;
	HMI_OverideDinamico.Override[1] := 100;
	HMI_OverideDinamico.NTrasportiOccupati[2] := 5;
	HMI_OverideDinamico.Override[2] := 80;
	HMI_OverideDinamico.NTrasportiOccupati[3] := 3;
	HMI_OverideDinamico.Override[3] := 60;
	HMI_OverideDinamico.NTrasportiOccupati[4] := 1;
	HMI_OverideDinamico.Override[4] := 40;
	
	HMI_AxisOverride.Auto := 50;
	HMI_AxisOverride.Jog := 50;
	HMI_AxisOverride.Layer := 50;
	HMI_AxisOverride.Pallet := 50;
	HMI_AxisOverride.Pack := 50;
	HMI_AxisOverride.PickRip := 50;
	
	Dimensioni_Pinza.Lunghezza 			:= 2410; // Comprese le ventose ??? (ex1650) ;
	Dimensioni_Pinza.Larghezza 			:= 930;  // Comprese le ventose ??? (ex780);
	Dimensioni_Pinza.Spessore 			:= 300;  // Compresa ventosa
	Dimensioni_Pinza.DimTraveVerticale 	:= 150; 

	OffsetDistacco.Lastra.Y := 30;//5;
	OffsetDistacco.Lastra.Z := 30;

	(* Variabili per posizione di riposo*)
	X_Riposo	:= WorkArea[1].X;
	Y_Riposo	:= WorkArea[1].Y;
	Z_Riposo	:= 1826;
	J_Riposo	:= 90;

END_IF

IF MachinePalletizerInitDone THEN	
	MachinePalletizerInitDone := FALSE;

	//LearnParameters.Velocity := AxisPar.Z.MaxVelocity * 0.08;

	AxisNominalPar_X.ReferenceVelocity := 2600;
	AxisNominalPar_X.MaximumAcceleration := 2000;//2188.23;
	AxisNominalPar_X.MaximumDeceleration := 2000;//2188.23;
	AxisNominalPar_X.DefaultJerk := 6650.4799999999996;
	AxisNominalPar_X.DefaultTorque := 0;
	
	AxisNominalPar_Y.ReferenceVelocity := 1800;
	AxisNominalPar_Y.MaximumAcceleration := 1000.0;
	AxisNominalPar_Y.MaximumDeceleration := 1000.0;
	AxisNominalPar_Y.DefaultJerk := 7920.5100000000002;
	AxisNominalPar_Y.DefaultTorque := 0;

	AxisNominalPar_Z.ReferenceVelocity := 520.0;
	AxisNominalPar_Z.MaximumAcceleration := 2500;
	AxisNominalPar_Z.MaximumDeceleration := 2500;
	AxisNominalPar_Z.DefaultJerk := 11221;
	AxisNominalPar_Z.DefaultTorque := 0;

	AxisNominalPar_J.ReferenceVelocity := 100;
	AxisNominalPar_J.MaximumAcceleration := 300;
	AxisNominalPar_J.MaximumDeceleration := 300;
	AxisNominalPar_J.DefaultJerk := 20000;
	AxisNominalPar_J.DefaultTorque := 0;
	(*
	AxisNominalPar_K.ReferenceVelocity := 224;
	AxisNominalPar_K.MaximumAcceleration := 5000;
	AxisNominalPar_K.MaximumDeceleration := 5000;
	AxisNominalPar_K.DefaultJerk := 50000;
	AxisNominalPar_K.DefaultTorque := 100;	
	*)
	AxisPar_X.Acc := AxisNominalPar_X.MaximumAcceleration;
	AxisPar_X.Dec := AxisNominalPar_X.MaximumDeceleration;
	AxisPar_X.Vel := AxisNominalPar_X.ReferenceVelocity;
	AxisPar_X.MaxAcc := AxisNominalPar_X.MaximumAcceleration;
	AxisPar_X.MaxDec := AxisNominalPar_X.MaximumDeceleration;
	AxisPar_X.MaxVel := AxisNominalPar_X.ReferenceVelocity;
	AxisPar_X.ManFastVel := 15;
	AxisPar_X.ManSlowVel := 1;
	AxisPar_X.JOGAcc := AxisNominalPar_X.MaximumAcceleration;
	AxisPar_X.JOGDec := AxisNominalPar_X.MaximumDeceleration;
	AxisPar_X.Jerk := AxisNominalPar_X.DefaultJerk;
	AxisPar_X.MaxPosition := WorkSpace.X;
	AxisPar_X.HomeDefine := 715.0; (*+700 +15 Anatolia Canada*)
	AxisPar_X.HomePosition := 715; (*700 +15 Anatolia Canada*)
	AxisPar_X.MinPosition := 699;//AxisPar_X.HomeDefine;
	AxisPar_X.HomeVelocity := 40;
	
	CASE VERSO_PALLETTIZZATORE OF
		PALLETTIZZATORE_DX:	
			InvertiComandoJog_X := FALSE;
		
		PALLETTIZZATORE_SX:
			InvertiComandoJog_X := TRUE;
	END_CASE
	
	
	AxisPar_Y.Acc := AxisNominalPar_Y.MaximumAcceleration;
	AxisPar_Y.Dec := AxisNominalPar_Y.MaximumDeceleration;
	AxisPar_Y.Vel := AxisNominalPar_Y.ReferenceVelocity;
	AxisPar_Y.MaxAcc := AxisNominalPar_Y.MaximumAcceleration;
	AxisPar_Y.MaxDec := AxisNominalPar_Y.MaximumDeceleration;
	AxisPar_Y.MaxVel := AxisNominalPar_Y.ReferenceVelocity;
	AxisPar_Y.ManFastVel := 20;
	AxisPar_Y.ManSlowVel := 2;
	AxisPar_Y.JOGAcc := AxisNominalPar_Y.MaximumAcceleration;
	AxisPar_Y.JOGDec := AxisNominalPar_Y.MaximumDeceleration;
	AxisPar_Y.Jerk := AxisNominalPar_Y.DefaultJerk;
	AxisPar_Y.MaxPosition := 3120;
	AxisPar_Y.HomeDefine := 535.0;
	AxisPar_Y.HomePosition := 535.0;
	AxisPar_Y.MinPosition := 534;
	AxisPar_Y.HomeVelocity := 30;
	
	AxisPar_Z.Acc := AxisNominalPar_Z.MaximumAcceleration;
	AxisPar_Z.Dec := AxisNominalPar_Z.MaximumDeceleration;
	AxisPar_Z.Vel := AxisNominalPar_Z.ReferenceVelocity;
	AxisPar_Z.MaxAcc := AxisNominalPar_Z.MaximumAcceleration;
	AxisPar_Z.MaxDec := AxisNominalPar_Z.MaximumDeceleration;
	AxisPar_Z.MaxVel := AxisNominalPar_Z.ReferenceVelocity;
	AxisPar_Z.ManFastVel := 10;
	AxisPar_Z.ManSlowVel := 2;
	AxisPar_Z.JOGAcc := AxisNominalPar_Z.MaximumAcceleration;
	AxisPar_Z.JOGDec := AxisNominalPar_Z.MaximumDeceleration;
	AxisPar_Z.Jerk := AxisNominalPar_Z.DefaultJerk;
	
	AxisPar_Z.MinPosition := 20;
	AxisPar_Z.MaxPosition := 1730;
	AxisPar_Z.HomeDefine :=  1730;
	AxisPar_Z.HomePosition := 1730.0;
	AxisPar_Z.HomeVelocity := 30;
	
	AxisPar_J.Acc := AxisNominalPar_J.MaximumAcceleration;
	AxisPar_J.Dec := AxisNominalPar_J.MaximumDeceleration;
	AxisPar_J.Vel := AxisNominalPar_J.ReferenceVelocity;
	AxisPar_J.MaxAcc := AxisNominalPar_J.MaximumAcceleration;
	AxisPar_J.MaxDec := AxisNominalPar_J.MaximumDeceleration;
	AxisPar_J.MaxVel := AxisNominalPar_J.ReferenceVelocity;
	AxisPar_J.ManFastVel := 10;
	AxisPar_J.ManSlowVel := 2;
	AxisPar_J.JOGAcc := AxisNominalPar_J.MaximumAcceleration;
	AxisPar_J.JOGDec := AxisNominalPar_J.MaximumDeceleration;
	AxisPar_J.Jerk := AxisNominalPar_J.DefaultJerk;
	
	CASE VERSO_PALLETTIZZATORE OF
		PALLETTIZZATORE_DX:	
		
			AxisPar_J.MaxPosition 	:= 181.6;
			AxisPar_J.HomeDefine 	:= 181.6;
			AxisPar_J.HomePosition 	:= 181.6;
			AxisPar_J.MinPosition 	:= -1;
			
		PALLETTIZZATORE_SX:
		
			AxisPar_J.MaxPosition 	:= 181.0;
			AxisPar_J.HomeDefine 	:= -1.0;
			AxisPar_J.HomePosition 	:= -1.0;
			AxisPar_J.MinPosition 	:= -2.0;
	END_CASE	
	
	AxisPar_J.HomeVelocity := 2;
	
	(*
	AxisPar_K.Acc := 500;
	AxisPar_K.Dec := 500;
	AxisPar_K.Vel := 224;
	AxisPar_K.MaxAcc := AxisNominalPar_K.MaximumAcceleration;
	AxisPar_K.MaxDec := AxisNominalPar_K.MaximumDeceleration;
	AxisPar_K.MaxVel := 224;
	AxisPar_K.ManFastVel := 20;
	AxisPar_K.ManSlowVel := 10;
	AxisPar_K.JOGAcc := AxisNominalPar_K.MaximumAcceleration;
	AxisPar_K.JOGDec := AxisNominalPar_K.MaximumDeceleration;
	AxisPar_K.Jerk := AxisNominalPar_K.DefaultJerk;
	AxisPar_K.MinPosition := 584.0;
	AxisPar_K.MaxPosition := 1200.0;
	AxisPar_K.HomeDefine := 1280.0; 
	AxisPar_K.HomePosition := 800.0;
	AxisPar_K.MaxTorque := 100;
	AxisPar_K.HomeVelocity := 10;
	*)
	(* Parametri HOMING *)
	AxisHomingParameters_X.InvertiDirezione := FALSE;
	AxisHomingParameters_X.TipoHoming 		:= HOMING_STANDARD;
	AxisHomingParameters_Y.InvertiDirezione := FALSE;
	AxisHomingParameters_Y.TipoHoming 		:= HOMING_STANDARD;
	AxisHomingParameters_Z.InvertiDirezione := TRUE;
	AxisHomingParameters_Z.TipoHoming 		:= HOMING_STANDARD;
	AxisHomingParameters_J.InvertiDirezione := TRUE;
	AxisHomingParameters_J.TipoHoming 		:= HOMING_STANDARD;

END_IF

IF InitWAZone THEN
	InitWAZone := FALSE;
	WorkAreaZone.Zone[1].Code[1] := 1;
	WorkAreaZone.Zone[1].Code[2] := 2;
	WorkAreaZone.Zone[1].Code[3] := 3;
	WorkAreaZone.Zone[1].Code[4] := 4;
	WorkAreaZone.Zone[1].Code[5] := 5;
	WorkAreaZone.Zone[1].Code[6] := 6;
	WorkAreaZone.Zone[1].Code[7] := 7;
	WorkAreaZone.Zone[1].Code[8] := 8;
	WorkAreaZone.Zone[1].Code[9] := 9;
	WorkAreaZone.Zone[1].Code[10]:= 10;
	WorkAreaZone.Zone[1].WorkArea[1] := 1;
	WorkAreaZone.Zone[1].WorkArea[2] := 2;
	WorkAreaZone.Zone[1].WorkArea[3] := 3;
	WorkAreaZone.Zone[1].WorkArea[4] := 4;
	WorkAreaZone.Zone[1].WorkArea[5] := 5;
	WorkAreaZone.Zone[1].WorkArea[6] := 6;
	WorkAreaZone.Zone[1].WorkArea[7] := 7;
	WorkAreaZone.Zone[1].WorkArea[8] := 8;
	WorkAreaZone.Zone[1].WorkArea[9] := 9;
	WorkAreaZone.Zone[1].WorkArea[10]:= 10;
	(*
	WorkAreaZone.Zone[2].Code[1] := 7;
	WorkAreaZone.Zone[2].Code[2] := 0;
	WorkAreaZone.Zone[2].Code[3] := 0;
	WorkAreaZone.Zone[2].Code[4] := 0;
	WorkAreaZone.Zone[2].Code[5] := 0;
	WorkAreaZone.Zone[2].Code[6] := 0;
	WorkAreaZone.Zone[2].Code[7] := 0;
	WorkAreaZone.Zone[2].Code[8] := 0;
	WorkAreaZone.Zone[2].Code[9] := 0;
	WorkAreaZone.Zone[2].Code[10] := 0;
	WorkAreaZone.Zone[2].WorkArea[1] := 3;
	WorkAreaZone.Zone[2].WorkArea[2] := 10;
	WorkAreaZone.Zone[2].WorkArea[3] := 0;
	WorkAreaZone.Zone[2].WorkArea[4] := 0;
	WorkAreaZone.Zone[2].WorkArea[5] := 0;
	WorkAreaZone.Zone[2].WorkArea[6] := 0;
	WorkAreaZone.Zone[2].WorkArea[7] := 0;
	WorkAreaZone.Zone[2].WorkArea[8] := 0;
	WorkAreaZone.Zone[2].WorkArea[9] := 0;
	WorkAreaZone.Zone[2].WorkArea[10]:= 0;
	
	WorkAreaZone.Zone[3].Code[1] := 9;
	WorkAreaZone.Zone[3].Code[2] := 0;
	WorkAreaZone.Zone[3].Code[3] := 0;
	WorkAreaZone.Zone[3].Code[4] := 0;
	WorkAreaZone.Zone[3].Code[5] := 0;
	WorkAreaZone.Zone[3].Code[6] := 0;
	WorkAreaZone.Zone[3].Code[7] := 0;
	WorkAreaZone.Zone[3].Code[8] := 0;
	WorkAreaZone.Zone[3].Code[9] := 0;
	WorkAreaZone.Zone[3].Code[10] := 0;
	WorkAreaZone.Zone[3].WorkArea[1] := 2;
	WorkAreaZone.Zone[3].WorkArea[2] := 10;
	WorkAreaZone.Zone[3].WorkArea[3] := 0;
	WorkAreaZone.Zone[3].WorkArea[4] := 0;
	WorkAreaZone.Zone[3].WorkArea[5] := 0;
	WorkAreaZone.Zone[3].WorkArea[6] := 0;
	WorkAreaZone.Zone[3].WorkArea[7] := 0;
	WorkAreaZone.Zone[3].WorkArea[8] := 0;
	WorkAreaZone.Zone[3].WorkArea[9] := 0;
	WorkAreaZone.Zone[3].WorkArea[10]:= 0;*)

END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="_02_LeggiInput" Id="{0744d895-81b3-432e-8d3d-f3d6ef154f79}">
      <Implementation>
        <ST><![CDATA[(* J17 *)
//I_TastoreCartone1 := I_K517[3].0;
//I_TastoreCartone2 := I_K517[2].0;
//I_ExtraCorsaPinzaSganciata := I_K517[2].6;
//I_PHPresenzaFaldaSX := I_K517[3].4;

I_RotazioneColonnaBloccata 	:= I_K517[2].1; //Ingresso X1.1 pin 4
I_TastatoreBascolante	 	:= I_K517[3].1; //Ingresso X1.1 pin 2
//--
I_PHPresenzaFaldaDX 		:= I_K517[2].2; //Ingresso X1.2 pin 4
//--
//Segnali da Ciabatta
I_TastatorePinza_1 			:= I_K517[2].4;
I_TastatorePinza_2 			:= I_K517[3].4;
//Mod 3_6_2025
I_TastatoreEmergenzaPinza_1 := TRUE;
//I_TastatoreEmergenzaPinza_1 := I_K517[2].5;
I_TastatoreEmergenzaPinza_2 := I_K517[3].5;
//--
I_TastatorePinza_3 			:= I_PortQualCiabattaK516_X05.0;
I_TastatorePinza_4 			:= I_PortQualCiabattaK516_X05.1;
I_TastatoreEmergenzaPinza_3 := I_PortQualCiabattaK516_X06.0;
I_TastatoreEmergenzaPinza_4 := I_PortQualCiabattaK516_X06.1;
//--
I_TastatorePinza_5	:= TRUE;
I_TastatorePinza_6 	:= TRUE;
//--
I_Keyence0_Byte0 	:= I_K515_XO3[0];
I_Keyence0_Byte1 	:= I_K515_XO3[1];
I_Keyence180_Byte0 	:= I_K515_XO4[0];
I_Keyence180_Byte1 	:= I_K515_XO4[1];
//--
I_Keyence0_Byte0_2 	:= I_K516_XO3[0];
I_Keyence0_Byte1_2 	:= I_K516_XO3[1];
I_Keyence180_Byte0_2 := I_K516_XO4[0];
I_Keyence180_Byte1_2 := I_K516_XO4[1];

//Segnali da azionamenti
//originali
//I_ExtraCorsaPositivo_X 	:= I_XDriveDigitalInput.1;
//I_ExtraCorsaNegativo_X	:= I_XDriveDigitalInput.2;

//Girati
I_ExtraCorsaPositivo_X 	:= I_XDriveDigitalInput.1;
I_ExtraCorsaNegativo_X	:= I_XDriveDigitalInput.2;
I_FermoSicurezzaRilasciato := I_XDriveDigitalInput.3;

I_ExtraCorsaPositivo_Y	:= I_YDriveDigitalInput.1;
I_ExtraCorsaNegativo_Y	:= I_YDriveDigitalInput.2;
I_SicurezzaCinghia_Y 	:=  I_YDriveDigitalInput.3;

I_ExtraCorsaPositivo_Z	:= I_ZDriveDigitalInput.1;
I_ExtraCorsaNegativo_Z	:= I_ZDriveDigitalInput.2;
I_SicurezzaCinghia_Z 	:= I_ZDriveDigitalInput.3;

I_ExtraCorsaPositivo_J 	:=  I_PortQualCiabattaK516_X07.0;
I_ExtraCorsaNegativo_J 	:=  I_PortQualCiabattaK516_X07.1;

I_BascolantePinzaBloccato 	:= I_PortQualCiabattaK516_X08.0;
I_TasteggioCinghiaAsseZ 	:= I_PortQualCiabattaK516_X08.1;

(* Parte a terra *)
//******************** SCHEDA IN AP200.2
I_AutoPal			:= I_AP200_2[1];
I_StartCicloPal	    := I_AP200_2[2];	
I_StopCicloPal	    := I_AP200_2[3];
//I_FREE 		    := I_AP200_2[4];
//I_FREE 			:= I_AP200_2[5];
I_AriaOK		    := I_AP200_2[6];	
I_24VOK_AUXQE	    := I_AP200_2[7];
I_24VOK_SAFETY	    := I_AP200_2[8];
I_24VOK_MONITOR		:= I_AP200_2[9];
I_24VOK_PS305	    := I_AP200_2[10];	
I_24VOK_PS306	    := I_AP200_2[11];
I_24VOK_PS307	    := I_AP200_2[12];
I_24VOK_JB310		:= I_AP200_2[13];
I_24VOK_JB311 	    := I_AP200_2[14];	
I_24VOK_JB312 	    := I_AP200_2[15];
I_24VOK_JB313 	    := I_AP200_2[16];

//******************** SCHEDA IN AP200.5	
I_PresenzaSupporto[1] := I_AP200_5[1];
I_PresenzaTelaio[1]	  := I_AP200_5[2];	
I_PresenzaCentrale[1] := I_AP200_5[3];
I_PresenzaBundle[1]   := I_AP200_5[4];
I_PresenzaSupporto[2] := I_AP200_5[5];
I_PresenzaTelaio[2]	  := I_AP200_5[6];
I_PresenzaCentrale[2] := I_AP200_5[7];
I_PresenzaBundle[2]   := I_AP200_5[8];
I_PresenzaSupporto[3] := I_AP200_5[9];
I_PresenzaTelaio[3]	  := I_AP200_5[10];	
I_PresenzaCentrale[3] := I_AP200_5[11];
I_PresenzaBundle[3]   := I_AP200_5[12];
I_PresenzaSupporto[4] := I_AP200_5[13];
I_PresenzaTelaio[4]	  := I_AP200_5[14];	
I_PresenzaCentrale[4] := I_AP200_5[15];
I_PresenzaBundle[4]   := I_AP200_5[16];

//******************** SCHEDA IN SAFETY AP200.6		
I_RichiestaIngressoConsolle := I_AP200_6[1];
I_ResetRichiestaIngressoConsolle := I_AP200_6[2];
I_PulsanteMarciaConsolle := I_AP200_6[3];
I_RichiestaIngressoPS309 := I_AP200_6[4];

//******************** SCHEDA IN SAFETY AP200.7		
I_RichiestaIngressoPS306 		:= I_AP200_7[1];
I_ResetRichiestaIngressoPS306 	:= I_AP200_7[2];
I_RichiestaIngressoPS307 		:= I_AP200_7[3];
I_ResetRichiestaIngressoPS307 	:= I_AP200_7[4];

//******************** SCHEDA IN AP200.8
//I_FREE 					:= I_AP200_8[1];
//I_FREE 				    := I_AP200_8[2];	
//I_FREE 				    := I_AP200_8[3];
//I_FREE 				    := I_AP200_8[4];
I_24VOK_PS308				:= I_AP200_8[5];
I_24VOK_PS309			    := I_AP200_8[6];	
I_24VOK_JB314			    := I_AP200_8[7];
I_24VOK_JB315			    := I_AP200_8[8];
I_PresenzaSupporto[5]       := I_AP200_8[9];
I_PresenzaTelaio[5]	        := I_AP200_8[10];
I_PresenzaCentrale[5]	    := I_AP200_8[11];
I_PresenzaBundle[5] 	    := I_AP200_8[12];
I_PresenzaSupporto[6]       := I_AP200_8[13];
I_PresenzaTelaio[6]	        := I_AP200_8[14];
I_PresenzaCentrale[6]	    := I_AP200_8[15];
I_PresenzaBundle[6] 	    := I_AP200_8[16];

//******************** SCHEDA IN SAFETY AP200.9	
I_RicevitoreConsensoVeicolo[1] := I_AP200_9[1];
I_RicevitoreConsensoVeicolo[2] := I_AP200_9[2];
I_RicevitoreConsensoVeicolo[3] := I_AP200_9[3];
I_RicevitoreConsensoVeicolo[4] := I_AP200_9[4];

//******************** SCHEDA IN SAFETY AP200.10
I_RichiestaIngressoPS308 		:= I_AP200_10[1];	
I_ResetRichiestaIngressoPS308 	:= I_AP200_10[2];	
//I_BarrieraCentroDx_CH1		:= I_AP200_10[3];	
//I_BarrieraCentroDx_CH2		:= I_AP200_10[4];	

//******************** SCHEDA IN SAFETY AP201.2
//I_FeedBackMarcia				:= I_AP201_12[1];	
I_ResetRichiestaIngressoPS309 	:= I_AP201_2[2];
//I_BarrieraInterna_CH1			:= I_AP201_2[3];
//I_BarrieraInterna_CH2			:= I_AP201_2[4];

//******************** SCHEDA IN AP201.3	
I_PresenzaSupporto[7] 	:= I_AP201_3[1];
I_PresenzaTelaio[7]		:= I_AP201_3[2];	
I_PresenzaCentrale[7]	:= I_AP201_3[3];
I_PresenzaBundle[7] 	:= I_AP201_3[4];
I_PresenzaSupporto[8] 	:= I_AP201_3[5];
I_PresenzaTelaio[8]		:= I_AP201_3[6];	
I_PresenzaCentrale[8]	:= I_AP201_3[7];
I_PresenzaBundle[8] 	:= I_AP201_3[8];
//FREE 					:= I_AP201_3[9];
//FREE 					:= I_AP201_3[10];
//FREE 					:= I_AP201_3[11];
//FREE 					:= I_AP201_3[12];
//FREE 					:= I_AP201_3[13];
//FREE 					:= I_AP201_3[14];
//FREE 					:= I_AP201_3[15];
//FREE 					:= I_AP201_3[16];

//******************** SCHEDA IN SAFETY AP202.2		
I_RicevitoreConsensoVeicolo[5]	:= I_AP202_2[1];	
I_RicevitoreConsensoVeicolo[6] 	:= I_AP202_2[2];	
I_RicevitoreConsensoVeicolo[7]	:= I_AP202_2[3];	
I_RicevitoreConsensoVeicolo[8]	:= I_AP202_2[4];	

//******************** SCHEDA IN SAFETY AP202.3		
I_PresenzaVeicolo[1]	:= I_AP202_3[1];	
I_PresenzaVeicolo[2] 	:= I_AP202_3[2];  
I_PresenzaVeicolo[3]	:= I_AP202_3[3];  
I_PresenzaVeicolo[4]	:= I_AP202_3[4];  

//******************** SCHEDA IN SAFETY AP202.5		
I_PresenzaVeicolo[5]	:= I_AP202_5[1];	
I_PresenzaVeicolo[6] 	:= I_AP202_5[2]; 	
I_PresenzaVeicolo[7]	:= I_AP202_5[3]; 	
I_PresenzaVeicolo[8]	:= I_AP202_5[4]; 	

//******************** SCHEDA IN SAFETY AP202.6		
//I_BarrieraCentroSx_CH1	: BOOL; // 1=
//I_BarrieraCentroSx_CH2 	: BOOL; // 2=	
//I_BarrieraSx_CH1			: BOOL; // 3=	
//I_BarrieraSx_CH2			: BOOL; // 4=	


//FORZATURE


//#######Para Excluir solo simulacion 
IF NOT FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto THEN
FOR InPosPx := 1 TO MAXAREAPRESENT DO
	IF I_PresenzaSupporto[InPosPx] OR I_PresenzaBundle[InPosPx]OR I_PresenzaCentrale[InPosPx]  THEN I_PHPresenzaPallet[InPosPx] := TRUE; END_IF
	IF NOT I_PresenzaSupporto[InPosPx] AND NOT I_PresenzaBundle[InPosPx] AND NOT I_PresenzaCentrale[InPosPx] THEN I_PHPresenzaPallet[InPosPx] := FALSE; END_IF	
	
END_FOR
END_IF

(*
I_PHPresenzaPallet[1] := TRUE;
I_PHPresenzaPallet[2] := TRUE;
I_PHPresenzaPallet[3] := FALSE;
I_PHPresenzaPallet[4] := FALSE;
I_PHPresenzaPallet[5] := FALSE;
I_PHPresenzaPallet[6] := FALSE;
I_PHPresenzaPallet[7] := FALSE;
I_PHPresenzaPallet[8] := FALSE;
*)




]]></ST>
      </Implementation>
    </Action>
    <Action Name="_03_Modules" Id="{a611c0f7-588c-4abe-b290-7ee028a356b7}">
      <Implementation>
        <ST><![CDATA[(* Test Da ELIMINARE *)
DriveNeedReset := FALSE;
PowerEnableAssi := I_MarciaOK AND NOT DisablePowerPerConfig;
(* Set Stato Emergenze *)
EnablePneumatica := TRUE;

EnableGroupPortSafety := TRUE;

I_BarrierePallettizzatoreOK := (I_SafetyStateBarrierSXPal = 1 AND I_SafetyStateBarrierDXPal = 1 AND I_SafetyStateBarrierCentroDXPal	= 1 AND I_SafetyStateBarrierCentroSXPal	= 1) OR 
								(((I_SafetyStateBarrierDXPal <> 1 OR I_SafetyStateBarrierCentroDXPal <> 1) AND I_SafetyStateBarrierKarv = 1 AND (MachinePalletizerGatesAccess.GateAccessPS308.AccessOK OR MachinePalletizerGatesAccess.GateAccessPS309.AccessOK))OR
								((I_SafetyStateBarrierSXPal <> 1 OR I_SafetyStateBarrierCentroSXPal <> 1) AND I_SafetyStateBarrierKarv = 1 AND (MachinePalletizerGatesAccess.GateAccessPS306.AccessOK OR MachinePalletizerGatesAccess.GateAccessPS307.AccessOK)) OR
								((I_SafetyStateBarrierSXPal <> 1 OR I_SafetyStateBarrierDXPal <> 1 OR I_SafetyStateBarrierCentroSXPal <> 1 OR I_SafetyStateBarrierCentroDXPal <> 1 OR I_SafetyStateBarrierKarv <> 1) AND MachinePalletizerGatesAccess.GateAccessConsolle.AccessOK));							
								
(*I_BarrierePallettizzatoreOK := (I_SafetyStateBarrierSXPal = 1 AND I_SafetyStateBarrierDXPal = 1 AND I_SafetyStateBarrierCentroDXPal	= 1 AND I_SafetyStateBarrierCentroSXPal	= 1) OR 
								((I_SafetyStateBarrierDXPal <> 1 OR I_SafetyStateBarrierCentroDXPal <> 1 AND I_SafetyStateBarrierKarv = 1 AND MachinePalletizerGatesAccess.GateAccessPS308.AccessOK OR MachinePalletizerGatesAccess.GateAccessPS309.AccessOK) OR
								(I_SafetyStateBarrierSXPal <> 1 OR I_SafetyStateBarrierCentroSXPal <> 1 AND I_SafetyStateBarrierKarv = 1 AND MachinePalletizerGatesAccess.GateAccessPS306.AccessOK OR MachinePalletizerGatesAccess.GateAccessPS307.AccessOK) OR
								((I_SafetyStateBarrierSXPal <> 1 OR I_SafetyStateBarrierDXPal <> 1 OR I_SafetyStateBarrierCentroSXPal <> 1 OR I_SafetyStateBarrierCentroDXPal <> 1 OR I_SafetyStateBarrierKarv <> 1) AND MachinePalletizerGatesAccess.GateAccessConsolle.AccessOK));
								*)
							
I_EmergenzeOK := I_SafetyStateEmergenze_Generali = 1 AND 
					I_SafetyStateEmergenza_PS306_307 = 1 AND 
					I_SafetyStateEmergenza_PS308_309 = 1 AND
					I_SafetyStateEmergenze_Generali = 1 AND 
					I_BarrierePallettizzatoreOK;

I_24VAusiliariOK := I_24VOK_AUXQE	AND
                    I_24VOK_SAFETY	AND
                    I_24VOK_MONITOR	AND
                    I_24VOK_PS305	AND
                    I_24VOK_PS306	AND
                    I_24VOK_PS307	AND
                    I_24VOK_JB310	AND
                    I_24VOK_JB311 	AND
                    I_24VOK_JB312 	AND
                    I_24VOK_JB313 	AND
					I_24VOK_PS308   AND
                    I_24VOK_PS309	AND
                    I_24VOK_JB314	AND
                    I_24VOK_JB315;	

IF TEST_ENABLE THEN
	I_ResetAsse_X 		:= FALSE;
	I_ResetAsse_Y 		:= FALSE;
	I_ResetAsse_Z 		:= FALSE;
	DriveNeedReset 		:= FALSE;
	TouchErrorEnable 	:= FALSE;
	SimulaArrayPacchi 	:= TRUE;
END_IF

{region " Macchina "}
(* ******************************************************************************************************** *)
(* INPUT Transfer *)
(* ******************************************************************************************************** *)
(* Machine Palletizer *)
MachinePalletizer_TF.IN.Mode.Auto									:= I_AutoPal;
MachinePalletizer_TF.IN.Mode.Jog 									:= FALSE;
MachinePalletizer_TF.IN.Mode.JogStep 								:= FALSE;
MachinePalletizer_TF.IN.Mode.Man 									:= NOT I_AutoPal;
MachinePalletizer_TF.IN.Mode.Feeding 								:= FALSE;
MachinePalletizer_TF.IN.Mode.Production 							:= FALSE;
MachinePalletizer_TF.IN.Mode.Emptying 								:= FALSE;
MachinePalletizer_TF.IN.Mode.Dry		 							:= FALSE;
MachinePalletizer_TF.IN.Mode.AutoRunRequest							:= I_StartCicloPal AND 
																		NOT MachinePalletizerGatesAccess.GateAccessConsolle.AccesActive AND 
																		NOT MachinePalletizerGatesAccess.GateAccessPS306.AccesActive AND 
																		NOT MachinePalletizerGatesAccess.GateAccessPS307.AccesActive AND 
																		NOT MachinePalletizerGatesAccess.GateAccessPS308.AccesActive AND
																		NOT MachinePalletizerGatesAccess.GateAccessPS309.AccesActive;
																			 
MachinePalletizer_TF.IN.Mode.JogRunRequest							:= FALSE;
MachinePalletizer_TF.IN.Mode.StopRequest							:= NOT I_AutoPal;
MachinePalletizer_TF.IN.Mode.RapidStopRequest						:= I_StopCicloPal;
MachinePalletizer_TF.IN.Mode.ResetRequest							:= I_StartCicloPal;
MachinePalletizer_TF.IN.Mode.PowerOnRequest							:= I_PulsanteMarciaConsolle AND  
																		NOT MachinePalletizerGatesAccess.GateAccessConsolle.AccesActive AND 
																		NOT MachinePalletizerGatesAccess.GateAccessPS306.AccesActive AND 
																		NOT MachinePalletizerGatesAccess.GateAccessPS307.AccesActive AND 
																		NOT MachinePalletizerGatesAccess.GateAccessPS308.AccesActive AND
																		NOT MachinePalletizerGatesAccess.GateAccessPS309.AccesActive;
																			 
MachinePalletizer_TF.IN.Mode.PowerOffRequest						:= FALSE;
MachinePalletizer_TF.IN.Mode.EmergencyRequest						:= NOT I_EmergenzeOK;
MachinePalletizer_TF.IN.PowerOk										:= I_MarciaOK;
MachinePalletizer_TF.IN.SensorAir									:= I_AriaOK;
MachinePalletizer_TF.IN.Sensor24Volt								:= I_24VAusiliariOK;
MachinePalletizer_TF.IN.Y_BeltSafety								:= I_SicurezzaCinghia_Y;
MachinePalletizer_TF.IN.Z_BeltSafety								:= I_SicurezzaCinghia_Z;
MachinePalletizer_TF.IN.PX_GripPresence                             := I_PHPresenzaMaterialePinza;
MachinePalletizer_TF.IN.WD_Trasporti								:= StateETHIPLinea = 0;//Comunicazione con trasporti 

MachinePalletizer_TF.SimulazioneSenzaPalletFalde					:= FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto;

MachinePalletizer_TF.AbilitaControlloPHGripPresence					:= FROM_HMI_PAL.HMI_AbilitaControloPXGripPresence AND NOT FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto;
//MachinePalletizer_TF.AbilitaControlloCoppia							:= FROM_HMI_PAL.HMI_AbilitaControlloCoppia AND NOT FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto;;
MachinePalletizer_TF.AbilitaAnticipoDinamico						:= ADR(FROM_HMI_PAL.HMI_AbilitaAnticipoDinamicoMovimenti);
MachinePalletizer_TF.AbilitaCalcoloIngombroOttimizzato				:= ADR(FROM_HMI_PAL.HMI_AbilitaCalcoloIngombroOttimizzato);
MachinePalletizer_TF.AbilitaDepositoPaccoOrrizzonataleConTasteggio   := ADR(FROM_HMI_PAL.HMI_AbilitaDepositoPaccoOrrizzontaleConTasteggio);
MachinePalletizer_TF.AbilitaInterpolazioneAssi 						:= ADR(FROM_HMI_PAL.HMI_AbilitaInterpolazioneAssi);
MachinePalletizer_TF.STARTInterpolazioneASSI						:= ADR(STARTInterpolazioneASSI);
MachinePalletizer_TF.AbilitaDisposizionePalletContinua 				:= ADR(FROM_HMI_PAL.HMI_AbilitaDepositoPalletContinuo);
MachinePalletizer_TF.AbilitaOffsetInUscitaTasteggioPrelievoPallet   := ADR(FROM_HMI_PAL.HMI_AbilitaOffsetUscitaTasteggioPrelPallet);
MachinePalletizer_TF.AbilitaForzaturaStatoWAMDaCicloRiposoACicloPrelievo  	:=ADR(FROM_HMI_PAL.HMI_AbilitaForzaturaStatoDaRiposoAPrelievo);
MachinePalletizer_TF.AbilitaAccostamentoAsseZ 								:= ADR(FROM_HMI_PAL.HMI_AbilitaAccostamentoAsseZ);
MachinePalletizer_TF.GestioneAZoneAbilitata							:= ADR(FROM_HMI_PAL.HMI_AbilitaGestioneAZone);

MachinePalletizer_TF.Modules										:= ADR(MachinePalletizerModules);	

MachinePalletizer_TF.WorkSpace										:= ADR(WorkSpace);
MachinePalletizer_TF.WorkFootprint									:= ADR(WorkFootprint);
MachinePalletizer_TF.WorkPickPoint									:= ADR(WorkPickPoint);

MachinePalletizer_TF.WorkPickPointState								:= ADR(WorkPickPointState);
MachinePalletizer_TF.WorkPickPointDimension							:= ADR(WorkPickPointDimension);
MachinePalletizer_TF.WorkPickPointOffset							:= ADR(WorkPickPointOffset);
MachinePalletizer_TF.WorkArea										:= ADR(WorkArea);
MachinePalletizer_TF.WorkAreaState									:= ADR(WorkAreaState);
MachinePalletizer_TF.WorkAreaOffset									:= ADR(WorkAreaOffset);
MachinePalletizer_TF.WorkAreaZone								    := ADR(WorkAreaZone);
MachinePalletizer_TF.AxisOverride									:= ADR(AxisOverride);
MachinePalletizer_TF.Pallet											:= ADR(Pallet);
MachinePalletizer_TF.Layer											:= ADR(Layer);
MachinePalletizer_TF.Forming										:= ADR(Forming);
//MachinePalletizer_TF.AxisParK										:= ADR(AxisPar_K);
MachinePalletizer_TF.PickPlaceParameters			 				:= ADR(PickPlaceParameters);
MachinePalletizer_TF.ManCmd											:= ADR(ManCmd);
MachinePalletizer_TF.Mission										:= ADR(Mission);
MachinePalletizer_TF.Traiettoria									:= ADR(Traiettoria);
MachinePalletizer_TF.MachineManCmd 									:= ADR(MachineManCmd);
MachinePalletizer_TF.Cfg.CmdExeCaseEnable 							:= NOT MachinePalletizer_TF.IN.Mode.JogStep;
MachinePalletizer_TF.Cfg.TimeBase 									:= TimeBase;
MachinePalletizer_TF.ProgressiveNrWA								:= ADR(ProgressiveNrWA);
MachinePalletizer_TF.UsedCode										:= ADR(UsedCode);
MachinePalletizer_TF.TCPParameter									:= ADR(TCPParameter);
MachinePalletizer_TF.TilterPack										:= ADR(PaccoSulRibaltino);
MachinePalletizer_TF.PreviousPWA									:= ADR(PreviousPWA);
MachinePalletizer_TF.RestoreCWA										:= ADR(RestoreCWA);
//MachinePalletizer_TF.TouchErrorEnable								:= ADR(TouchErrorEnable);
MachinePalletizer_TF.GateAccesExecuted								:= MachinePalletizerGatesAccess.GateAccessConsolle.AccesActive;// AND MachinePalletizerGatesAccess.GateAccess2.AccesActive;
MachinePalletizer_TF.PreviousStackWA								:= ADR(PreviousStackWA);
MachinePalletizer_TF.WorkAreaManager								:= ADR(WorkAreaManager);
MachinePalletizer_TF.WorkAreaProductionList							:= ADR(WorkAreaProductionList);

MachinePalletizer_TF.RichiestaIngZonaSX := MachinepalletizerGatesAccess.GateAccessPS306.AccessRequest OR MachinepalletizerGatesAccess.GateAccessPS307.AccessRequest;
MachinePalletizer_TF.RichiestaIngZonaDX := MachinepalletizerGatesAccess.GateAccessPS308.AccessRequest OR MachinepalletizerGatesAccess.GateAccessPS309.AccessRequest;		  
			   
//Valuto la posizione in cui sta lavorando il pallettizzatore				
///@@@@@@PortaleADx := MachinePalletizerModules.AX_X.Ax^.Status.ActPosition > 17060;//WorkSpace.X/2;		

///@@@@@@PortaleASx := MachinePalletizerModules.AX_X.Ax^.Status.ActPosition < 17060;//WorkSpace.X/2;					 
							  
IF NOT SimulaArrayPacchi THEN
	MachinePalletizer_TF.ArrayPacchi									:= ADR(I_Trasporti_GEN_OUT_ArrayPacchi);
ELSE
	MachinePalletizer_TF.ArrayPacchi									:= ADR(ArrayPacchiSIMULATO);	
END_IF
MachinePalletizer_TF.MissionStateCase								:= ADR(MissionStateCase);
{endregion}

IF FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto THEN
	ProgrammaToModule_X.DisabilitaTasteggio := TRUE;
	ProgrammaToModule_Y.DisabilitaTasteggio := TRUE;
	ProgrammaToModule_Z.DisabilitaTasteggio := TRUE;
	ProgrammaToModule_J.DisabilitaTasteggio := TRUE;
END_IF


(* PX WorkArea *)
IF NOT FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto THEN
	FOR i:=1 TO MAXAREAPRESENT DO
		//####################################################
		IF I_PresenzaSupporto[i] OR I_PresenzaBundle[i]OR I_PresenzaCentrale[i]  THEN I_PHPresenzaPallet[i] := TRUE; END_IF
		IF NOT I_PresenzaSupporto[i] AND NOT I_PresenzaBundle[i] AND NOT I_PresenzaCentrale[i] THEN I_PHPresenzaPallet[i] := FALSE; END_IF	
		//####################################################
		MachinePalletizer_TF.IN.PX_WorkArea[i] := I_PHPresenzaPallet[i];
		//MachinePalletizerLGV.PX_WorkArea[i] := I_PHPresenzaPallet[i];
		//MachinePalletizerLGV_NEW.PH_WorkArea[i] := I_PHPresenzaPallet[i];
	END_FOR 
ELSE
	FOR i:=1 TO MAXAREAPRESENT DO
		//######################################################################################
		IF FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto AND I_PresenzaSupporto[i] OR I_PresenzaBundle[i] OR I_PresenzaCentrale[i] THEN I_PHPresenzaPalletVirtuale[i] := TRUE; END_IF	
		IF FROM_HMI_PAL.HMI_AbilitaSimulazioneAVuoto AND  NOT I_PresenzaSupporto[i] AND NOT I_PresenzaBundle[i] AND NOT I_PresenzaCentrale[i] THEN I_PHPresenzaPalletVirtuale[i] := FALSE; END_IF	
		//######################################################################################
		MachinePalletizer_TF.IN.PX_WorkArea[i] := I_PHPresenzaPalletVirtuale[i];
		//MachinePalletizerLGV.PX_WorkArea[i] := I_PHPresenzaPallet[i];
		//MachinePalletizerLGV_NEW.PH_WorkArea[i] := I_PHPresenzaPallet[i];
	END_FOR 
END_IF



(*
*)

TFTimerCall(ADR(RetardoFcTastastatore[1]),TimeBase);
TFTimerCall(ADR(RetardoFcTastastatore[2]),TimeBase);
TFTimerCall(ADR(RetardoFcTastastatore[3]),TimeBase);
TFTimerCall(ADR(RetardoFcTastastatore[4]),TimeBase);

TFTimerCall(ADR(RetardoFcTastastatoreJ[1]),TimeBase);
TFTimerCall(ADR(RetardoFcTastastatoreJ[2]),TimeBase);

TFTimerSet(ADR(RetardoFcTastastatore[1]),50, I_TastatorePinza_1);
TFTimerSet(ADR(RetardoFcTastastatore[2]),50, I_TastatorePinza_2);
TFTimerSet(ADR(RetardoFcTastastatore[3]),50,I_TastatorePinza_3);
TFTimerSet(ADR(RetardoFcTastastatore[4]),50, I_TastatorePinza_4);

TFTimerSet(ADR(RetardoFcTastastatoreJ[1]),200,I_TastatorePinza_1);
TFTimerSet(ADR(RetardoFcTastastatoreJ[2]),200,I_TastatorePinza_2);

TFTimerCall(ADR(Re_TastatoreEmergenzaPinza[1]),TimeBase);
TFTimerCall(ADR(Re_TastatoreEmergenzaPinza[2]),TimeBase);
TFTimerCall(ADR(Re_TastatoreEmergenzaPinza[3]),TimeBase);
TFTimerCall(ADR(Re_TastatoreEmergenzaPinza[4]),TimeBase);

TFTimerSet(ADR(Re_TastatoreEmergenzaPinza[1]),50,I_TastatoreEmergenzaPinza_1);
TFTimerSet(ADR(Re_TastatoreEmergenzaPinza[2]),50,I_TastatoreEmergenzaPinza_2);
TFTimerSet(ADR(Re_TastatoreEmergenzaPinza[3]),50,I_TastatoreEmergenzaPinza_3);
TFTimerSet(ADR(Re_TastatoreEmergenzaPinza[4]),50 ,I_TastatoreEmergenzaPinza_4);



RetardoTastatore :=  NOT TFTimerDone(ADR(RetardoFcTastastatore[1]))
						AND NOT TFTimerDone(ADR(RetardoFcTastastatore[2]))
							AND NOT TFTimerDone(ADR(RetardoFcTastastatore[3]))
								AND NOT TFTimerDone(ADR(RetardoFcTastastatore[4]));                   //   OR TFTimerDone(ADR(RetardoFcTastastatore[2])) OR TFTimerDone(ADR(RetardoFcTastastatore[3]) OR TFTimerDone(ADR(RetardoFcTastastatore[4])) ;
Temp_Bool[5] := NOT TFTimerDone(ADR(RetardoFcTastastatore[1]))
						AND NOT TFTimerDone(ADR(RetardoFcTastastatore[4]));
Temp_Bool[6] := NOT  TFTimerDone(ADR(RetardoFcTastastatore[2]))
						AND NOT TFTimerDone(ADR(RetardoFcTastastatore[3]));
						
Re_In_TastatorePinza[1] 	 := NOT TFTimerDone(ADR(RetardoFcTastastatore[1]));	
Re_In_TastatorePinza[2] 	 := NOT TFTimerDone(ADR(RetardoFcTastastatore[2]));	
Re_In_TastatorePinza[3] 	 := NOT TFTimerDone(ADR(RetardoFcTastastatore[3]));	
Re_In_TastatorePinza[4] 	 := NOT TFTimerDone(ADR(RetardoFcTastastatore[4]));						
						
Re_In_TastatoreEmergenzaPinza[1] :=  NOT TFTimerDone(ADR(Re_TastatoreEmergenzaPinza[1])) ;
Re_In_TastatoreEmergenzaPinza[2] :=  NOT TFTimerDone(ADR(Re_TastatoreEmergenzaPinza[2])) ;
Re_In_TastatoreEmergenzaPinza[3] :=  NOT TFTimerDone(ADR(Re_TastatoreEmergenzaPinza[3])) ;
Re_In_TastatoreEmergenzaPinza[4] :=  NOT TFTimerDone(ADR(Re_TastatoreEmergenzaPinza[4])) ;


Fun_SensoresTasteggio(
	Sensor_Tasteo_1:= I_TastatorePinza_1 , 
	Sensor_Tasteo_2:= I_TastatorePinza_2 , 
	Sensor_Tasteo_3:= I_TastatorePinza_3 , 
	Sensor_Tasteo_4:= I_TastatorePinza_4 , 
	Nu_sensores_Dar_Out:= 4 , 
	Sensores_Tasteggio_Ok=> Ok_sensores_Tastator , 
	Nu_Sesores_Activos=> Nu_Sensores_Leyendo);


(* Valorizzo la presenza delle falde *)

(************************************************************************
******************************* MODULO X ********************************
************************************************************************)
(* Configurazione Asse X *)

MachinePalletizerModules.AX_X.Ax 							:= ADR(X_AxisLib);
MachinePalletizerModules.AX_X.Ax^.AxRef 					:= ADR(X_Axis);
MachinePalletizerModules.AX_X.Ax^.TimeBase 					:= TimeBase;
MachinePalletizerModules.AX_X.Ax^.PowerEnable 				:= PowerEnableAssi;
MachinePalletizerModules.AX_X.Ax^.PowerEnablePositive   	:= PowerEnableAssi AND (I_ExtraCorsaPositivo_X OR NOT TouchErrorEnable);
MachinePalletizerModules.AX_X.Ax^.PowerEnableNegative   	:= PowerEnableAssi AND (I_ExtraCorsaNegativo_X OR NOT TouchErrorEnable);
MachinePalletizerModules.AX_X.Ax^.EncoderType				:= ABSOLUTE_ENCODER;
MachinePalletizerModules.AX_X.AxHomingParameters			:= ADR(AxisHomingParameters_X);


(*Sensori di extra corsa + home + tastatori + presenza elemento nella pinza*)
MachinePalletizerModules.AX_X.IN.Px_Touch_1			 		:= Ok_sensores_Tastator OR (Re_In_TastatorePinza[1]  AND Re_In_TastatorePinza[2]) ;
MachinePalletizerModules.AX_X.IN.Px_Touch_2			 		:= Ok_sensores_Tastator OR ( Re_In_TastatorePinza[3]  AND Re_In_TastatorePinza[4]) ;
//MachinePalletizerModules.AX_X.IN.PX_TouchEmergency_1		:= I_TastatoreEmergenzaPinza_1 AND I_TastatoreEmergenzaPinza_2 AND I_TastatoreEmergenzaPinza_3 AND I_TastatoreEmergenzaPinza_4 OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_X.IN.PX_TouchEmergency_1		:= (Re_In_TastatoreEmergenzaPinza[1] AND Re_In_TastatoreEmergenzaPinza[2])OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_X.IN.PX_TouchEmergency_2		:= (Re_In_TastatoreEmergenzaPinza[3] AND Re_In_TastatoreEmergenzaPinza[4])OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_X.IN.PX_GripPresence			:= NOT I_PHPresenzaMaterialePinza;
MachinePalletizerModules.AX_X.IN.Enable_TouchEmergency   	:= ADR(TouchErrorEnable);

MachinePalletizerModules.AX_X.Ax^.PxNegative 			:= NOT I_ExtraCorsaNegativo_X ;
MachinePalletizerModules.AX_X.Ax^.PxPositive 			:= NOT I_ExtraCorsaPositivo_X ;
IF MachinePalletizerModules.AX_X.AxHomingParameters^.InvertiDirezione THEN
	MachinePalletizerModules.AX_X.Ax^.PxHome 			:= NOT I_ExtraCorsaPositivo_X;
ELSE
	MachinePalletizerModules.AX_X.Ax^.PxHome 			:= NOT I_ExtraCorsaNegativo_X;
END_IF

MachinePalletizerModules.AX_X.Ax^.PxNegativeEnable 		:= TRUE;
MachinePalletizerModules.AX_X.Ax^.PxPositiveEnable 		:= TRUE;
MachinePalletizerModules.AX_X.Ax^.HomeExecutedAlwaysOn 	:= TRUE;
MachinePalletizerModules.AX_X.Ax^.DriveNeedReset 		:= DriveNeedReset;

MachinePalletizerModules.AX_X.Ax^.Parameter.MAXPosition 			:= AxisPar_X.MaxPosition;
MachinePalletizerModules.AX_X.Ax^.Parameter.MinPosition 			:= AxisPar_X.MinPosition;
MachinePalletizerModules.AX_X.Ax^.Parameter.HomeLagError			:= 0;
MachinePalletizerModules.AX_X.Ax^.EnableAutoWritePositionLimit 		:= TRUE;
(* Varie Modulo*)
MachinePalletizerModules.AX_X.AxisPar 					:= ADR(AxisPar_X);
MachinePalletizerModules.AX_X.ManCmd					:= ADR(ManCmd.X);
MachinePalletizerModules.AX_X.Cfg.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_X.Programma					:= ADR(ProgrammaToModule_X);


//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ProgramaEjes.EjeX := ProgrammaToModule_X.ID ;
ProgramaEjes.CoordenadaEjeX := ProgrammaToModule_X.Quota_Destinazione ;
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
EncoderEsternoAsse_X.Pronto								:= I_EncoderX_Pronto;
MachinePalletizerModules.AX_X.EncoderEsterno			:= ADR(EncoderEsternoAsse_X);

(*AGGIORNAMENTO STATO DEL PROGEMMA IN ESECUZIONE*)
Programma_X[ProgrammaToModule_X.ID].Stato := ProgrammaToModule_X.Stato;
(************************************************************************
******************************* MODULO Y ********************************
************************************************************************)
(* Configurazione Asse Y *)
MachinePalletizerModules.AX_Y.Ax 							:= ADR(Y_AxisLib);
MachinePalletizerModules.AX_Y.Ax^.AxRef 					:= ADR(Y_Axis);
MachinePalletizerModules.AX_Y.Ax^.TimeBase 					:= TimeBase;
MachinePalletizerModules.AX_Y.Ax^.PowerEnable 				:= PowerEnableAssi;
MachinePalletizerModules.AX_Y.Ax^.PowerEnablePositive    	:= PowerEnableAssi AND (I_ExtraCorsaPositivo_Y OR NOT TouchErrorEnable);
MachinePalletizerModules.AX_Y.Ax^.PowerEnableNegative    	:= PowerEnableAssi AND (I_ExtraCorsaNegativo_Y OR NOT TouchErrorEnable);
MachinePalletizerModules.AX_Y.Ax^.EncoderType				:= ABSOLUTE_ENCODER;
MachinePalletizerModules.AX_Y.AxHomingParameters			:= ADR(AxisHomingParameters_Y);

(*Sensori di extra corsa + home + tastatori + presenza elemento nella pinza + sicurezza cinghia*)
MachinePalletizerModules.AX_Y.IN.BeltSafety				:= I_SicurezzaCinghia_Y OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_Y.IN.Px_Touch_1			 	:= Ok_sensores_Tastator OR (Re_In_TastatorePinza[1]  AND Re_In_TastatorePinza[2]) ;
MachinePalletizerModules.AX_Y.IN.Px_Touch_2			 	:= Ok_sensores_Tastator OR (Re_In_TastatorePinza[3]  AND Re_In_TastatorePinza[4]) ;
//MachinePalletizerModules.AX_Y.IN.PX_TouchEmergency_1		:= I_TastatoreEmergenzaPinza_1 AND I_TastatoreEmergenzaPinza_2 AND I_TastatoreEmergenzaPinza_3 AND I_TastatoreEmergenzaPinza_4 OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_Y.IN.PX_TouchEmergency_1		:= (Re_In_TastatoreEmergenzaPinza[1] AND Re_In_TastatoreEmergenzaPinza[2]) OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_Y.IN.PX_TouchEmergency_2		:= ( Re_In_TastatoreEmergenzaPinza[3] AND Re_In_TastatoreEmergenzaPinza[4] )OR NOT TouchErrorEnable;;
MachinePalletizerModules.AX_Y.IN.PX_GripPresence			:= NOT I_PHPresenzaMaterialePinza;
MachinePalletizerModules.AX_Y.IN.Enable_TouchEmergency   := ADR(TouchErrorEnable);
MachinePalletizerModules.AX_Y.IN.SimulazioneSenzaHW		:= FALSE;//TEST_ENABLE;
MachinePalletizerModules.AX_Y.AbilitaOffsetInUscitaTasteggio   := TRUE;//FROM_HMI_PAL.HMI_AbilitaOffsetUscitaTasteggioPrelPallet;
MachinePalletizerModules.AX_Y.OffsetUscitaDaTasteggio	:=  HMI_OffsetUscitaTastatori;
MachinePalletizerModules.AX_Y.VelocitaDiUscitaDaTastatori := HMI_VelocitaDiUscitaDaTastatoriAxY;

MachinePalletizerModules.AX_Y.Ax^.PxNegative 			:= NOT I_ExtraCorsaNegativo_Y;
MachinePalletizerModules.AX_Y.Ax^.PxPositive 			:= NOT I_ExtraCorsaPositivo_Y;

IF MachinePalletizerModules.AX_Y.AxHomingParameters^.InvertiDirezione THEN
	MachinePalletizerModules.AX_Y.Ax^.PxHome 			:= NOT I_ExtraCorsaPositivo_Y;
ELSE
	MachinePalletizerModules.AX_Y.Ax^.PxHome 			:= NOT I_ExtraCorsaNegativo_Y;
END_IF

(* Varie Modulo*)
MachinePalletizerModules.AX_Y.Ax^.PxNegativeEnable 		:= TRUE;
MachinePalletizerModules.AX_Y.Ax^.PxPositiveEnable 		:= TRUE;
MachinePalletizerModules.AX_Y.Ax^.HomeExecutedAlwaysOn 	:= TRUE;
MachinePalletizerModules.AX_Y.Ax^.DriveNeedReset 		:= DriveNeedReset;

MachinePalletizerModules.AX_Y.Ax^.Parameter.MAXPosition 			:= AxisPar_Y.MaxPosition;
MachinePalletizerModules.AX_Y.Ax^.Parameter.MinPosition 			:= AxisPar_Y.MinPosition;
MachinePalletizerModules.AX_Y.Ax^.EnableAutoWritePositionLimit 		:= TRUE;
MachinePalletizerModules.AX_Y.Ax^.Parameter.HomeLagError			:= 0;

MachinePalletizerModules.AX_Y.AxisPar 					:= ADR(AxisPar_Y);
//MachinePalletizerModules.AX_Y.Status 					:= ADR(Status);
MachinePalletizerModules.AX_Y.ManCmd					:= ADR(ManCmd.Y);
MachinePalletizerModules.AX_Y.Cfg.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_Y.Programma					:= ADR(ProgrammaToModule_Y);

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ProgramaEjes.EjeY := ProgrammaToModule_Y.ID;
ProgramaEjes.CoordenadaEjeY := ProgrammaToModule_Y.Quota_Destinazione;
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//MachinePalletizerModules.AX_Y.ProgrammaNEXT				:= ADR(ProgrammaToModuleNEXT_Y);
(*AGGIORNAMENTO STATO DEL PROGEMMA IN ESECUZIONE*)
Programma_Y[ProgrammaToModule_Y.ID].Stato := ProgrammaToModule_Y.Stato;
//Programma_Y[ProgrammaToModuleNEXT_Y.ID].Stato := ProgrammaToModuleNEXT_Y.Stato;
(************************************************************************
******************************* MODULO Z ********************************
************************************************************************)
(* Configurazione Asse Z *)
MachinePalletizerModules.AX_Z.Ax 						:= ADR(Z_AxisLib);
MachinePalletizerModules.AX_Z.Ax^.AxRef 					:= ADR(Z_Axis);
MachinePalletizerModules.AX_Z.Ax^.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_Z.Ax^.PowerEnable 			:= PowerEnableAssi;
MachinePalletizerModules.AX_Z.Ax^.PowerEnablePositive    := PowerEnableAssi AND (I_ExtraCorsaPositivo_Z OR NOT TouchErrorEnable)AND (I_FermoSicurezzaRilasciato OR I_StartCicloPal);
//MachinePalletizerModules.AX_Z.Ax^.PowerEnableNegative    := PowerEnableAssi AND (I_ExtraCorsaNegativo_Z AND (I_TastatoreEmergenzaPinza_1 AND I_TastatoreEmergenzaPinza_2) OR NOT TouchErrorEnable) AND (I_FermoSicurezzaRilasciato OR I_StartCicloPal);
MachinePalletizerModules.AX_Z.Ax^.PowerEnableNegative    := PowerEnableAssi 
																AND (I_ExtraCorsaNegativo_Z AND (Re_In_TastatoreEmergenzaPinza[1] AND Re_In_TastatoreEmergenzaPinza[1]) 
																			OR NOT TouchErrorEnable) AND (I_FermoSicurezzaRilasciato OR I_StartCicloPal);
MachinePalletizerModules.AX_Z.Ax^.EncoderType			:= ABSOLUTE_ENCODER;
MachinePalletizerModules.AX_Z.AxHomingParameters			:= ADR(AxisHomingParameters_Z);

MachinePalletizerModules.AX_Z.Ax^.BrakePresent := false;//TRUE;
MachinePalletizerModules.AX_Z.Ax^.BrakeEnable  := FALSE;//TRUE;
MachinePalletizerModules.AX_Z.Ax^.Parameter.TimeBrakeOff := 200;
MachinePalletizerModules.AX_Z.Ax^.Parameter.TimeBrakeOn  := 200;
MachinePalletizerModules.AX_Z.Ax^.Parameter.TimeBrakeActivation := 60000;


(*Sensori di extra corsa + home + tastatori + presenza elemento nella pinza + sicurezza cinghia*)
MachinePalletizerModules.AX_Z.IN.BeltSafety				:= I_SicurezzaCinghia_Z OR NOT TouchErrorEnable;	

(* Gestione dei tastatori in base al tipo di prelievo ovvero all'elemento che è presente in prelievo *)
MachinePalletizerModules.AX_Z.ByPassTastatoriInUscitaTasteggio 	:= FALSE;
MachinePalletizerModules.AX_Z.InterventoPxASpazio				:= FALSE;
MachinePalletizerModules.AX_Z.SpazioInteventoPX					:= HMI_SpazioInterventoTastoriCartone;

MachinePalletizerModules.AX_Z.IN.Px_Touch_1			 		:= Ok_sensores_Tastator OR (Re_In_TastatorePinza[1]  AND Re_In_TastatorePinza[2]) ;
MachinePalletizerModules.AX_Z.IN.Px_Touch_2			 		:= Ok_sensores_Tastator OR (Re_In_TastatorePinza[3]  AND Re_In_TastatorePinza[4]) ;
//MachinePalletizerModules.AX_Z.IN.PX_TouchEmergency_1		:= I_TastatoreEmergenzaPinza_1 AND I_TastatoreEmergenzaPinza_2 AND I_TastatoreEmergenzaPinza_3 AND I_TastatoreEmergenzaPinza_4 OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_Z.IN.PX_TouchEmergency_1		:= (Re_In_TastatoreEmergenzaPinza[1] AND Re_In_TastatoreEmergenzaPinza[2] ) OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_Z.IN.PX_TouchEmergency_2		:= (Re_In_TastatoreEmergenzaPinza[3] AND Re_In_TastatoreEmergenzaPinza[4]) OR NOT TouchErrorEnable;;
MachinePalletizerModules.AX_Z.IN.PX_GripPresence			:= NOT I_PHPresenzaMaterialePinza;
MachinePalletizerModules.AX_Z.IN.Enable_TouchEmergency   	:= ADR(TouchErrorEnable);
MachinePalletizerModules.AX_Z.IN.SimulazioneSenzaHW			:= FALSE;//TEST_ENABLE;
(* Gestione Tasteggio *)
MachinePalletizerModules.AX_Z.AbilitaOffsetInUscitaTasteggio   := TRUE;//FROM_HMI_PAL.HMI_AbilitaOffsetUscitaTasteggioPrelPallet;
MachinePalletizerModules.AX_Z.OffsetUscitaDaTasteggio		:= HMI_OffsetUscitaTastatori;
MachinePalletizerModules.AX_Z.VelocitaDiUscitaDaTastatori 	:= HMI_VelocitaDiUscitaDaTastatoriAxZ;
MachinePalletizerModules.AX_Z.TempoRisalitaTastatori 		:= HMI_TempoPresaPiastrella;

MachinePalletizerModules.AX_Z.Ax^.PxNegative 			:= NOT I_ExtraCorsaNegativo_Z;
MachinePalletizerModules.AX_Z.Ax^.PxPositive 			:= NOT I_ExtraCorsaPositivo_Z;
IF MachinePalletizerModules.AX_Z.AxHomingParameters^.InvertiDirezione THEN
	MachinePalletizerModules.AX_Z.Ax^.PxHome 				:= NOT I_ExtraCorsaPositivo_Z;
ELSE
	MachinePalletizerModules.AX_Z.Ax^.PxHome 				:= NOT I_ExtraCorsaNegativo_Z;
END_IF
(* Varie Modulo*)
MachinePalletizerModules.AX_Z.Ax^.PxNegativeEnable 		:= TRUE;//NOT TEST_ENABLE;
MachinePalletizerModules.AX_Z.Ax^.PxPositiveEnable 		:= TRUE;//NOT TEST_ENABLE;
MachinePalletizerModules.AX_Z.Ax^.HomeExecutedAlwaysOn 	:= TRUE;
MachinePalletizerModules.AX_Z.Ax^.DriveNeedReset 		:= DriveNeedReset;//NOT TEST_ENABLE;

MachinePalletizerModules.AX_Z.Ax^.Parameter.HomeInvertDirection 	:= TRUE;
MachinePalletizerModules.AX_Z.Ax^.Parameter.MAXPosition 			:= AxisPar_Z.MaxPosition;
MachinePalletizerModules.AX_Z.Ax^.Parameter.MinPosition 			:= AxisPar_Z.MinPosition;
MachinePalletizerModules.AX_Z.Ax^.EnableAutoWritePositionLimit 	:= TRUE;
MachinePalletizerModules.AX_Z.Ax^.Parameter.HomeLagError			:= 0;

MachinePalletizerModules.AX_Z.AxisPar 					:= ADR(AxisPar_Z);
//MachinePalletizerModules.AX_Z.Status 					:= ADR(Status);
MachinePalletizerModules.AX_Z.ManCmd						:= ADR(ManCmd.Z);
MachinePalletizerModules.AX_Z.Cfg.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_Z.Programma					:= ADR(ProgrammaToModule_Z);
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ProgramaEjes.EjeZ := ProgrammaToModule_Z.ID;
ProgramaEjes.CoordenadaEjeZ := ProgrammaToModule_Z.Quota_Destinazione;
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//MachinePalletizerModules.AX_Z.ProgrammaNEXT				:= ADR(ProgrammaToModuleNEXT_Z);

(*AGGIORNAMENTO STATO DEL PROGEMMA IN ESECUZIONE*)
Programma_Z[ProgrammaToModule_Z.ID].Stato := ProgrammaToModule_Z.Stato;
//Programma_Z[ProgrammaToModuleNEXT_Z.ID].Stato := ProgrammaToModuleNEXT_Z.Stato;

(************************************************************************
******************************* MODULO J ********************************
************************************************************************)
(* Configurazione Asse J *)
MachinePalletizerModules.AX_J.Ax 						:= ADR(J_AxisLib);
MachinePalletizerModules.AX_J.Ax^.AxRef 				:= ADR(J_Axis);
MachinePalletizerModules.AX_J.Ax^.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_J.AxisPar 					:= ADR(AxisPar_J);
//MachinePalletizerModules.AX_J.Status 					:= ADR(Status);
MachinePalletizerModules.AX_J.ManCmd					:= ADR(ManCmd.J);
MachinePalletizerModules.AX_J.Cfg.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_J.Programma					:= ADR(ProgrammaToModule_J);
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ProgramaEjes.EjeJ := ProgrammaToModule_J.ID;
ProgramaEjes.CoordenadaEjeJ := ProgrammaToModule_J.Quota_Destinazione;

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
(*RetardoAlarTastatore(IN := NOT I_TastatoreEmergenzaPinza_1 OR NOT I_TastatoreEmergenzaPinza_2 
							OR NOT I_TastatoreEmergenzaPinza_3 OR NOT I_TastatoreEmergenzaPinza_4 ,Pt:=T#30MS);*)
							
							

(*Sensori di extra corsa + home + tastatori + presenza elemento nella pinza*)
MachinePalletizerModules.AX_J.IN.Px_Touch_1			 	:=  Ok_sensores_Tastator OR (Re_In_TastatorePinza[1]  AND Re_In_TastatorePinza[2]) ;
MachinePalletizerModules.AX_J.IN.Px_Touch_2			 	:=  Ok_sensores_Tastator OR (Re_In_TastatorePinza[3]  AND Re_In_TastatorePinza[4]) ;
MachinePalletizerModules.AX_J.IN.PX_TouchEmergency_1	:= (Re_In_TastatoreEmergenzaPinza[1] AND Re_In_TastatoreEmergenzaPinza[2] ) OR NOT TouchErrorEnable;
MachinePalletizerModules.AX_J.IN.PX_TouchEmergency_2	:= (Re_In_TastatoreEmergenzaPinza[3] AND Re_In_TastatoreEmergenzaPinza[4] ) OR NOT TouchErrorEnable;;
MachinePalletizerModules.AX_J.AxHomingParameters		:= ADR(AxisHomingParameters_J);
MachinePalletizerModules.AX_J.Ax^.EncoderType			:= ABSOLUTE_ENCODER;
                                                        
MachinePalletizerModules.AX_J.IN.PX_GripPresence		:= NOT I_PHPresenzaMaterialePinza;
MachinePalletizerModules.AX_J.IN.Enable_TouchEmergency  := ADR(TouchErrorEnable);
MachinePalletizerModules.AX_J.IN.SimulazioneSenzaHW		:= FALSE;//TEST_ENABLE;

MachinePalletizerModules.AX_J.Ax^.TimeBase 				:= TimeBase;
MachinePalletizerModules.AX_J.Ax^.PowerEnable 			:= PowerEnableAssi;
MachinePalletizerModules.AX_J.Ax^.Parameter.HomeInvertDirection 	:= MachinePalletizerModules.AX_J.AxHomingParameters^.InvertiDirezione;
IF MachinePalletizerModules.AX_J.AxHomingParameters^.InvertiDirezione THEN
	MachinePalletizerModules.AX_J.Ax^.PxHome 			:= NOT I_ExtraCorsaPositivo_J;
ELSE
	MachinePalletizerModules.AX_J.Ax^.PxHome 			:= NOT I_ExtraCorsaNegativo_J;
END_IF
MachinePalletizerModules.AX_J.Ax^.PxNegative 			:= NOT I_ExtraCorsaNegativo_J;
MachinePalletizerModules.AX_J.Ax^.PxPositive 			:= NOT I_ExtraCorsaPositivo_J;

MachinePalletizerModules.AX_J.Ax^.PowerEnablePositive    := PowerEnableAssi AND (I_ExtraCorsaPositivo_J OR NOT TouchErrorEnable);
MachinePalletizerModules.AX_J.Ax^.PowerEnableNegative    := PowerEnableAssi AND (I_ExtraCorsaNegativo_J OR NOT TouchErrorEnable);

(* Varie Modulo*)
MachinePalletizerModules.AX_J.Ax^.PxNegativeEnable 		:= TRUE;
MachinePalletizerModules.AX_J.Ax^.PxPositiveEnable 		:= TRUE;//NOT TEST_ENABLE;
MachinePalletizerModules.AX_J.Ax^.HomeExecutedAlwaysOn 	:= TRUE;
MachinePalletizerModules.AX_J.Ax^.DriveNeedReset 		:= DriveNeedReset;//NOT TEST_ENABLE;

MachinePalletizerModules.AX_J.Ax^.Parameter.MAXPosition 			:= AxisPar_J.MaxPosition;
MachinePalletizerModules.AX_J.Ax^.Parameter.MinPosition 			:= AxisPar_J.MinPosition;
MachinePalletizerModules.AX_J.Ax^.EnableAutoWritePositionLimit 		:= TRUE;
MachinePalletizerModules.AX_J.Ax^.Parameter.HomeLagError			:= 0;
//FTC TASTEGGIO
MachinePalletizerModules.AX_J.IN_Pinza.InKeyence0_Byte0		:= I_Keyence180_Byte0;
MachinePalletizerModules.AX_J.IN_Pinza.InKeyence0_Byte1		:= I_Keyence180_Byte1;
MachinePalletizerModules.AX_J.IN_Pinza.InKeyence180_Byte0	:= I_Keyence0_Byte0; 
MachinePalletizerModules.AX_J.IN_Pinza.InKeyence180_Byte1	:= I_Keyence0_Byte1;

(*AGGIORNAMENTO STATO DEL PROGEMMA IN ESECUZIONE*)
Programma_J[ProgrammaToModule_J.ID].Stato := ProgrammaToModule_J.Stato;

{region " PINZA "}
(************************************************************************
***************** MODULO PINZA CON GESTIONE ASPIRAZIONI VARIE *************************
************************************************************************)
MachinePalletizerModules.Pinza.IN.TastoreCartoneDX	 			:= I_TastoreCartone1;
MachinePalletizerModules.Pinza.IN.TastoreCartoneSX	 			:= I_TastoreCartone2;
MachinePalletizerModules.Pinza.IN.ExtraCorsaPinzaSganciata 		:= I_ExtraCorsaPinzaSganciata;
MachinePalletizerModules.Pinza.IN.InKeyence0_Byte0				:= I_Keyence0_Byte0;
MachinePalletizerModules.Pinza.IN.InKeyence0_Byte1				:= I_Keyence0_Byte1;
MachinePalletizerModules.Pinza.IN.InKeyence180_Byte0			:= I_Keyence180_Byte0; 
MachinePalletizerModules.Pinza.IN.InKeyence180_Byte1			:= I_Keyence180_Byte1;

MachinePalletizerModules.Pinza.IN.InKeyence0_Byte0_2			:= I_Keyence0_Byte0_2;
MachinePalletizerModules.Pinza.IN.InKeyence0_Byte1_2			:= I_Keyence0_Byte1_2;
MachinePalletizerModules.Pinza.IN.InKeyence180_Byte0_2			:= I_Keyence180_Byte0_2; 
MachinePalletizerModules.Pinza.IN.InKeyence180_Byte1_2			:= I_Keyence180_Byte1_2;
			   
MachinePalletizerModules.Pinza.ManCmd							:= ADR(ManCmd.Pinza);
MachinePalletizerModules.Pinza.Cfg.TimeBase 					:= TimeBase;
MachinePalletizerModules.Pinza.ModuleJ							:= ADR(MachinePalletizerModules.AX_J);
MachinePalletizerModules.Pinza.Mission							:= ADR(Mission);

(* Cilindro Apertura *)
MachinePalletizerModules.Pinza.CilindroApertura 									:= ADR(CilindroAperturaPinza);
MachinePalletizerModules.Pinza.CilindroApertura^.Enable_RUN 						:= EnablePneumatica;	
MachinePalletizerModules.Pinza.CilindroApertura^.Config.ForceActive_OnStartup 		:= FALSE;				// Se a Startup il cilindro è in stato non definito forza Inattivo (CONFIG)	
MachinePalletizerModules.Pinza.CilindroApertura^.Config.ForceInactive_OnStartup 	:= TRUE;				// Se a Startup il cilindro è in stato non definito forza Attivo (CONFIG)
MachinePalletizerModules.Pinza.CilindroApertura^.Config.TimeBase 					:= Timebase;							// Base dei tempi
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.ActivationTime 			:= 100;						// [ms] di Attivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.DeactivationTime 		:= 100;						// [ms] di Disattivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.FeedbackType 			:= DEVICE_WITHOUT_FEEDBACK; 	// Scelta dei reed presenti
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.PxActive_FilterTime_OFF 	:= 0;					// [ms] di filtro sensore Attivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.PxActive_FilterTime_ON 	:= 0;					// [ms] di filtro sensore Attivo OFF (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.PxInactive_FilterTime_OFF 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.PxInactive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.Parameter.PxLatchFunction_Enable 	:= TRUE;				// Enable gestione sensori con latch (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroApertura^.IN.PX_Active 						:= I_PinzaApertaDX AND I_PinzaApertaSX;	// IN sensore aperto
MachinePalletizerModules.Pinza.CilindroApertura^.IN.PX_Inactive 					:= I_PinzaChiusaDX AND I_PinzaChiusaSX; // IN sensore chiuso	
MachinePalletizerModules.Pinza.IN.FTC_FaldaDX										:= I_PHPresenzaFaldaDX;
MachinePalletizerModules.Pinza.IN.FTC_FaldaSX										:= I_PHPresenzaFaldaSX;
MachinePalletizerModules.Pinza.AbilitaAperturaAutomaticaPinza						:= HMI_AbilitaAperturaAutomaticaPinza;
			   
(* OVEM ventose DX *)	
MachinePalletizerModules.Pinza.AspirazioneDX1 							:= ADR(Ovem1);
MachinePalletizerModules.Pinza.AspirazioneDX1^.IN.LivelloDepressione 	:=  (SHL(I_LivelloDepressioneOVEM_BH_1,8) OR I_LivelloDepressioneOVEM_BL_1) ;
(* Ingressi Ovem *)
MachinePalletizerModules.Pinza.AspirazioneDX1^.IN.PortQualifier		:=  I_PortQualifierOVEM_1;
MachinePalletizerModules.Pinza.AspirazioneDX1^.IN.TimeStamp			:=  I_TimeStampCiabattaPinzaK515;
MachinePalletizerModules.Pinza.AspirazioneDX1^.IN.AirOK				:=  I_AriaOK;
(* Comunicazione OVEM *)
ComunicazioneOvem1.sNetId 												:= F_CreateAmsNetId(I_CiabattaPinzaK515AMSADDR.netId);
ComunicazioneOvem1.nSlaveAddr 											:= I_CiabattaPinzaK515AMSADDR.port;
ComunicazioneOvem1.nPorta 												:= 1;
MachinePalletizerModules.Pinza.AspirazioneDX1^.IN_Comunication			:= ADR(ComunicazioneOvem1);
(* COMANDI *)
MachinePalletizerModules.Pinza.AspirazioneDX1^.Command					:= ADR(CommandOVEM_1);
(* PARAMETRI *)
FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_1B 	:= FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_1;
FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_2 	:= FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_1;
FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_2B 	:= FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_1;
IF (FROM_HMI_PAL.HMI_OvemParameters.SogliaDepressione_1 - FROM_HMI_PAL.HMI_OvemParameters.IsteresiDepressione_1) <= 0 THEN //Se l'isteresi è >= della soglia, la forzo a zero
	FROM_HMI_PAL.HMI_OvemParameters.IsteresiDepressione_1 := 0;
END_IF

MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.TempoInvioComandiCoe					:= 40;
MachinePalletizerModules.Pinza.AspirazioneDX1^.IN_TargetParameters								:= FROM_HMI_PAL.HMI_OvemParameters;
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.AbilitaScritturaAutomaticaParametri 	:= TRUE;
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.UtilizzaStatoDepressione_OVEM 		:= TRUE;
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.TimeDepLOST						:= 200;
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.TimeDepOK							:= 100;
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.TipoSoffio							:= 1;//Soffio Automatico e gestito dall'ovem
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.AbilitaCalcoloAutoSoglia			:= TRUE;
MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters.TipologiaOvem						:= 1;//Ovem di tipo NO
(* OVEM ventose SX *)
MachinePalletizerModules.Pinza.AspirazioneSX1 							:= ADR(Ovem2);
MachinePalletizerModules.Pinza.AspirazioneSX1^.IN.LivelloDepressione 	:=  (SHL(I_LivelloDepressioneOVEM_BH_2,8) OR I_LivelloDepressioneOVEM_BL_2) ;
(* Ingressi Ovem *)
MachinePalletizerModules.Pinza.AspirazioneSX1^.IN.PortQualifier		:=  I_PortQualifierOVEM_2;
MachinePalletizerModules.Pinza.AspirazioneSX1^.IN.TimeStamp			:=  I_TimeStampCiabattaPinzaK516;
MachinePalletizerModules.Pinza.AspirazioneSX1^.IN.AirOK				:=  I_AriaOK;
(* Comunicazione OVEM *)
ComunicazioneOvem2.sNetId 													:= F_CreateAmsNetId(I_CiabattaPinzaK516AMSADDR.netId);
ComunicazioneOvem2.nSlaveAddr 												:= I_CiabattaPinzaK516AMSADDR.port;
ComunicazioneOvem2.nPorta 													:= 1;
MachinePalletizerModules.Pinza.AspirazioneSX1^.IN_Comunication			:= ADR(ComunicazioneOvem2);
(* COMANDI *)
MachinePalletizerModules.Pinza.AspirazioneSX1^.Command					:= ADR(CommandOVEM_2);
(* PARAMETRI *)
MachinePalletizerModules.Pinza.AspirazioneSX1^.Parameters := MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters;
MachinePalletizerModules.Pinza.AspirazioneSX1^.IN_TargetParameters := MachinePalletizerModules.Pinza.AspirazioneDX1^.IN_TargetParameters;

(* OVEM ventose DX2 *)	
MachinePalletizerModules.Pinza.AspirazioneDX2 							:= ADR(Ovem12);
MachinePalletizerModules.Pinza.AspirazioneDX2^.IN.LivelloDepressione 	:=  (SHL(I_LivelloDepressioneOVEM_BH_12,8) OR I_LivelloDepressioneOVEM_BL_12) ;
(* Ingressi Ovem *)
MachinePalletizerModules.Pinza.AspirazioneDX2^.IN.PortQualifier			:=  I_PortQualifierOVEM_12;
MachinePalletizerModules.Pinza.AspirazioneDX2^.IN.TimeStamp				:=  I_TimeStampCiabattaPinzaK515;
MachinePalletizerModules.Pinza.AspirazioneDX2^.IN.AirOK					:=  I_AriaOK;
(* Comunicazione OVEM *)
ComunicazioneOvem12.sNetId 												:= F_CreateAmsNetId(I_CiabattaPinzaK515AMSADDR.netId);
ComunicazioneOvem12.nSlaveAddr 											:= I_CiabattaPinzaK515AMSADDR.port;
ComunicazioneOvem12.nPorta 												:= 5;
MachinePalletizerModules.Pinza.AspirazioneDX2^.IN_Comunication			:= ADR(ComunicazioneOvem12);
(* COMANDI *)
MachinePalletizerModules.Pinza.AspirazioneDX2^.Command					:= ADR(CommandOVEM_12);
(* PARAMETRI *)
MachinePalletizerModules.Pinza.AspirazioneDX2^.Parameters 			:= MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters;
MachinePalletizerModules.Pinza.AspirazioneDX2^.IN_TargetParameters 	:= MachinePalletizerModules.Pinza.AspirazioneDX1^.IN_TargetParameters;

(* OVEM ventose SX2 *)
MachinePalletizerModules.Pinza.AspirazioneSX2 							:= ADR(Ovem22);
MachinePalletizerModules.Pinza.AspirazioneSX2^.IN.LivelloDepressione 	:=  (SHL(I_LivelloDepressioneOVEM_BH_22,8) OR I_LivelloDepressioneOVEM_BL_22) ;
(* Ingressi Ovem *)
MachinePalletizerModules.Pinza.AspirazioneSX2^.IN.PortQualifier		:=  I_PortQualifierOVEM_22;
MachinePalletizerModules.Pinza.AspirazioneSX2^.IN.TimeStamp			:=  I_TimeStampCiabattaPinzaK516;
MachinePalletizerModules.Pinza.AspirazioneSX2^.IN.AirOK				:=  I_AriaOK;
(* Comunicazione OVEM *)
ComunicazioneOvem22.sNetId 													:= F_CreateAmsNetId(I_CiabattaPinzaK516AMSADDR.netId);
ComunicazioneOvem22.nSlaveAddr 												:= I_CiabattaPinzaK516AMSADDR.port;
ComunicazioneOvem22.nPorta 													:= 2;
MachinePalletizerModules.Pinza.AspirazioneSX2^.IN_Comunication			:= ADR(ComunicazioneOvem22);
(* COMANDI *)
MachinePalletizerModules.Pinza.AspirazioneSX2^.Command					:= ADR(CommandOVEM_22);
(* PARAMETRI *)
MachinePalletizerModules.Pinza.AspirazioneSX2^.Parameters 			:= MachinePalletizerModules.Pinza.AspirazioneDX1^.Parameters;
MachinePalletizerModules.Pinza.AspirazioneSX2^.IN_TargetParameters 	:= MachinePalletizerModules.Pinza.AspirazioneDX1^.IN_TargetParameters;
						 
MachinePalletizerModules.Pinza.IN.ByPassSensoreVuoto := HMI_AbilitaSimulazioneAVuoto;

(* Cilindro Sblocco Pinza *)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione 									:= ADR(CilindroSbloccoPinza);
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Enable_RUN 						:= EnablePneumatica;	
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Config.ForceActive_OnStartup 		:= FALSE;				// Se a Startup il cilindro è in stato non definito forza Inattivo (CONFIG)	
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Config.ForceInactive_OnStartup 	:= TRUE;				// Se a Startup il cilindro è in stato non definito forza Attivo (CONFIG)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Config.TimeBase 					:= Timebase;			// Base dei tempi
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.ActivationTime 			:= 1000;				// [ms] di Attivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.DeactivationTime 		:= 2000;					// [ms] di Disattivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.FeedbackType 			:= DEVICE_WITH_INACTIVE_FEEDBACK; 	// Scelta dei reed presenti
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.PxActive_FilterTime_OFF 	:= 0;				// [ms] di filtro sensore Attivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.PxActive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Attivo OFF (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.PxInactive_FilterTime_OFF 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.PxInactive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Parameter.PxLatchFunction_Enable 	:= TRUE;			// Enable gestione sensori con latch (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.IN.PX_Active 						:= FALSE;			// IN sensore Alto
MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.IN.PX_Inactive 					:= I_RotazioneColonnaBloccata;			// IN sensore Basso 	
MachinePalletizerModules.Pinza.AbilitazioneSbloccoRotazione									:= HMI_AbilitaSbloccoRotPinza;
(* Cilindro Sblocco Bascolante *)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante 									:= ADR(CilindroSbloccoBascolante);
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Enable_RUN 						:= EnablePneumatica;	
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Config.ForceActive_OnStartup 		:= FALSE;				// Se a Startup il cilindro è in stato non definito forza Inattivo (CONFIG)	
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Config.ForceInactive_OnStartup 	:= TRUE;				// Se a Startup il cilindro è in stato non definito forza Attivo (CONFIG)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Config.TimeBase 					:= Timebase;			// Base dei tempi
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.ActivationTime 			:= 500;				// [ms] di Attivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.DeactivationTime 		:= 500;					// [ms] di Disattivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.FeedbackType 			:= DEVICE_WITH_INACTIVE_FEEDBACK; 	// Scelta dei reed presenti
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.ActivationTime 			:= 1000;
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.PxActive_FilterTime_OFF := 0;				// [ms] di filtro sensore Attivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.PxActive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Attivo OFF (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.PxInactive_FilterTime_OFF 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.PxInactive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Parameter.PxLatchFunction_Enable 	:= TRUE;			// Enable gestione sensori con latch (PARAMETRO)
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.IN.PX_Active 						:= FALSE;			// IN sensore Alto
MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.IN.PX_Inactive 					:= I_BascolantePinzaBloccato;			// IN sensore Basso 	
MachinePalletizerModules.Pinza.AbilitazioneSbloccoBascolante								:= HMI_AbilitaBascolantePinza;
		  
(* Aspirazione Falda DX *)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX										:= ADR(AspirazioneFaldaDX);
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Enable_RUN 						:= EnablePneumatica;	
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Config.ForceActive_OnStartup 		:= FALSE;				// Se a Startup il cilindro è in stato non definito forza Inattivo (CONFIG)	
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Config.ForceInactive_OnStartup 	:= TRUE;				// Se a Startup il cilindro è in stato non definito forza Attivo (CONFIG)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Config.TimeBase 					:= Timebase;			// Base dei tempi
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.ActivationTime 		:= 1;				// [ms] di Attivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.DeactivationTime 		:= 1;					// [ms] di Disattivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.FeedbackType 			:= DEVICE_WITHOUT_FEEDBACK; 	// Scelta dei reed presenti
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.PxActive_FilterTime_OFF 	:= 0;					// [ms] di filtro sensore Attivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.PxActive_FilterTime_ON 	:= 0;					// [ms] di filtro sensore Attivo OFF (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.PxInactive_FilterTime_OFF 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.PxInactive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.Parameter.PxLatchFunction_Enable 		:= TRUE;			// Enable gestione sensori con latch (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.IN.PX_Active 							:= FALSE;			// IN sensore Alto
MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.IN.PX_Inactive 						:= FALSE;			// IN sensore Basso 	
(* Aspirazione Falda SX *)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX									:= ADR(AspirazioneFaldaSX);
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Enable_RUN 						:= EnablePneumatica;	
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Config.ForceActive_OnStartup 	:= FALSE;				// Se a Startup il cilindro è in stato non definito forza Inattivo (CONFIG)	
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Config.ForceInactive_OnStartup 	:= TRUE;				// Se a Startup il cilindro è in stato non definito forza Attivo (CONFIG)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Config.TimeBase 					:= Timebase;			// Base dei tempi
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.ActivationTime 		:= 1;				// [ms] di Attivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.DeactivationTime 		:= 1;					// [ms] di Disattivazione/Timeout (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.FeedbackType 			:= DEVICE_WITHOUT_FEEDBACK; 	// Scelta dei reed presenti
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.PxActive_FilterTime_OFF 	:= 0;					// [ms] di filtro sensore Attivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.PxActive_FilterTime_ON 	:= 0;					// [ms] di filtro sensore Attivo OFF (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.PxInactive_FilterTime_OFF 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.PxInactive_FilterTime_ON 	:= 0;				// [ms] di filtro sensore Inattivo ON (0=NO filtro) (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.Parameter.PxLatchFunction_Enable 		:= TRUE;			// Enable gestione sensori con latch (PARAMETRO)
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.IN.PX_Active 							:= FALSE;			// IN sensore Alto
MachinePalletizerModules.Pinza.AspirazioneFaldaSX^.IN.PX_Inactive 							:= FALSE;			// IN sensore Basso 	
	 

{endregion}

(* ******************************************************************************************************** *)
(* Machine/Modules Calls *)
(* ******************************************************************************************************** *)

MachinePalletizerGatesAccess.GateAccessConsolle.MachineCmd 					:= ADR(MachinePalletizer_TF.Cmd);
MachinepalletizerGatesAccess.GateAccessConsolle.MachineCmdExe 				:= ADR(MachinePalletizer_TF.CmdExe);
MachinepalletizerGatesAccess.GateAccessConsolle.MachineState 				:= ADR(MachinePalletizer_TF.State);
MachinepalletizerGatesAccess.GateAccessConsolle.MachineError 				:= ADR(MachinePalletizer_TF.Error);
MachinepalletizerGatesAccess.GateAccessConsolle.MachineMode 				:= ADR(MachinePalletizer_TF.IN.Mode);
MachinepalletizerGatesAccess.GateAccessConsolle.TimeBase 					:= TimeBase;
MachinepalletizerGatesAccess.GateAccessConsolle.AccessRequest				:= NOT I_RichiestaIngressoConsolle;
MachinepalletizerGatesAccess.GateAccessConsolle.AccessDone					:= I_ResetRichiestaIngressoConsolle;
MachinepalletizerGatesAccess.GateAccessConsolle.TilterPhaseStopDone			:= FALSE;
MachinepalletizerGatesAccess.GateAccessConsolle.PowerOK						:= I_MarciaOK;

MachinePalletizerGatesAccess.GateAccessPS306.MachineCmd 					:= ADR(MachinePalletizer_TF.Cmd);
MachinepalletizerGatesAccess.GateAccessPS306.MachineCmdExe 					:= ADR(MachinePalletizer_TF.CmdExe);
MachinepalletizerGatesAccess.GateAccessPS306.MachineState 					:= ADR(MachinePalletizer_TF.State);
MachinepalletizerGatesAccess.GateAccessPS306.MachineError 					:= ADR(MachinePalletizer_TF.Error);
MachinepalletizerGatesAccess.GateAccessPS306.MachineMode 					:= ADR(MachinePalletizer_TF.IN.Mode);
MachinepalletizerGatesAccess.GateAccessPS306.Modules 						:= ADR(MachinePalletizerModules);
MachinepalletizerGatesAccess.GateAccessPS306.Mission	 					:= ADR(Mission);
MachinepalletizerGatesAccess.GateAccessPS306.TimeBase 						:= TimeBase;
MachinepalletizerGatesAccess.GateAccessPS306.AccessRequest					:= NOT I_RichiestaIngressoPS306;
MachinepalletizerGatesAccess.GateAccessPS306.AccessDone						:= I_ResetRichiestaIngressoPS306;
MachinepalletizerGatesAccess.GateAccessPS306.TilterPhaseStopDone			:= FALSE;
MachinepalletizerGatesAccess.GateAccessPS306.PowerOK						:= I_MarciaOK;
MachinepalletizerGatesAccess.GateAccessPS306.MacchinaInLavoroZonaOpposta 	:= PortaleADx;


MachinePalletizerGatesAccess.GateAccessPS307.MachineCmd 					:= ADR(MachinePalletizer_TF.Cmd);
MachinepalletizerGatesAccess.GateAccessPS307.MachineCmdExe 					:= ADR(MachinePalletizer_TF.CmdExe);
MachinepalletizerGatesAccess.GateAccessPS307.MachineState 					:= ADR(MachinePalletizer_TF.State);
MachinepalletizerGatesAccess.GateAccessPS307.MachineError 					:= ADR(MachinePalletizer_TF.Error);
MachinepalletizerGatesAccess.GateAccessPS307.MachineMode 					:= ADR(MachinePalletizer_TF.IN.Mode);
MachinepalletizerGatesAccess.GateAccessPS307.Modules 						:= ADR(MachinePalletizerModules);
MachinepalletizerGatesAccess.GateAccessPS307.Mission	 					:= ADR(Mission);
MachinepalletizerGatesAccess.GateAccessPS307.TimeBase 						:= TimeBase;
MachinepalletizerGatesAccess.GateAccessPS307.AccessRequest					:= NOT I_RichiestaIngressoPS307;
MachinepalletizerGatesAccess.GateAccessPS307.AccessDone						:= I_ResetRichiestaIngressoPS307;
MachinepalletizerGatesAccess.GateAccessPS307.TilterPhaseStopDone			:= FALSE;
MachinepalletizerGatesAccess.GateAccessPS307.PowerOK						:= I_MarciaOK;
MachinepalletizerGatesAccess.GateAccessPS307.MacchinaInLavoroZonaOpposta 	:= PortaleADx;


MachinePalletizerGatesAccess.GateAccessPS308.MachineCmd 					:= ADR(MachinePalletizer_TF.Cmd);
MachinepalletizerGatesAccess.GateAccessPS308.MachineCmdExe 					:= ADR(MachinePalletizer_TF.CmdExe);
MachinepalletizerGatesAccess.GateAccessPS308.MachineState 					:= ADR(MachinePalletizer_TF.State);
MachinepalletizerGatesAccess.GateAccessPS308.MachineError 					:= ADR(MachinePalletizer_TF.Error);
MachinepalletizerGatesAccess.GateAccessPS308.MachineMode 					:= ADR(MachinePalletizer_TF.IN.Mode);
MachinepalletizerGatesAccess.GateAccessPS308.Modules 						:= ADR(MachinePalletizerModules);
MachinepalletizerGatesAccess.GateAccessPS308.Mission	 					:= ADR(Mission);
MachinepalletizerGatesAccess.GateAccessPS308.TimeBase 						:= TimeBase;
MachinepalletizerGatesAccess.GateAccessPS308.AccessRequest					:= NOT I_RichiestaIngressoPS308;
MachinepalletizerGatesAccess.GateAccessPS308.AccessDone						:= I_ResetRichiestaIngressoPS308;
MachinepalletizerGatesAccess.GateAccessPS308.TilterPhaseStopDone			:= FALSE;
MachinepalletizerGatesAccess.GateAccessPS308.PowerOK						:= I_MarciaOK;
MachinepalletizerGatesAccess.GateAccessPS308.MacchinaInLavoroZonaOpposta 	:= PortaleASx;


MachinePalletizerGatesAccess.GateAccessPS309.MachineCmd 					:= ADR(MachinePalletizer_TF.Cmd);
MachinepalletizerGatesAccess.GateAccessPS309.MachineCmdExe 					:= ADR(MachinePalletizer_TF.CmdExe);
MachinepalletizerGatesAccess.GateAccessPS309.MachineState 					:= ADR(MachinePalletizer_TF.State);
MachinepalletizerGatesAccess.GateAccessPS309.MachineError 					:= ADR(MachinePalletizer_TF.Error);
MachinepalletizerGatesAccess.GateAccessPS309.MachineMode 					:= ADR(MachinePalletizer_TF.IN.Mode);
MachinepalletizerGatesAccess.GateAccessPS309.Modules 						:= ADR(MachinePalletizerModules);
MachinepalletizerGatesAccess.GateAccessPS309.Mission	 					:= ADR(Mission);
MachinepalletizerGatesAccess.GateAccessPS309.TimeBase 						:= TimeBase;
MachinepalletizerGatesAccess.GateAccessPS309.AccessRequest					:= NOT I_RichiestaIngressoPS309;
MachinepalletizerGatesAccess.GateAccessPS309.AccessDone						:= I_ResetRichiestaIngressoPS309;
MachinepalletizerGatesAccess.GateAccessPS309.TilterPhaseStopDone			:= FALSE;
MachinepalletizerGatesAccess.GateAccessPS309.PowerOK						:= I_MarciaOK;
MachinepalletizerGatesAccess.GateAccessPS309.MacchinaInLavoroZonaOpposta 	:= PortaleASx;


MachinePalletizer_TF();
MachinepalletizerGatesAccess.GateAccessConsolle();
MachinepalletizerGatesAccess.GateAccessPS306();
MachinepalletizerGatesAccess.GateAccessPS307();
MachinepalletizerGatesAccess.GateAccessPS308();
MachinepalletizerGatesAccess.GateAccessPS309();
MachinePalletizerModules.AX_X();
MachinePalletizerModules.AX_Y();
MachinePalletizerModules.AX_Z();
MachinePalletizerModules.AX_J();
MachinePalletizerModules.Pinza();

(* Valutazione Input Safety *)
ResetNecessarioCentralinaSafety := I_SafetyCOMERR OR I_SafetyFBERR OR I_SafetyOTHERERR OR I_SafetyOUTERR OR
									I_SafetyCOMERR2 OR I_SafetyFBERR2 OR I_SafetyOTHERERR2 OR I_SafetyOUTERR2;
									
									
//Valuto la posizione in cui sta lavorando il pallettizzatore				
PortaleADx := MachinePalletizerModules.AX_X.Ax^.Status.ActPosition > 17060;//WorkSpace.X/2;		

PortaleASx := MachinePalletizerModules.AX_X.Ax^.Status.ActPosition < 17060;//WorkSpace.X/2;	

GateAccessError := MachinePalletizerGatesAccess.GateAccessConsolle.AccessERRORCode;// OR MachinePalletizerGatesAccess.GateAccess2.AccessERRORCode;
//Calcolo della formatura
_09_CalcolaFormatura();
//Calcola della lista di produzione TOTALE

IF NOT pruevaFor THEN 
	_11_CalcolaListaProduzione();
ELSE
	_11_CalcolaListaProduzioneNew();	
END_IF



TimerAggancioBloccoDicurezza(IN:=I_EmergenzeOK AND PowerEnableAssi,PT:=T#2S);									
O_SbloccoFermoSicurezza := TimerAggancioBloccoDicurezza.Q;									




]]></ST>
      </Implementation>
    </Action>
    <Action Name="_04_Comunicazione" Id="{69410ae8-a506-4ad3-ab4e-b4b673581bd0}">
      <Implementation>
        <ST><![CDATA[AggioraDatiLgv := AggioraDatiLgv+1;
IF AggioraDatiLgv >= 250 THEN
	AggioraDatiLgv:=0;
	(* Valorizzazione della struttura dati relativa allo stato del pallettizzatore *)
	LGV_Stato_Pallettizzatore.Automatico := I_AutoPal AND MachinePalletizer_TF.IN.Mode.Auto;// AND (MachinePalletizer_TF.CmdExe.Code = CmdDO OR MachinePalletizerLGV.LGVAccesActive);// AND MachinePalletizer_TF.CmdExe.RapidStopRequest=0 AND MachinePalletizer_TF.CmdExe.PhaseStopRequest=0; 
	LGV_Stato_Pallettizzatore.Errore     := MachinePalletizer_TF.OUT.Error;
	(* Valorizzazione della struttura dati relativa allo stato delle postazioni *)	
	LGV_PostazioniPresenti := MAXAREAPRESENT;
	FOR iLgv := 1 TO MAXAREAPRESENT DO
		LGV_Stato_Postazione[iLgv].Abilitata 		:= WorkArea[iLgv].Enable;	
		LGV_Stato_Postazione[iLgv].Stato			:= WorkAreaState[iLgv].State;
		LGV_Stato_Postazione[iLgv].Tipologia 		:= WorkArea[iLgv].Typology;	
		LGV_Stato_Postazione[iLgv].AltezzaPallet 	:= LREAL_TO_REAL(WorkAreaState[iLgv].H);
		LGV_Stato_Postazione[iLgv].CodiceFalda		:= WorkAreaState[iLgv].Code;
		LGV_Stato_Postazione[iLgv].CodiceFormatura  := WorkAreaState[iLgv].F;
		LGV_Stato_Postazione[iLgv].CodiceLavorazione:= WorkAreaState[iLgv].Code;
		LGV_Stato_Postazione[iLgv].CodicePallet		:= Forming[WorkAreaState[iLgv].F].Pallet.Code;
		LGV_Stato_Postazione[iLgv].LGV_Req			:= WorkAreaState[iLgv].LGV_Req;
		LGV_Stato_Postazione[iLgv].LGVAttr			:= WorkAreaState[iLgv].LGVAttr;
		LGV_Stato_Postazione[iLgv].NPaccoSuccesivo	:= WorkAreaState[iLgv].P;
		//LGV_Stato_Postazione[iLgv].PN				:= WorkAreaState[iLgv].PN;
		LGV_Stato_Postazione[iLgv].ProgressiveNr    := TO_UDINT(WorkAreaState[iLgv].ID);
		LGV_Stato_Postazione[iLgv].Stato			:= WorkAreaState[iLgv].State;
		IF I_LGV_Stato_Operazione[iLgv] = LGV_PRELIEVO_EFFETTUATO THEN
			I_LGV_Stato_Operazione[iLgv] := LGV_OPERAZIONE_VERIFICATA;	
			I_PHPresenzaPalletVirtuale[iLgv] := FALSE;
		ELSIF I_LGV_Stato_Operazione[iLgv] = LGV_DEPOSITO_EFFETTUATO THEN
			I_LGV_Stato_Operazione[iLgv] := LGV_OPERAZIONE_VERIFICATA;	
			I_PHPresenzaPalletVirtuale[iLgv] := TRUE;
		END_IF
	END_FOR
	(* Valorizzazione della struttura dati relativa alla formatura *)
	FOR iLgv := 1 TO MAXFORMING DO
		//LGV_Stato_Formatura[iLgv].CodiceFalda := Forming[iLgv].Layer;
		//LGV_Stato_Formatura[iLgv].CodicePallet := Forming[iLgv].Pallet;
		FOR iLgvPackP := 1 TO MAXFORMINGPACK DO
			;
			//IF Forming[iLgv].PackXP[iLgvPackP].Grip <> -1 THEN
			//	LGV_Stato_Formatura[iLgv].PacchiPresenti_ZonaPositiva := UINT_TO_INT(iLgvPackP);
			//END_IF
		END_FOR
		FOR iLgvPackN := 1 TO MAXFORMINGPACK DO
			;
			//IF Forming[iLgv].PackXP[iLgvPackN].Grip <> -1 THEN
			//	LGV_Stato_Formatura[iLgv].PacchiPresenti_ZonaNegativa := UINT_TO_INT(iLgvPackN);
			//END_IF
		END_FOR
	END_FOR
	(* Gestione Richieste Ingresso *)
	(*OLGV_Req := O_LGV_Req;
	OLGV_LetIn := O_LGV_LetIn; 	
	
	ILGV_LetIn := I_LGV_LetIn;
	//ILGV_LetIn_HW := I_LGV_LetIn_HW; 		
	ILGV_LetIn_SW := I_LGV_LetIn_SW;
	ILGV_Footprint := I_LGV_Footprint;		
	//ILGV_Footprint_HW := I_LGV_Footprint_HW;	
	ILGV_Footprint_SW := I_LGV_Footprint_SW;*)
	
	////////////////////////////////////SIMULAZIONE FOTOCELLULA//////////////////////////////////////
	
	
	
	
END_IF	]]></ST>
      </Implementation>
    </Action>
    <Action Name="_05_ManualCmds" Id="{605028ed-4808-4ad5-96e5-b72daae2ec78}">
      <Implementation>
        <ST><![CDATA[(* ******************************************************************************************************** *)
(* Machine Palletizer Modules *)
(* ******************************************************************************************************** *)
(* Robot *)
IF MachinePalletizer_TF.IN.Mode.Man AND
	(MachinePalletizer_TF.CmdExe.Code = CmdNOP OR MachinePalletizer_TF.CmdExe.Code = CmdMAN) THEN
	
	IF ManCmdGeneralHomeTRIG AND 
		MachinePalletizer_TF.Modules^.AX_X.CmdExe.Code = CmdNOP AND
		MachinePalletizer_TF.Modules^.AX_Y.CmdExe.Code = CmdNOP AND
		MachinePalletizer_TF.Modules^.AX_Z.CmdExe.Code = CmdNOP AND
		MachinePalletizer_TF.Modules^.AX_J.CmdExe.Code = CmdNOP AND
		MachinePalletizer_TF.Modules^.Pinza.CmdExe.Code = CmdNOP THEN
		ManCmdGeneralHomeTRIG := FALSE;
		MachinePalletizer_TF.ManCmd^.GeneralHome:= FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.GeneralHome  AND NOT ManCmdGeneralHomeTRIG THEN
		ManCmdGeneralHomeTRIG := TRUE;
		TFParametersArrayClear(ADR(ParametersArray));
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.Cmd);
		(*TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_X^.Cmd);
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_Y^.Cmd);
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_Z^.Cmd);
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_K^.Cmd);
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_J^.Cmd);
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAspirazione^.Cmd);*)
	END_IF
	
	(* Suction *)
	IF MachinePalletizer_TF.ManCmd^.SuctionOff THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '10';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.SuctionOn THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '11';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.SuctionUp THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '20';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);		
	ELSIF MachinePalletizer_TF.ManCmd^.SuctionDown THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '21';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);		
	END_IF

	(* X *)
	
	IF InvertiComandoJog_X THEN
		IF MachinePalletizer_TF.ManCmd^.X.JogPos THEN
			CmdJogNeg_X := TRUE;
		ELSIF MachinePalletizer_TF.ManCmd^.X.JogNeg THEN
			CmdJogPos_X := TRUE;
		END_IF
	ELSE
		IF MachinePalletizer_TF.ManCmd^.X.JogPos THEN
			CmdJogPos_X := TRUE;
		ELSIF MachinePalletizer_TF.ManCmd^.X.JogNeg THEN
			CmdJogNeg_X := TRUE;
		END_IF
	END_IF
	
	IF ManCmdXHomeTRIG AND MachinePalletizer_TF.CmdExe.Code = CmdNOP THEN
		ManCmdXHomeTRIG := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.X.Home AND NOT ManCmdXHomeTRIG THEN
		ManCmdXHomeTRIG := TRUE;
		TFParametersArrayClear(ADR(ParametersArray));
		//TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_X^.Cmd);
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '20';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_X.Cmd);
	ELSIF CmdJogPos_X THEN//MachinePalletizer_TF.ManCmd^.X.JogPos THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '11';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_X.Cmd);
	ELSIF CmdJogNeg_X THEN//MachinePalletizer_TF.ManCmd^.X.JogNeg THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '12';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_X.Cmd);
	END_IF
	
	CmdJogPos_X := FALSE;
	CmdJogNeg_X := FALSE;

	(* Y *)
	IF ManCmdYHomeTRIG AND MachinePalletizer_TF.Modules^.AX_Y.CmdExe.Code = CmdNOP THEN
		ManCmdYHomeTRIG := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Y.Home AND NOT ManCmdYHomeTRIG THEN
		ManCmdYHomeTRIG := TRUE;
		TFParametersArrayClear(ADR(ParametersArray));
		//TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_Y^.Cmd);
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '20';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_Y.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.Y.JogPos THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '11';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_Y.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.Y.JogNeg THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '12';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_Y.Cmd);
	END_IF

	(* Z *)
	IF ManCmdZHomeTRIG AND MachinePalletizer_TF.Modules^.AX_Z.CmdExe.Code = CmdNOP THEN
		ManCmdZHomeTRIG := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Z.Home AND NOT ManCmdZHomeTRIG THEN
		ManCmdZHomeTRIG := TRUE;
		TFParametersArrayClear(ADR(ParametersArray));
		//TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_Z^.Cmd);
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '20';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_Z.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.Z.JogPos THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '11';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_Z.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.Z.JogNeg THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '12';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_Z.Cmd);
	END_IF

	(* J *)
	IF ManCmdJHomeTRIG AND MachinePalletizer_TF.Modules^.AX_J.CmdExe.Code = CmdNOP THEN
		ManCmdJHomeTRIG := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.J.Home AND NOT ManCmdJHomeTRIG THEN
		ManCmdJHomeTRIG := TRUE;
		TFParametersArrayClear(ADR(ParametersArray));
		//TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.ModuleAX_J^.Cmd);
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '20';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_J.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.J.JogPos THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '11';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_J.Cmd);
	ELSIF MachinePalletizer_TF.ManCmd^.J.JogNeg THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '12';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_J.Cmd);
	END_IF

	(* PINZA: ASPIRAZIONE/APERTURA CHIUSURA *)
	IF ManCmdJHomeTRIG AND MachinePalletizer_TF.Modules^.AX_J.CmdExe.Code = CmdNOP THEN
		ManCmdJHomeTRIG := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.ApriPinza THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '10';
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
		MachinePalletizer_TF.ManCmd^.Pinza.ApriPinza := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.ChiudiPinza THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '11';
		MachinePalletizer_TF.ManCmd^.Pinza.ChiudiPinza := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.SbloccoPinza THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '20';
		MachinePalletizer_TF.ManCmd^.Pinza.SbloccoPinza:= FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.BloccoPinza THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '21';
		MachinePalletizer_TF.ManCmd^.Pinza.BloccoPinza:= FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoFaldeDX THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '30';
		MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoFaldeDX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoFaldeDX THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '31';
		MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoFaldeDX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoFaldeSX THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '40';
		MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoFaldeSX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoFaldeSX THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '41';
		MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoFaldeSX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoDX THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '50';
		MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoDX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
//	IF MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoDX THEN
//		TFParametersArrayClear(ADR(ParametersArray));
//		ParametersArray.Parameters[0] := '1';
//		ParametersArray.Parameters[1] := '51';
//		MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoDX := FALSE;
//		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
//	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoSX THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '60';
		MachinePalletizer_TF.ManCmd^.Pinza.AttivazioneVuotoSX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoSX THEN
		
		IF Ciclo_Deposito_Lastra.Stato <> ANNULLATO AND NOT EseguitoAllinementoPezziDeposito(*AND MachinePalletizer_TF.Modules^.Pinza.AspirazioneSX^.Out.Attiva_Vuoto AND MachinePalletizer_TF.Modules^.Pinza.StatoPinza.LatoSxPiastrellaInPresa*) THEN
			IF Mission.PPlace > 0 THEN
				//Aggiungo la lastra in deposito e aggiorno lo stato della lastra della lista in modo da contrasegnarla elaborata 
				IF (MachinePalletizerModules.AX_X.Ax^.AxRef^.NcToPlc.ActPos >= WorkArea[Mission.PPlace].X - 300) AND 
					(MachinePalletizerModules.AX_X.Ax^.AxRef^.NcToPlc.ActPos <= WorkArea[Mission.PPlace].X + 300) THEN
					//WorkAreaState[Mission.PPlace].Slab[WorkAreaState[Mission.PPlace].P] 	:= MachinePalletizerModules.Pinza.ElementoInPrelievo^;
					//WorkAreaState[Mission.PPlace].SlabData[WorkAreaState[Mission.PPlace].P] := MachinePalletizerModules.Pinza.DataElement^;
					WorkAreaState[Mission.PPlace].P := WorkAreaState[Mission.PPlace].P +1;
					HMI_NumeroPezziPresentiPostazione[Mission.PPlace] := HMI_NumeroPezziPresentiPostazione[Mission.PPlace] + 1;
					IF  WorkAreaState[Mission.PPlace].Supporto.Tipologia = CAVALLETTO  THEN
						IF PosicionJDestino = 0 THEN
							WorkAreaState[Mission.PPlace].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto := WorkAreaState[Mission.PPlace].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto+1;
							HMI_NumeroPezziPresentiCavallete[Mission.PPlace].HMI_NumeroPezziPresentiPostazione_A_Cavaleto := HMI_NumeroPezziPresentiCavallete[Mission.PPlace].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +1 ;
						END_IF
						IF PosicionJDestino = 180 THEN
							WorkAreaState[Mission.PPlace].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto := WorkAreaState[Mission.PPlace].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto+1;
							HMI_NumeroPezziPresentiCavallete[Mission.PPlace].HMI_NumeroPezziPresentiPostazione_B_Cavaleto := HMI_NumeroPezziPresentiCavallete[Mission.PPlace].HMI_NumeroPezziPresentiPostazione_B_Cavaleto +1 ;
						END_IF 
					END_IF
					
					FOR i := 1 TO MAXELEMENTLIST DO
						IF WorkAreaProductionList[Mission.PPlace].PElementList[i].Stato = ELEMENTO_DA_ELABORARE THEN
							WorkAreaProductionList[Mission.PPlace].PElementList[i].Stato := ELEMENTO_ELABORATO; //Dichiaro che l'elemento della lista è stato elaborato
							EXIT;
						END_IF
					END_FOR	
					EseguitoAllinementoPezziDeposito := TRUE;				
				ELSE
					;
				END_IF
				//aggiungo nel prelievo la lastra se è stata rimessa al suo posto
				IF (MachinePalletizerModules.AX_X.Ax^.AxRef^.NcToPlc.ActPos >= WorkArea[Mission.PPick].X - 300) AND 
					(MachinePalletizerModules.AX_X.Ax^.AxRef^.NcToPlc.ActPos <= WorkArea[Mission.PPick].X + 300) THEN
					//WorkAreaState[Mission.PPlace].Slab[WorkAreaState[Mission.PPlace].P] 	:= MachinePalletizerModules.Pinza.ElementoInPrelievo^;
					//WorkAreaState[Mission.PPlace].SlabData[WorkAreaState[Mission.PPlace].P] := MachinePalletizerModules.Pinza.DataElement^;
					WorkAreaState[Mission.PPick].P := WorkAreaState[Mission.PPick].P +1;
					HMI_NumeroPezziPresentiPostazione[Mission.PPick] := HMI_NumeroPezziPresentiPostazione[Mission.PPick] + 1;
					IF  WorkAreaState[Mission.PPlace].Supporto.Tipologia = CAVALLETTO  THEN
						IF PosicionJDestino = 0 THEN
							WorkAreaState[Mission.PPick].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto := WorkAreaState[Mission.PPick].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto+1;
							HMI_NumeroPezziPresentiCavallete[Mission.PPick].HMI_NumeroPezziPresentiPostazione_A_Cavaleto := HMI_NumeroPezziPresentiCavallete[Mission.PPick].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +1 ;
						END_IF
						IF PosicionJDestino = 180 THEN
							WorkAreaState[Mission.PPick].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto := WorkAreaState[Mission.PPick].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto+1;
							HMI_NumeroPezziPresentiCavallete[Mission.PPick].HMI_NumeroPezziPresentiPostazione_B_Cavaleto := HMI_NumeroPezziPresentiCavallete[Mission.PPick].HMI_NumeroPezziPresentiPostazione_B_Cavaleto +1 ;
						END_IF 
					END_IF
					EseguitoAllinementoPezziDeposito := TRUE;	
				ELSE
					;
				END_IF
			END_IF
			
		END_IF
	
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '61';
		MachinePalletizer_TF.ManCmd^.Pinza.DisattivazioneVuotoSX := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
		Ciclo_Prelievo_Lastra.Stato 		:= ANNULLATO;
		Ciclo_Pelievo_Falda.Stato 			:= ANNULLATO;
		Ciclo_Deposito_Lastra.Stato			:= ANNULLATO;
		Ciclo_Deposito_Falda.Stato			:= ANNULLATO;
		Ciclo_Di_Riposo.Stato				:= ANNULLATO;
		Ciclo_Prelievo_Lastra_Depal.Stato 	:= ANNULLATO;
		Ciclo_Deposito_Lastra_Depal.Stato 	:= ANNULLATO;
		Ciclo_Deposito_Falda_Depal.Stato 	:= ANNULLATO;
		ProductOnGripper 					:= KNOPRODUCT;
		Ciclo_Deposito_Falda_Depal.Stato 	:= ANNULLATO;
		
		//Azzero hli apprendimenti e riporto le quote allo stato iniziale
		FOR i:=1 TO MAXAREAPRESENT DO
			WorkAreaState[i].Apprendimento.Z.Lato0.Stato 	:= APPRENDIMENTO_DA_ESEGUIRE;
			WorkAreaState[i].Apprendimento.Z.Lato90.Stato 	:= APPRENDIMENTO_DA_ESEGUIRE;
			WorkAreaState[i].Apprendimento.Z.Lato180.Stato 	:= APPRENDIMENTO_DA_ESEGUIRE;
		END_FOR
		
		StatoMissione 				:= MISSION_STATE_NOP;//Azzero segnalazione a HMI
		WorkAreaManager.State 		:= WAMANAGER_NOP;
		Mission.State 				:= MISSION_STATE_NOP;
		MaterialeDepositatoSuLinea 	:= TRUE;//In questo modo se scarico la mattonella sulla rulliera, lei parte
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.AttivaTastatori THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '70';
		MachinePalletizer_TF.ManCmd^.Pinza.AttivaTastatori := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.DisattivaTastatori THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '1';
		ParametersArray.Parameters[1] := '71';
		MachinePalletizer_TF.ManCmd^.Pinza.DisattivaTastatori := FALSE;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF
	IF MachinePalletizer_TF.ManCmd^.Pinza.CalibrazioneOVEM THEN
		TFParametersArrayClear(ADR(ParametersArray));
		MachinePalletizer_TF.ManCmd^.Pinza.CalibrazioneOVEM := FALSE;
		TFCommandSend(CmdHOME,ParametersArray,MachinePalletizer_TF.Modules^.Pinza.Cmd);
	END_IF

	//Posizionamento diretto pinza
	IF MachinePalletizer_TF.ManCmd^.PosizionamentoPinza0 THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '13';
		MachinePalletizer_TF.Modules^.AX_J.AxisPar^.Quota_Destinazione := 0;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_J.Cmd);
		MachinePalletizer_TF.ManCmd^.PosizionamentoPinza0 := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.PosizionamentoPinza90 THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '13';
		MachinePalletizer_TF.Modules^.AX_J.AxisPar^.Quota_Destinazione := 90;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_J.Cmd);
		 MachinePalletizer_TF.ManCmd^.PosizionamentoPinza90 := FALSE;
	END_IF
	IF MachinePalletizer_TF.ManCmd^.PosizionamentoPinza180 THEN
		TFParametersArrayClear(ADR(ParametersArray));
		ParametersArray.Parameters[0] := '100';
		ParametersArray.Parameters[1] := '13';
		MachinePalletizer_TF.Modules^.AX_J.AxisPar^.Quota_Destinazione := 180;
		TFCommandSend(CmdMAN,ParametersArray,MachinePalletizer_TF.Modules^.AX_J.Cmd);
		MachinePalletizer_TF.ManCmd^.PosizionamentoPinza180 := FALSE;
	END_IF
	
	IF ManCmdXHomeTRIG AND 
		MachinePalletizer_TF.Modules^.AX_X.CmdExe.Code = CmdNOP THEN
		ManCmdXHomeTRIG := FALSE;
		MachinePalletizer_TF.ManCmd^.X.Home:= FALSE;
	END_IF
	IF ManCmdYHomeTRIG AND 
		MachinePalletizer_TF.Modules^.AX_Y.CmdExe.Code = CmdNOP THEN
		ManCmdYHomeTRIG := FALSE;
		MachinePalletizer_TF.ManCmd^.Y.Home:= FALSE;
	END_IF
	IF ManCmdZHomeTRIG AND 
		MachinePalletizer_TF.Modules^.AX_Z.CmdExe.Code = CmdNOP THEN
		ManCmdZHomeTRIG := FALSE;
		MachinePalletizer_TF.ManCmd^.Z.Home:= FALSE;
	END_IF
	IF ManCmdJHomeTRIG AND 
		MachinePalletizer_TF.Modules^.AX_J.CmdExe.Code = CmdNOP THEN
		ManCmdJHomeTRIG := FALSE;
		MachinePalletizer_TF.ManCmd^.J.Home:= FALSE;
	END_IF
	
END_IF
		
]]></ST>
      </Implementation>
    </Action>
    <Action Name="_06_ScriviOutput" Id="{395db207-29a8-45db-b071-eb769af8bdaa}">
      <Implementation>
        <ST><![CDATA[(* Control Word OVEM *)
O_ControlWordOVEM_1 := MachinePalletizerModules.Pinza.AspirazioneDX1^.Out.ControlWord;
O_ControlWordOVEM_2 := MachinePalletizerModules.Pinza.AspirazioneSX1^.Out.ControlWord;

O_ControlWordOVEM_12 := MachinePalletizerModules.Pinza.AspirazioneDX2^.Out.ControlWord;
O_ControlWordOVEM_22 := MachinePalletizerModules.Pinza.AspirazioneSX2^.Out.ControlWord;

(* Configurazione Porte Ciabatta Pinza *)

{info 'TODO:SISTEMARE IO PINZA'}	

//Q_K517[22] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.0
//Q_K517[23] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.1
//Q_K517[24] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.2
Q_K517[25] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.3
//Q_K517[26] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.4
//Q_K517[27] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.5
Q_K517[28] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.6
Q_K517[29] := 1; //Configurazione pin 2 e pin 4 come uscite porta X1.7

//Q_K517[2].0 //Comando X1.0 pin 4
//Q_K517[2].1 //Comando X1.1 pin 4
//Q_K517[2].2 //Comando X1.2 pin 4
//Q_K517[2].3 //Comando X1.3 pin 4
//Q_K517[2].4 //Comando X1.4 pin 4
//Q_K517[2].5 //Comando X1.5 pin 4
//Q_K517[2].6 //Comando X1.6 pin 4
//Q_K517[2].7 //Comando X1.7 pin 4
///------------------------------//
//Q_K517[3].0 //Comando X1.0 pin 2
//Q_K517[3].1 //Comando X1.1 pin 2
//Q_K517[3].2 //Comando X1.2 pin 2
//Q_K517[3].3 //Comando X1.3 pin 2
//Q_K517[3].4 //Comando X1.4 pin 2
//Q_K517[3].5 //Comando X1.5 pin 2
//Q_K517[3].6 //Comando X1.6 pin 2
//Q_K517[3].7 //Comando X1.7 pin 2

Q_K517[2].3 := MachinePalletizerModules.Pinza.AspirazioneFaldaDX^.OUT.ActivationOutput;
Q_K517[2].6 := MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.OUT.ActivationOutput;
Q_K517[2].7 := MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.OUT.ActivationOutput;

//Q_J17[3].7 := MachinePalletizerModules.Pinza.CilindroTasteggio^.OUT.ActivationOutput;

LetturaFTCPinza0_1 		:= MachinePalletizerModules.Pinza.StatoPinza.LetturaFTC0;
LetturaFTCPinza180_1 	:= MachinePalletizerModules.Pinza.StatoPinza.LetturaFTC180;
LetturaFTCPinza0_2 		:= MachinePalletizerModules.Pinza.StatoPinza.LetturaFTC0_2;
LetturaFTCPinza180_2 	:= MachinePalletizerModules.Pinza.StatoPinza.LetturaFTC180_2;

(* ******************************************************************************************************** *)
(* OUTPUT Transfer *)
(* ******************************************************************************************************** *)

(* Pallet and Layer stacks state *)
PalletStackEmpty 												:= MachinePalletizer_TF.PalletStackEmpty;
LayerStackEmpty 												:= MachinePalletizer_TF.LayerStackEmpty;
AllWABusy 														:= MachinePalletizer_TF.AllWABusy;

(* Machine Palletizer *)
O_ResetACKAzionamenti 	:= I_StartCicloPal OR MachinePalletizerGatesAccess.GateAccessConsolle.ErrAckDriver;// OR MachinePalletizerGatesAccess.GateAccess2.ErrAckDriver;// OR MachinePalletizerLGV.ErrAckDriver;
O_AbilitazioneMarcia	:= MachinePalletizer_TF.OUT.PowerActive;


O_SirenaAllarmiPal		:= MachinePalletizer_TF.OUT.StartHorn OR MachinePalletizer_TF.OUT.Horn OR (MachinePalletizer_TF.OUT.Warning AND MachinePalletizer_TF.OUT.ClockSegnalazioniAlternato AND NOT MachinePalletizer_TF.OUT.ResetSirenaSegnalazioni);// OR (I_Trasporti_GEN_GLOBAL_ALARM_STOP AND MachinePalletizer_TF.OUT.ClockSegnalazioni);

O_LampadaAutomaticoPal	:= MachinePalletizer_TF.OUT.Run;

O_LampadaAllarmiPal		:= (MachinePalletizer_TF.OUT.Error AND MachinePalletizer_TF.OUT.ClockSegnalazioni) OR
							MachinePalletizer_TF.OUT.Error;
							
																	
O_Reset_Plc_Sicurezza := I_StartCicloPal OR 
						MachinePalletizerGatesAccess.GateAccessConsolle.ErrAck OR
						MachinePalletizerGatesAccess.GateAccessPS306.ErrAck OR
						MachinePalletizerGatesAccess.GateAccessPS307.ErrAck OR
						MachinePalletizerGatesAccess.GateAccessPS308.ErrAck OR
						MachinePalletizerGatesAccess.GateAccessPS309.ErrAck;


O_LampadaPulsanteCicloPalConsolle:= MachinePalletizer_TF.OUT.Run OR 
									(ResetNecessarioCentralinaSafety AND MachinePalletizer_TF.OUT.ClockSegnalazioni) ;
O_LampadaPulsanteMarciaPalConsolle := I_MarciaOK AND (MachinePalletizerModules.AX_X.Ax^.Status.PowerActive AND 
													MachinePalletizerModules.AX_Y.Ax^.Status.PowerActive AND 
													MachinePalletizerModules.AX_Z.Ax^.Status.PowerActive AND 
													MachinePalletizerModules.AX_J.Ax^.Status.PowerActive) OR 
										((I_MarciaOK AND NOT(MachinePalletizerModules.AX_X.Ax^.Status.PowerActive AND 
														MachinePalletizerModules.AX_Y.Ax^.Status.PowerActive AND 
														MachinePalletizerModules.AX_Z.Ax^.Status.PowerActive AND 
														MachinePalletizerModules.AX_J.Ax^.Status.PowerActive) OR
										(I_SafetyStateEmergenze_Generali <> 1 OR 
                                          I_SafetyStateEmergenza_PS306_307 <> 1 OR
                                          I_SafetyStateEmergenza_PS308_309 <> 1)) AND MachinePalletizer_TF.OUT.ClockSegnalazioni)AND NOT ResetNecessarioCentralinaSafety;

(* Gates Access *)
O_LampadaRichiestaIngressoPal	:= (MachinePalletizerGatesAccess.GateAccessConsolle.AccessLamp OR 
									MachinePalletizerGatesAccess.GateAccessPS306.AccessLamp OR
									MachinePalletizerGatesAccess.GateAccessPS307.AccessLamp OR 
									MachinePalletizerGatesAccess.GateAccessPS308.AccessLamp OR 
									MachinePalletizerGatesAccess.GateAccessPS309.AccessLamp OR
									(NOT I_BarrierePallettizzatoreOK AND MachinePalletizer_TF.OUT.ClockSegnalazioni))AND NOT ResetNecessarioCentralinaSafety;

O_LampadaPulsanteRichiestaIngressoConsolle := MachinePalletizerGatesAccess.GateAccessConsolle.AccessLamp OR 
											((I_BarrierePallettizzatoreOK <> 1 AND MachinePalletizer_TF.OUT.ClockSegnalazioni) AND NOT ResetNecessarioCentralinaSafety);
									
O_LampadaPulsanteRichiestaIngressoPS306 := MachinePalletizerGatesAccess.GateAccessPS306.AccessLamp OR 
											((NOT I_BarrierePallettizzatoreOK AND MachinePalletizer_TF.OUT.ClockSegnalazioni) AND NOT ResetNecessarioCentralinaSafety);

O_LampadaPulsanteRichiestaIngressoPS307 := MachinePalletizerGatesAccess.GateAccessPS307.AccessLamp OR 
											((NOT I_BarrierePallettizzatoreOK AND MachinePalletizer_TF.OUT.ClockSegnalazioni) AND NOT ResetNecessarioCentralinaSafety);

O_LampadaPulsanteRichiestaIngressoPS308 := MachinePalletizerGatesAccess.GateAccessPS308.AccessLamp OR 
											((NOT I_BarrierePallettizzatoreOK AND MachinePalletizer_TF.OUT.ClockSegnalazioni) AND NOT ResetNecessarioCentralinaSafety);

O_LampadaPulsanteRichiestaIngressoPS309 := MachinePalletizerGatesAccess.GateAccessPS309.AccessLamp OR 
											((NOT I_BarrierePallettizzatoreOK AND MachinePalletizer_TF.OUT.ClockSegnalazioni) AND NOT ResetNecessarioCentralinaSafety);
									
//******************** SCHEDA OUT AP201.4
O_AP201_4[1]	:= O_SirenaAllarmiPal;				
O_AP201_4[2]	:= O_LampadaAutomaticoPal;			
O_AP201_4[3]	:= O_LampadaAllarmiPal;				
O_AP201_4[4]	:= O_LampadaRichiestaIngressoPal;
O_AP201_4[5]	:= O_ConsensoVeicolo[1];						
O_AP201_4[6]	:= O_ConsensoVeicolo[2];						
O_AP201_4[7]	:= O_ConsensoVeicolo[3];						
O_AP201_4[8]	:= O_ConsensoVeicolo[4];						
O_AP201_4[9]	:= O_LampadaPulsanteCicloPalConsolle; 			
O_AP201_4[10]	:= O_LampadaPulsanteRichiestaIngressoConsolle; 	
O_AP201_4[11]	:= O_LampadaPulsanteMarciaPalConsolle;			
O_AP201_4[12]	:= O_LampadaPulsanteRichiestaIngressoPS306; 	
O_AP201_4[13]	:= O_LampadaPulsanteRichiestaIngressoPS307;		
O_AP201_4[14]	:= O_LampadaPulsanteRichiestaIngressoPS308; 	
O_AP201_4[15]	:= O_LampadaPulsanteRichiestaIngressoPS309;		
O_AP201_4[16]	:= FALSE; 										
											
//******************** SCHEDA OUT SAFETY AP201.5											
O_AP201_5;											
//O_MarciaPal	: BOOL; // CH1=											
//FREE			: BOOL; // CH2=												
//FREE			: BOOL; // CH3=												
//FREE			: BOOL; // CH4=			
									
//******************** SCHEDA OUT AP201.6												
O_AP201_6[1]	:= O_LampadaIngressoVietatoPS306; 												
O_AP201_6[2]	:= O_LampadaIngressoVietatoPS307; 												
O_AP201_6[3]	:= O_LampadaIngressoVietatoPS308; 												
O_AP201_6[4]	:= O_LampadaIngressoVietatoPS309; 												
O_AP201_6[5]	:= O_ConsensoVeicolo[5];		  												
O_AP201_6[6]	:= O_ConsensoVeicolo[6];														
O_AP201_6[7]	:= O_ConsensoVeicolo[7];														
O_AP201_6[8]	:= O_ConsensoVeicolo[8];														
O_AP201_6[9]	:= FALSE; 																		
O_AP201_6[10]	:= FALSE; 																		
O_AP201_6[11]	:= FALSE; 																		
O_AP201_6[12]	:= FALSE; 																		
O_AP201_6[13]	:= FALSE; 																		
O_AP201_6[14]	:= FALSE; 							
O_AP201_6[15]	:= FALSE; 							
O_AP201_6[16]	:= FALSE; 							


O_XDriveDigitalOutput.1 := O_SbloccoFermoSicurezza; //Sblocco del paracadute -> ingresso 1 del drive X

]]></ST>
      </Implementation>
    </Action>
    <Action Name="_07_ScriviStatus" Id="{6cd47633-e11d-4337-903f-067cef6313cd}">
      <Implementation>
        <ST><![CDATA[(*Valorizzazione della struttura Status_TF*)

(*Stato Macchina*)
Status_TF.Macchina.Auto					:= MachinePalletizer_TF.IN.Mode.Auto AND MachinePalletizer_TF.CmdExe.Code = CmdDO;
Status_TF.Macchina.Run					:= MachinePalletizer_TF.OUT.Run;
Status_TF.Macchina.Error				:= MachinePalletizer_TF.Error.Code;
Status_TF.Macchina.ErrorExtra			:= MachinePalletizer_TF.Error.ExtraCode;
Status_TF.Macchina.PowerOK				:= MachinePalletizer_TF.IN.PowerOk;
Status_TF.Macchina.EmergencyOK			:= MachinePalletizer_TF.IN.Mode.EmergencyRequest;

(*Stato assi*)	
Status_TF.X.Position 					:= MachinePalletizerModules.AX_X.Ax^.Status.ActPosition;
Status_TF.X.Velocity 					:= MachinePalletizerModules.AX_X.Ax^.Status.ActVelocity;
Status_TF.X.Torque 						:= MachinePalletizerModules.AX_X.Ax^.Status.ActTorque;
Status_TF.X.Error 						:= MachinePalletizerModules.AX_X.Ax^.Status.ErrorID;
Status_TF.X.PowerActive					:= MachinePalletizerModules.AX_X.Ax^.Status.PowerActive;

Status_TF.Y.Position 					:= MachinePalletizerModules.AX_Y.Ax^.Status.ActPosition;
Status_TF.Y.Velocity 					:= MachinePalletizerModules.AX_Y.Ax^.Status.ActVelocity;
Status_TF.Y.Torque 						:= MachinePalletizerModules.AX_Y.Ax^.Status.ActTorque;
Status_TF.Y.Error 						:= MachinePalletizerModules.AX_Y.Ax^.Status.ErrorID;
Status_TF.Y.PowerActive					:= MachinePalletizerModules.AX_Y.Ax^.Status.PowerActive;

Status_TF.Z.Position 					:= MachinePalletizerModules.AX_Z.Ax^.Status.ActPosition;
Status_TF.Z.Velocity 					:= MachinePalletizerModules.AX_Z.Ax^.Status.ActVelocity;
Status_TF.Z.Torque 						:= MachinePalletizerModules.AX_Z.Ax^.Status.ActTorque;
Status_TF.Z.Error 						:= MachinePalletizerModules.AX_Z.Ax^.Status.ErrorID;
Status_TF.Z.PowerActive					:= MachinePalletizerModules.AX_Z.Ax^.Status.PowerActive;

Status_TF.J.Position 					:= MachinePalletizerModules.AX_J.Ax^.Status.ActPosition;
Status_TF.J.Velocity 					:= MachinePalletizerModules.AX_J.Ax^.Status.ActVelocity;
Status_TF.J.Torque 						:= MachinePalletizerModules.AX_J.Ax^.Status.ActTorque;
Status_TF.J.Error 						:= MachinePalletizerModules.AX_J.Ax^.Status.ErrorID;
Status_TF.J.PowerActive					:= MachinePalletizerModules.AX_J.Ax^.Status.PowerActive;

Status_TF.K.Position 					:= 0;//ModuloAsse_K.Ax^.Status.ActPosition;
Status_TF.K.Velocity 					:= 0;//ModuloAsse_K.Ax^.Status.ActVelocity;
Status_TF.K.Torque 						:= 0;//ModuloAsse_K.Ax^.Status.ActTorque;
Status_TF.K.Error 						:= 0;//ModuloAsse_K.Ax^.Status.ErrorID;
Status_TF.K.PowerActive					:= 0;//ModuloAsse_K.Ax^.Status.PowerActive;

(*Stato Moduli*)
//Status_TF.ModAsse_X.Cmd					:= ModuloAsse_X.CmdExe.Code;
//Status_TF.ModAsse_X.CmdCase				:= ModuloAsse_X.CmdExe.CmdCase;
Status_TF.ModAsse_X.Error       		:= MachinePalletizerModules.AX_X.Error.Code;
Status_TF.ModAsse_X.ErrorExtra      	:= MachinePalletizerModules.AX_X.Error.ExtraCode;

//Status_TF.ModAsse_Y.Cmd					:= ModuloAsse_Y.CmdExe.Code;
//Status_TF.ModAsse_Y.CmdCase				:= ModuloAsse_Y.CmdExe.CmdCase;
Status_TF.ModAsse_Y.Error       		:= MachinePalletizerModules.AX_Y.Error.Code;
Status_TF.ModAsse_Y.ErrorExtra      	:= MachinePalletizerModules.AX_Y.Error.ExtraCode;

//Status_TF.ModAsse_Z.Cmd					:= ModuloAsse_Z.CmdExe.Code;
//Status_TF.ModAsse_Z.CmdCase				:= ModuloAsse_Z.CmdExe.CmdCase;
Status_TF.ModAsse_Z.Error       		:= MachinePalletizerModules.AX_Z.Error.Code;
Status_TF.ModAsse_Z.ErrorExtra      	:= MachinePalletizerModules.AX_Z.Error.ExtraCode;

//Status_TF.ModAsse_J.Cmd					:= ModuloAsse_J.CmdExe.Code;
//Status_TF.ModAsse_J.CmdCase				:= ModuloAsse_J.CmdExe.CmdCase;
Status_TF.ModAsse_J.Error       		:= MachinePalletizerModules.AX_J.Error.Code;
Status_TF.ModAsse_J.ErrorExtra      	:= MachinePalletizerModules.AX_J.Error.ExtraCode;

//Status_TF.ModAsse_K.Cmd					:= ModuloAsse_K.CmdExe.Code;
//Status_TF.ModAsse_K.CmdCase				:= ModuloAsse_K.CmdExe.CmdCase;
Status_TF.ModAsse_K.Error       		:= 0;//ModuloAsse_K.Error.Code;
Status_TF.ModAsse_K.ErrorExtra      	:= 0;//ModuloAsse_K.Error.ExtraCode;

//Status_TF.ModAspirazione.Cmd			:= ModuloAspirazione.CmdExe.Code;
//Status_TF.ModAspirazione.CmdCase		:= ModuloAspirazione.CmdExe.CmdCase;
Status_TF.ModAspirazione.Error       	:= MachinePalletizerModules.Pinza.Error.Code;
Status_TF.ModAspirazione.ErrorExtra     := MachinePalletizerModules.Pinza.Error.ExtraCode;

Status_TF.Pinza.Module.Error       	:= MachinePalletizerModules.Pinza.Error.Code;
Status_TF.Pinza.Module.ErrorExtra     := MachinePalletizerModules.Pinza.Error.ExtraCode;


(* Trsferimento a Struttura dati Creo *)
Status.MachineAuto := Status_TF.Macchina.Auto;
Status.MachineError := Status_TF.Macchina.Error;
Status.MachineErrorExtra := Status_TF.Macchina.ErrorExtra;

//Pinza Cilindro Cilindro Aspirazione DX
Status_TF.Pinza.AspirazioneDX.Active 			:= MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.Aspirazione_ON; 
Status_TF.Pinza.AspirazioneDX.Inactive 		:= MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.Aspirazione_OFF; 
Status_TF.Pinza.AspirazioneDX.SensorActive 	:= MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.DepressioneSoglia1_OK; 
Status_TF.Pinza.AspirazioneDX.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.DepressioneSoglia1_OK; 

Status_TF.Pinza.AspirazioneDX.Error := ErrBASEOVEM+MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.ErrorID;
IF Status_TF.Pinza.AspirazioneDX.Error <> ErrBASEOVEM THEN 
	Status_TF.Pinza.AspirazioneDX.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.Aspirazione_ON THEN
	Status_TF.Pinza.AspirazioneDX.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.AspirazioneDX1^.Status.Aspirazione_OFF THEN
	Status_TF.Pinza.AspirazioneDX.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.AspirazioneDX.Error = ErrBASEOVEM THEN
	Status_TF.Pinza.AspirazioneDX.Error := 0;
END_IF


//Pinza Cilindro Cilindro AspirazioneFalda SX
Status_TF.Pinza.AspirazioneSX.Active 			:= MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.Aspirazione_ON; 
Status_TF.Pinza.AspirazioneSX.Inactive 		:= MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.Aspirazione_OFF; 
Status_TF.Pinza.AspirazioneSX.SensorActive 	:= MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.DepressioneSoglia1_OK; 
Status_TF.Pinza.AspirazioneSX.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.DepressioneSoglia1_OK; 

Status_TF.Pinza.AspirazioneSX.Error := ErrBASEOVEM+MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.ErrorID ;
IF Status_TF.Pinza.AspirazioneSX.Error  <> ErrBASEOVEM THEN 
	Status_TF.Pinza.AspirazioneSX.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.Aspirazione_ON THEN
	Status_TF.Pinza.AspirazioneSX.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.AspirazioneSX1^.Status.Aspirazione_OFF THEN
	Status_TF.Pinza.AspirazioneSX.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.AspirazioneSX.Error = ErrBASEOVEM THEN
	Status_TF.Pinza.AspirazioneSX.Error := 0;
END_IF

//Pinza Cilindro Cilindro Apertura pinza 
Status_TF.Pinza.CilindroApertura.Active 			:= MachinePalletizerModules.Pinza.CilindroApertura^.Status.Active; 
Status_TF.Pinza.CilindroApertura.Inactive 			:= MachinePalletizerModules.Pinza.CilindroApertura^.Status.Inactive; 
Status_TF.Pinza.CilindroApertura.SensorActive 		:= MachinePalletizerModules.Pinza.CilindroApertura^.IN.PX_Active; 
Status_TF.Pinza.CilindroApertura.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.CilindroApertura^.IN.PX_Inactive; 

Status_TF.Pinza.CilindroApertura.Error := MachinePalletizerModules.Pinza.CilindroApertura^.Status.ErrorID ;
IF Status_TF.Pinza.CilindroApertura.Error  <> 0 THEN 
	Status_TF.Pinza.CilindroApertura.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.CilindroApertura^.Status.Active THEN
	Status_TF.Pinza.CilindroApertura.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.CilindroApertura^.Status.Inactive THEN
	Status_TF.Pinza.CilindroApertura.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.CilindroApertura.Error = 0 THEN
	Status_TF.Pinza.CilindroApertura.Error := 0;
END_IF

//Aspirazione SX2 
Status_TF.Pinza.AspirazioneSX2.Active 			:= MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.Aspirazione_ON; 
Status_TF.Pinza.AspirazioneSX2.Inactive 		:= MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.Aspirazione_OFF; 
Status_TF.Pinza.AspirazioneSX2.SensorActive 	:= MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.DepressioneSoglia1_OK; 
Status_TF.Pinza.AspirazioneSX2.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.DepressioneSoglia1_OK; 

Status_TF.Pinza.AspirazioneSX2.Error := ErrBASEOVEM+MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.ErrorID ;
IF Status_TF.Pinza.AspirazioneSX2.Error  <> ErrBASEOVEM THEN 
	Status_TF.Pinza.AspirazioneSX2.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.Aspirazione_ON THEN
	Status_TF.Pinza.AspirazioneSX2.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.AspirazioneSX2^.Status.Aspirazione_OFF THEN
	Status_TF.Pinza.AspirazioneSX2.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.AspirazioneSX2.Error = ErrBASEOVEM THEN
	Status_TF.Pinza.AspirazioneSX2.Error := 0;
END_IF
//Aspirazione DX 
Status_TF.Pinza.AspirazioneDX2.Active 			:= MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.Aspirazione_ON; 
Status_TF.Pinza.AspirazioneDX2.Inactive 		:= MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.Aspirazione_OFF; 
Status_TF.Pinza.AspirazioneDX2.SensorActive 	:= MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.DepressioneSoglia1_OK; 
Status_TF.Pinza.AspirazioneDX2.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.DepressioneSoglia1_OK; 

Status_TF.Pinza.AspirazioneDX2.Error := ErrBASEOVEM+MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.ErrorID;
IF Status_TF.Pinza.AspirazioneDX2.Error <> ErrBASEOVEM THEN 
	Status_TF.Pinza.AspirazioneDX2.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.Aspirazione_ON THEN
	Status_TF.Pinza.AspirazioneDX2.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.AspirazioneDX2^.Status.Aspirazione_OFF THEN
	Status_TF.Pinza.AspirazioneDX2.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.AspirazioneDX.Error = ErrBASEOVEM THEN
	Status_TF.Pinza.AspirazioneDX.Error := 0;
END_IF

//Pinza Cilindro Cilindro Sblocco Rotazione
Status_TF.Pinza.CilindroSbloccoRotazione.Active 			:= MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Status.Active; 
Status_TF.Pinza.CilindroSbloccoRotazione.Inactive 			:= MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Status.Inactive; 
Status_TF.Pinza.CilindroSbloccoRotazione.SensorActive 		:= MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.IN.PX_Active; 
Status_TF.Pinza.CilindroSbloccoRotazione.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.IN.PX_Inactive; 

Status_TF.Pinza.CilindroSbloccoRotazione.Error := MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Status.ErrorID ;
IF Status_TF.Pinza.CilindroSbloccoRotazione.Error  <> 0 THEN 
	Status_TF.Pinza.CilindroSbloccoRotazione.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Status.Active THEN
	Status_TF.Pinza.CilindroSbloccoRotazione.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.CilindroSbloccoRotazione^.Status.Inactive THEN
	Status_TF.Pinza.CilindroSbloccoRotazione.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.CilindroSbloccoRotazione.Error = 0 THEN
	Status_TF.Pinza.CilindroSbloccoRotazione.Error := 0;
END_IF

//Pinza Cilindro Cilindro Sblocco Bascolante
Status_TF.Pinza.CilindroSbloccoBascolante.Active 			:= MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Status.Active; 
Status_TF.Pinza.CilindroSbloccoBascolante.Inactive 			:= MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Status.Inactive; 
Status_TF.Pinza.CilindroSbloccoBascolante.SensorActive 		:= MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.IN.PX_Active; 
Status_TF.Pinza.CilindroSbloccoBascolante.SensorInactive 	:= NOT MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.IN.PX_Inactive; 

Status_TF.Pinza.CilindroSbloccoBascolante.Error := MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Status.ErrorID ;
IF Status_TF.Pinza.CilindroSbloccoBascolante.Error  <> 0 THEN 
	Status_TF.Pinza.CilindroSbloccoBascolante.StatusToHMI := 9;
ELSIF MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Status.Active THEN
	Status_TF.Pinza.CilindroSbloccoBascolante.StatusToHMI := 1;
ELSIF MachinePalletizerModules.Pinza.CilindroSbloccoBascolante^.Status.Inactive THEN
	Status_TF.Pinza.CilindroSbloccoBascolante.StatusToHMI := 2;
END_IF
IF Status_TF.Pinza.CilindroSbloccoBascolante.Error = 0 THEN
	Status_TF.Pinza.CilindroSbloccoBascolante.Error := 0;
END_IF


//Trasferisco segnalazione stato a HMI
IF Mission.State > 0 THEN
	StatoMissione := Mission.State;
ELSE
	StatoMissione := MISSION_STATE_NOP;
END_IF
//Aggiorno valori stato postazione
FOR i:=1 TO MAXAREAPRESENT DO
	HMI_Stato_Postazione[i].Abilitata 			:= WorkArea[i].Enable; 
	HMI_Stato_Postazione[i].CodiceFormatura		:= WorkAreaState[i].F;
	HMI_Stato_Postazione[i].CodiceLavorazione	:= WorkAreaState[i].Code;
	HMI_Stato_Postazione[i].LGV_Req				:= WorkAreaState[i].LGV_Req;
	HMI_Stato_Postazione[i].NPezzi				:= WorkAreaState[i].P -1;
	HMI_Stato_Postazione[i].ProgressiveNr		:= TO_UDINT(WorkAreaState[i].ID);	
	HMI_Stato_Postazione[i].Stato 				:= WorkAreaState[i].State;
	HMI_Stato_Postazione[i].TipologiaPostazione := WorkArea[i].Typology;
	HMI_Stato_Postazione[i].TipologiaSupporto 	:= WorkAreaState[i].Supporto.Tipologia;
	IF Status_TF.Macchina.Auto THEN
		HMI_NumeroPezziPresentiPostazione[i] := MAX(0,WorkAreaState[i].P-1);
		IF WorkAreaState[i].Supporto.Tipologia = CAVALLETTO THEN 
			HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_A_Cavaleto := MAX(0,WorkAreaState[i].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto-1);
			HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_B_Cavaleto := MAX(0,WorkAreaState[i].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto-1);
		END_IF
		
	END_IF
END_FOR

//STATO SICUREZZE
HMI_Status_FungiPal_OK 			:= I_SafetyStateEmergenza_PS306_307 = 1 AND I_SafetyStateEmergenza_PS308_309 = 1;
HMI_Status_FungoGenerale_OK 	:= I_SafetyStateEmergenze_Generali = 1;
HMI_Status_Funghi_OK 			:= HMI_Status_FungiPal_OK AND
                                   HMI_Status_FungoGenerale_OK;
 	    
HMI_Status_BarrierDXPal_OK 			:= I_SafetyStateBarrierDXPal  = 1;	
HMI_Status_BarrierSXPal_OK 			:= I_SafetyStateBarrierSXPal  = 1;				
HMI_Status_BarrierCentroDXPal_OK	:= I_SafetyStateBarrierCentroDXPal  = 1;		
HMI_Status_BarrierCentroSXPal_OK	:= I_SafetyStateBarrierCentroSXPal  = 1;		
HMI_Status_StateBarrierKarv_OK    	:= I_SafetyStateBarrierKarv  = 1;				

HMI_Status_BarrieraPall_OK			:= HMI_Status_BarrierDXPal_OK AND 		   
                                       HMI_Status_BarrierSXPal_OK AND 		   
                                       HMI_Status_BarrierCentroDXPal_OK AND
                                       HMI_Status_BarrierCentroSXPal_OK AND
									   HMI_Status_StateBarrierKarv_OK;
(*VISUALIZZAZIONE I/O SU PREMIUM HMI*)
HMI_AP200_2 := I_AP200_2;  	
HMI_AP200_3 := I_AP200_3;  
HMI_AP200_4 := I_AP200_4;  
HMI_AP200_5 := I_AP200_5;  
HMI_AP200_6	:= I_AP200_6;	 
HMI_AP200_7	:= I_AP200_7;	 
HMI_AP200_8 := I_AP200_8;  
HMI_AP200_9	:= I_AP200_9;	 
HMI_AP200_10:= I_AP200_10; 
HMI_AP201_2	:= I_AP201_2;	 
HMI_AP201_4 := O_AP201_4;  
HMI_AP201_5	:= I_AP201_5;	 
HMI_AP201_6 := O_AP201_6;  
HMI_AP201_3 := I_AP201_3;  
HMI_AP202_2	:= I_AP202_2;	 
HMI_AP202_3	:= I_AP202_3;	 
HMI_AP202_5	:= I_AP202_5;	 
HMI_AP202_6	:= I_AP202_6;	 

HMI_DepressioneOVEM_DX1 := Pinza.Ovem1.Status.ValoreDepressioneIstantanea;
HMI_DepressioneOVEM_DX2 := Pinza.Ovem12.Status.ValoreDepressioneIstantanea;

HMI_DepressioneOVEM_SX1 := Pinza.Ovem2.Status.ValoreDepressioneIstantanea;
HMI_DepressioneOVEM_SX2 := Pinza.Ovem22.Status.ValoreDepressioneIstantanea;

{info 'TODO:SISTEMARE IO PINZA X HMI'}	
//HMI_DepressioneOVEM_SX1 
////
//HMI_LetturaFTCPinza0_1 	
//HMI_LetturaFTCPinza180_1
//HMI_DepressioneOVEM_SX2 
////CIABATTA 516	
//HMI_DepressioneOVEM_DX1 
//HMI_DepressioneOVEM_DX2 
//HMI_LetturaFTCPinza0_2	
//HMI_LetturaFTCPinza180_2
//HMI_K516_51 			
//HMI_K516_52 			
//HMI_K516_61 			
//HMI_K516_62 			
//HMI_K516_71 			
//HMI_K516_72 			
//HMI_K516_81 			
//HMI_K516_82 			
////CIABATTA 517	
//HMI_K517_11  			
//HMI_K517_12  			
//HMI_K517_21  			
//HMI_K517_22  			
//HMI_K517_31  			
//HMI_K517_32  			
//HMI_K517_41  			
//HMI_K517_42  			
//HMI_K517_51 			
//HMI_K517_52 			
//HMI_K517_61 			
//HMI_K517_62 			
//HMI_K517_71 			
//HMI_K517_72 			
//HMI_K517_81 			
//HMI_K517_82 			]]></ST>
      </Implementation>
    </Action>
    <Action Name="_08_DataLogger_ACT" Id="{e7428516-cc17-4a9a-8206-fa2638885dc6}">
      <Implementation>
        <ST><![CDATA[// INIT - Assegnazione codici in verifica da formature - Verifico su quale fomatura è associato l codice i-esimo e scrivo la formatura associata nell'array di riferimento.
// Non posso avere duplicazioni in quanto è il supervisore a verificare che tutto sia concorde
// L'Array ottenuto, rappresenta la sequenza delle formature in cui ho un codice i-esimo
// es: formatura 1 con codici assegnati 7 e 10, formatura 3 con codicie da 1 a 4 pieni e formatura 4 con codice 15 -> 3,3,3,3,0,0,1,0,0,1,0,0,0,0,4.....
// Step 1 - cancello struttura
FOR k := 1 TO MAXFORMINGCODE DO
	DATA_LOGGER.Formign_ID_Active_Code[k] := 0;
END_FOR
// Step 2 - assegno valori attuali
FOR i := 1 TO MAXFORMING DO
	FOR k := 1 TO MAXFORMINGCODE DO 
		IF Forming[i].Code[k] <> 0 and Forming[i].Code[k] <> -1 THEN
			DATA_LOGGER.Formign_ID_Active_Code[k] := UINT_TO_INT(i);
		END_IF
	END_FOR
END_FOR

DLogger(Auto_GENERAL :=  MachinePalletizer_TF.CmdExe.Code = CmdDO, 
		Alarm_GENERAL := MachinePalletizer_TF.OUT.Error AND MachinePalletizer_TF.CmdExe.Code <> CmdDO,Man_GENERAL := MachinePalletizer_TF.IN.Mode.Man AND Status.MachineError = 0, 
		RI_GENERAL := MachinePalletizerGatesAccess.GateAccessConsolle.AccesActive (*OR MachinePalletizerGatesAccess.GateAccess2.AccesActive*),// OR MachinePalletizerLGV.LGVAccesActive, 
		Global_Reset := DLOG_Cmd_ResetCounter, 
		Daily_Reset := INT_TO_WORD(DLOG_Day_Reset), Weekly_Reset := INT_TO_WORD(DLOG_Week_Reset),
		Alarm_Reset := DLOG_Cmd_Alarm_reset,
		StoricoFile := DLOG_SaveDataOnReset,
		FilePath := 'C:\Logger\LogFile.txt',
		Channel := Channels);
		
Clogger(Global_Reset := CLOG_Global_reset,
		Daily_Reset := INT_TO_WORD(DLOG_Day_Reset), Weekly_Reset := INT_TO_WORD(DLOG_Week_Reset),
		Alarm_Reset := DLOG_Cmd_Alarm_reset,
		StoricoFile := DLOG_SaveDataOnReset,
		FilePath := 'C:\Logger\LogCounter.txt',
		Enable_Log_HMI := dlogger.Enable_Log_HMI,
		NumeroCanaliDatiProd := 16,
		Channel := Counters);
		
// Impostazione canali DataLogger
// Canale 1 - Mancanza pallet vuoti in ciclo automatico
Channels[0].Enable := TRUE;
Channels[0].Nome := 'Mancanza pallet vuoti in ciclo automatico';
Channels[0].Signal := PalletStackEmpty = 1 AND MachinePalletizer_TF.WorkAreaManager^.State = WAMANAGER_NOP AND MachinePalletizer_TF.CmdExe.Code = CmdDO;
Channels[0].Daily_Reference_Total := DLogger.Stat_Auto.Daily_Counter_State;
Channels[0].Weekly_Reference_Total := DLogger.Stat_Auto.Weekly_Counter_State;

// Canale 2 - Nessuna missione attiva su pallettizzatore in ciclo automatico
Channels[1].Enable := TRUE;
Channels[1].Nome := 'Nessuna missione attiva su pallettizzatore in ciclo automatico';
Channels[1].Signal := MachinePalletizer_TF.WorkAreaManager^.State = WAMANAGER_NOP AND MachinePalletizer_TF.CmdExe.Code = CmdDO;
Channels[1].Daily_Reference_Total := DLogger.Stat_Auto.Daily_Counter_State;
Channels[1].Weekly_Reference_Total := DLogger.Stat_Auto.Weekly_Counter_State;

// Canale 3 - Richiesta ingresso navetta su richiesta ingresso generale
(*Channels[2].Enable := TRUE;
Channels[2].Nome := 'Richiesta ingresso navetta su richiesta ingresso generale';
Channels[2].Signal := MachinePalletizerLGV.LGVAccesActive;
Channels[2].Daily_Reference_Total := DLogger.Stat_RI.Daily_Counter_State;
Channels[2].Weekly_Reference_Total := DLogger.Stat_RI.Weekly_Counter_State;
*)
// Canale 4 - Tutte le WA impegnate sul totale di automatico
Channels[3].Enable := TRUE;
Channels[3].Nome := 'Tutte le WA impegnate sul totale di automatico';
Channels[3].Signal := MachinePalletizer_TF.AllWABusy = 1 AND MachinePalletizer_TF.CmdExe.Code = CmdDO;
Channels[3].Daily_Reference_Total := DLogger.Stat_Auto.Daily_Counter_State;
Channels[3].Weekly_Reference_Total := DLogger.Stat_Auto.Weekly_Counter_State;

// Canale 5 - Tutte le WA impegnate sul totale di missione nulla
Channels[4].Enable := TRUE;
Channels[4].Nome := 'Tutte le WA impegnate sul totale di missione nulla';
Channels[4].Signal := MachinePalletizer_TF.AllWABusy = 1 AND MachinePalletizer_TF.CmdExe.Code = CmdDO;
Channels[4].Daily_Reference_Total := Channels[1].Daily_Counter_State;
Channels[4].Weekly_Reference_Total := Channels[1].Weekly_Counter_State;


////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
// Impostazione canali CounterLogger
// Canale 1 - Totale pacchi prelevati - riservato non resettabile da operatore
Counters[0].Enable := TRUE;
Counters[0].Nome := 'Totale pacchi prelevati da ribaltino';
Counters[0].Signal := MachinePalletizer_TF.CmdExe.Code = CmdDO AND PaccoPresoXDataLogger;
Counters[0].Enable_Reset_Storico := FALSE;
Counters[0].ResetCounter := FALSE;
Counters[0].Daily_Reference_Total := 100;
Counters[0].Weekly_Reference_Total := 100;


// Canale 2 - Totale Pacchi parziali
Counters[1].Enable := TRUE;
Counters[1].Nome := 'Totale pacchi prelevati da ribaltino - parziale';
Counters[1].Signal := MachinePalletizer_TF.CmdExe.Code = CmdDO AND PaccoPresoXDataLogger;
Counters[1].Enable_Reset_Storico := FALSE;
Counters[1].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[1].Daily_Reference_Total := 100;
Counters[1].Weekly_Reference_Total := 100;
Counters[1].Enable_Reset_Dopo_Salvataggio := TRUE;

(*
// Verifica segnale codice assegnato
FOR i := 1 TO 15 DO
	Counters[i + 1].Signal := MachinePalletizer_TF.CmdExe.Code = CmdDO AND PaccoPresoXDataLogger 
				AND WorkPickPointState[Mission.PPick].Code = (*Forming[DATA_LOGGER.Formign_ID_Active_Code[i]].Code[i]*) i AND WorkPickPointState[Mission.PPick].Code <> 0;
END_FOR
*)
// Conteggio riferimento pacchi parziali - somma di tutti i pacchi contati atualmente dopo reset parziale
TotalePacchiParziali := 0;
FOR i := 2 TO 16 DO
	TotalePacchiParziali := TotalePacchiParziali + Counters[I].Daily_Periodic_Counter_State;
END_FOR

// Canale 3 - Totale pacchi primo codice - parziale
Counters[2].Enable := TRUE;
Counters[2].Nome := CONCAT(STR1:= 'Primo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(1));
Counters[2].Enable_Reset_Storico := FALSE;
Counters[2].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[2].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[2].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[2].Periodic_Reference_Total := TotalePacchiParziali;
Counters[2].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 3 - Totale pacchi secondo codice - parziale
Counters[3].Enable := TRUE;
Counters[3].Nome := CONCAT(STR1:= 'Secondo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(2));
Counters[3].Enable_Reset_Storico := FALSE;
Counters[3].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[3].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[3].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[3].Periodic_Reference_Total := TotalePacchiParziali;
Counters[3].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 4 - Totale pacchi terzo codice - parziale
Counters[4].Enable := TRUE;
Counters[4].Nome := CONCAT(STR1:= 'Terzo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(3));
Counters[4].Enable_Reset_Storico := FALSE;
Counters[4].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[4].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[4].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[4].Periodic_Reference_Total := TotalePacchiParziali;
Counters[4].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 5 - Totale pacchi quarto codice - parziale
Counters[5].Enable := TRUE;
Counters[5].Nome := CONCAT(STR1:= 'Quarto codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(4));
Counters[5].Enable_Reset_Storico := FALSE;
Counters[5].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[5].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[5].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[5].Periodic_Reference_Total := TotalePacchiParziali;
Counters[5].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 6 - Totale pacchi quinto codice - parziale
Counters[6].Enable := TRUE;
Counters[6].Nome := CONCAT(STR1:= 'Quinto codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(5));
Counters[6].Enable_Reset_Storico := FALSE;
Counters[6].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[6].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[6].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[6].Periodic_Reference_Total := TotalePacchiParziali;
Counters[6].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 7 - Totale pacchi sesto codice - parziale
Counters[7].Enable := TRUE;
Counters[7].Nome := CONCAT(STR1:= 'Sesto codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(6));
Counters[7].Enable_Reset_Storico := FALSE;
Counters[7].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[7].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[7].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[7].Periodic_Reference_Total := TotalePacchiParziali;
Counters[7].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 8 - Totale pacchi settimo codice - parziale
Counters[8].Enable := TRUE;
Counters[8].Nome := CONCAT(STR1:= 'Settimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(7));
Counters[8].Enable_Reset_Storico := FALSE;
Counters[8].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[8].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[8].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[8].Periodic_Reference_Total := TotalePacchiParziali;
Counters[8].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 9 - Totale pacchi ottavo codice - parziale
Counters[9].Enable := TRUE;
Counters[9].Nome := CONCAT(STR1:= 'Ottavo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(8));
Counters[9].Enable_Reset_Storico := FALSE;
Counters[9].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[9].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[9].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[9].Periodic_Reference_Total := TotalePacchiParziali;
Counters[9].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 10 - Totale pacchi nono codice - parziale
Counters[10].Enable := TRUE;
Counters[10].Nome := CONCAT(STR1:= 'Nono codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(9));
Counters[10].Enable_Reset_Storico := FALSE;
Counters[10].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[10].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[10].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[10].Periodic_Reference_Total := TotalePacchiParziali;
Counters[10].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 11 - Totale pacchi decimo codice - parziale
Counters[11].Enable := TRUE;
Counters[11].Nome := CONCAT(STR1:= 'Decimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(10));
Counters[11].Enable_Reset_Storico := FALSE;
Counters[11].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[11].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[11].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[11].Periodic_Reference_Total := TotalePacchiParziali;
Counters[11].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 12 - Totale pacchi undicesimo codice - parziale
Counters[12].Enable := TRUE;
Counters[12].Nome := CONCAT(STR1:= 'Undicesimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(11));
Counters[12].Enable_Reset_Storico := FALSE;
Counters[12].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[12].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[12].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[12].Periodic_Reference_Total := TotalePacchiParziali;
Counters[12].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 13 - Totale pacchi dodicesimo codice - parziale
Counters[13].Enable := TRUE;
Counters[13].Nome := CONCAT(STR1:= 'Dodicesimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(12));
Counters[13].Enable_Reset_Storico := FALSE;
Counters[13].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[13].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[13].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[13].Periodic_Reference_Total := TotalePacchiParziali;
Counters[13].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 14 - Totale pacchi tredicesimo codice - parziale
Counters[14].Enable := TRUE;
Counters[14].Nome := CONCAT(STR1:= 'Tredicesimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(13));
Counters[14].Enable_Reset_Storico := FALSE;
Counters[14].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[14].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[14].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[14].Periodic_Reference_Total := TotalePacchiParziali;
Counters[14].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 15 - Totale pacchi quattordicesimo codice - parziale
Counters[15].Enable := TRUE;
Counters[15].Nome := CONCAT(STR1:= 'Quattordicesimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(14));
Counters[15].Enable_Reset_Storico := FALSE;
Counters[15].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[15].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[15].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[15].Periodic_Reference_Total := TotalePacchiParziali;
Counters[15].Enable_Reset_Dopo_Salvataggio := TRUE;

// Canale 16 - Totale pacchi quindicesimo codice - parziale
Counters[16].Enable := TRUE;
Counters[16].Nome := CONCAT(STR1:= 'Quindicesimo codice - parziale, VALORE -> ', STR2 := INT_TO_STRING(15));
Counters[16].Enable_Reset_Storico := FALSE;
Counters[16].ResetCounter := DATA_LOGGER.Reset_Operatore;
Counters[16].Daily_Reference_Total := Counters[1].Daily_Counter_State;
Counters[16].Weekly_Reference_Total := Counters[1].Weekly_Counter_State;
Counters[16].Periodic_Reference_Total := TotalePacchiParziali;
Counters[16].Enable_Reset_Dopo_Salvataggio := TRUE;

(* Reset x evitare false letture *)
PaccoPresoXDataLogger := FALSE;
//DATA_LOGGER.Reset_Operatore := FALSE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_09_CalcolaFormatura" Id="{c2cfc39e-ed3a-4d30-b6b5-c2cbe6990a0b}">
      <Implementation>
        <ST><![CDATA[//Ack 
IF HMI_ErrAckCalcolaFormatura THEN
	HMI_Forming_ErroreCalcoli := 0;
	HMI_ErrAckCalcolaFormatura := FALSE;
	FOR i:= 1 TO MAXFORMING DO
		HMI_Forming_FormaturaAttivata[i] := FALSE;
	END_FOR
END_IF

//Attivazione
FOR i:= 1 TO MAXFORMING DO
	//IF HMI_Forming_Attivazione[i] AND i <=2 AND FALSE THEN
	IF HMI_Forming_Attivazione[i] AND i <=3 AND FALSE THEN
		NCodiciPresenti := 0;
		FOR iform := 1 TO MAXFORMING DO
			FOR icode:=1 TO MAXFORMINGCODE DO
				FOR icode2:=1 TO MAXFORMINGCODE DO
					IF HMI_Forming_CodiciAbilitatiFormatura[i].Code[icode] = Forming[iform].Code[icode] AND Forming[iform].Code[icode] > 0 AND iform <> i THEN
						HMI_Forming_ErroreCalcoli := ErrRipetizioneCodici;		
						HMI_Forming_Attivazione[i] := FALSE; // prueva quitar 
						RETURN;
					END_IF 
				END_FOR
				IF HMI_Forming_CodiciAbilitatiFormatura[i].Code[icode] > 0 THEN
					NCodiciPresenti := NcodiciPresenti+1;
				END_IF
			END_FOR
		END_FOR
		//VErifico che ci sia almento un codice da attivare
		IF NcodiciPresenti = 0 THEN
			HMI_Forming_ErroreCalcoli := ErrNessunCodiciPresente;
			RETURN;
		END_IF
	
		// MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i])); //prueva Quitar
		IF NOT CalcolaFormaturaTrig AND FALSE  THEN
			HMI_Forming_FormaturaAttivata[i] 	:= FALSE;
			TFCalcoloFormatura.PulisciMemoria 	:= TRUE;
			IF TFCalcoloFormatura.PulisciMemoriaDone THEN	
				HMI_Forming_ErroreCalcoli := 0;
				//Assegno l'ordine tutto a 1 perchè ho solo lastre
				FOR i:= 1 TO MAXFORMINGSLAB DO
					IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
						TFCalcoloFormatura.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
					ELSE
						TFCalcoloFormatura.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
					END_IF
				END_FOR
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].Typology := LASTRA;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]			:= HMI_Forming_LastraDaDepositare;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA].Typology := FALDA;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]		:= HMI_Forming_LastraDaDepositare;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA].Typology := QUADROTTA;
				TFCalcoloFormatura.Supporto			:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
				TFCalcoloFormatura.CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
				MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
				CalcolaFormaturaTrig := TRUE;
				HMI_Forming_Attivazione[i] := FALSE;
				TFCalcoloFormatura.PulisciMemoria := FALSE;
			END_IF
		ELSIF (TFCalcoloFormatura.CalcolaFormaturaDone OR TFCalcoloFormatura.Errore > 0) AND CalcolaFormaturaTrig AND FALSE THEN
			TFCalcoloFormatura.CalcolaFormatura := FALSE;
			IF TFCalcoloFormatura.Errore = 0 THEN
				IDFormatura 			:= IDFormatura+1;
				GUIDFormatura 			:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
				HMI_Forming_GUID 		:= GUIDFormatura;
		
				HMI_Forming_FormaturaCalcolata 	:= TFCalcoloFormatura.FormingSlab;
				MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));	//Pulisco la memoria di destinazione
				Forming[i] 							:= TFCalcoloFormatura.FormingSlab;
				Forming[i].Enable 					:= 1;
				Forming[i].Code 					:= HMI_Forming_CodiciAbilitatiFormatura[i].Code;
				Forming[i].GUID						:= HMI_Forming_GUID;
				Forming[i].Pallet					:= HMI_Forming_Supporto;
				HMI_Forming_IndiceFormaturaAttivata := i;
				HMI_Forming_FormaturaAttivata[i] 	:= TRUE;
			ELSE
				HMI_Forming_ErroreCalcoli := TFCalcoloFormatura.Errore;
			END_IF
			CalcolaFormaturaTrig := FALSE;
			HMI_Forming_Attivazione[i] := FALSE;
		END_IF
	ELSIF HMI_Forming_Attivazione[i] AND FALSE THEN
		memset(destAddr:=ADR(TFCalcoloFormatura.Errore),fillByte:=(UINT_TO_USINT(ErrNumeroMassimoFormatureAmmesse)),n:=SIZEOF(TFCalcoloFormatura.Errore));
	END_IF

	//Disattivazione formatura
	IF HMI_Forming_Disattivazione[i] AND FALSE  THEN
		HMI_Forming_Disattivazione[i] := FALSE;
		MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));	//Pulisco la formatura selezionata e di consegenza la disattivo
	END_IF
		
END_FOR

//IF HMI_Forming_Calcola AND Forming[1].Enable = 1 AND Forming[2].Enable = 1 THEN
//	memset(destAddr:=ADR(TFCalcoloFormatura.Errore),fillByte:=(UINT_TO_USINT(ErrNumeroMassimoFormatureAmmesse)),n:=SIZEOF(TFCalcoloFormatura.Errore));
//	HMI_Forming_Calcola := FALSE;
//Creazione
IF HMI_Forming_Calcola  AND NOT CalcolaFormaturaTrig AND FALSE THEN
	TFCalcoloFormatura.PulisciMemoria := TRUE;
	IF TFCalcoloFormatura.PulisciMemoriaDone THEN	
		HMI_Forming_ErroreCalcoli := 0;
		//Assegno l'ordine tutto a 1 perchè ho solo lastre
		FOR i:= 1 TO MAXFORMINGSLAB DO
			IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
				TFCalcoloFormatura.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
			ELSE
				TFCalcoloFormatura.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
			END_IF
		END_FOR
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].Typology := LASTRA;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]			:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA].Typology := FALDA;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]		:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA].Typology := QUADROTTA;
		TFCalcoloFormatura.Supporto					:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
		TFCalcoloFormatura.CalcolaFormatura 		:= HMI_Forming_Calcola; 		//Lancio esecuzione dei calcoli
		TFCalcoloFormatura.NumeroElementiDaDepositare := HMI_Forming_NumeroElementiDaDepositare; 		//Lancio esecuzione dei calcoli
			
		MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
		CalcolaFormaturaTrig := TRUE;
		//HMI_Forming_Calcola := FALSE;
		TFCalcoloFormatura.PulisciMemoria := FALSE;
	END_IF

ELSIF HMI_Forming_Calcola AND (TFCalcoloFormatura.CalcolaFormaturaDone OR TFCalcoloFormatura.Errore > 0) AND CalcolaFormaturaTrig AND FALSE THEN
	HMI_Forming_Calcola := FALSE;
	TFCalcoloFormatura.CalcolaFormatura := FALSE;
	IF TFCalcoloFormatura.Errore = 0 THEN
		HMI_Forming_FormaturaCalcolata 	:= TFCalcoloFormatura.FormingSlab;
	//	IDFormatura 			:= IDFormatura+1;
	//	GUIDFormatura 			:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
	//	HMI_Forming_GUID 		:= GUIDFormatura;
		(*FOR i:= 1 TO 2 DO
			IF Forming[i].Enable <> 1 THEN
				MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));	//Pulisco la memoria di destinazione
				HMI_Forming_IndiceFormaturaAttivata := i;
				Forming[i] 			:= TFCalcoloFormatura.FormingSlab;
				Forming[i].Enable 	:= 1;
				Forming[i].Code 	:= HMI_Forming_CodiciAbilitatiFormatura[i].Code;
				Forming[i].GUID		:= HMI_Forming_GUID;
				Forming[i].Pallet	:= HMI_Forming_Supporto;
			ELSE
				CONTINUE;
			END_IF
			EXIT;
		END_FOR*)
		HMI_Forming_FormaturaCreata := TRUE;
	ELSE
		HMI_Forming_ErroreCalcoli := TFCalcoloFormatura.Errore;
	END_IF
	
	CalcolaFormaturaTrig := FALSE;
END_IF
IF FALSE THEN 
	 TFCalcoloFormatura();
END_IF
  

(*//Ack 
IF HMI_ErrAckCalcolaFormatura THEN
	HMI_Forming_ErroreCalcoli := 0;
	HMI_ErrAckCalcolaFormatura := FALSE;
	FOR i:= 1 TO MAXFORMING DO
		HMI_ConfermaAttivazioneFormatura[i] := FALSE;
		HMI_Forming_FormaturaAttivata[i] := FALSE;
	END_FOR
END_IF

//Attivazione
FOR i:= 1 TO MAXFORMING DO
	IF HMI_Forming_Attivazione[i] AND i <=2 THEN
		NCodiciPresenti := 0;
		
		FOR iform := 1 TO MAXFORMING DO
			FOR icode:=1 TO MAXFORMINGCODE DO
				FOR icode2:=1 TO MAXFORMINGCODE DO
					IF HMI_Forming_CodiciAbilitatiFormatura[i].Code[icode] = Forming[iform].Code[icode] AND Forming[iform].Code[icode] > 0 AND iform <> i THEN
						HMI_Forming_ErroreCalcoli := ErrRipetizioneCodici;		
						HMI_Forming_Attivazione[i] := FALSE;
						RETURN;
					END_IF 
				END_FOR
				IF HMI_Forming_CodiciAbilitatiFormatura[i].Code[icode] > 0 THEN
					NCodiciPresenti := NcodiciPresenti+1;
				END_IF
			END_FOR
		END_FOR
		//VErifico che ci sia almento un codice da attivare
		IF NcodiciPresenti = 0 THEN
			HMI_Forming_ErroreCalcoli := ErrNessunCodiciPresente;
			RETURN;
		END_IF
	
		MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));
		IF NOT CalcolaFormaturaTrig  THEN
			HMI_Forming_FormaturaAttivata[i] 	:= FALSE;
			TFCalcoloFormatura.PulisciMemoria 	:= TRUE;
			IF TFCalcoloFormatura.PulisciMemoriaDone THEN	
				HMI_Forming_ErroreCalcoli := 0;
				//Assegno l'ordine tutto a 1 perchè ho solo lastre
				FOR i:= 1 TO MAXFORMINGSLAB DO
					IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
						TFCalcoloFormatura.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
					ELSE
						TFCalcoloFormatura.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
					END_IF
				END_FOR
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].Typology := LASTRA;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]			:= HMI_Forming_LastraDaDepositare;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA].Typology := FALDA;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]		:= HMI_Forming_LastraDaDepositare;
				TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA].Typology := QUADROTTA;
				TFCalcoloFormatura.Supporto			:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
				TFCalcoloFormatura.CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
				MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
				HMI_Forming_Attivazione[i] := FALSE;
				TFCalcoloFormatura.PulisciMemoria := FALSE;
				CalcolaFormaturaTrig := TRUE;
			END_IF
		ELSIF (TFCalcoloFormatura.CalcolaFormaturaDone OR TFCalcoloFormatura.Errore > 0) AND CalcolaFormaturaTrig THEN
			//CalcolaFormaturaTrig := FALSE;
			TFCalcoloFormatura.CalcolaFormatura := FALSE;
			IF TFCalcoloFormatura.Errore = 0 THEN
				IDFormatura 			:= IDFormatura+1;
				GUIDFormatura 			:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
				HMI_Forming_GUID 		:= GUIDFormatura;
		
				HMI_Forming_FormaturaCalcolata 	:= TFCalcoloFormatura.FormingSlab;
				MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));	//Pulisco la memoria di destinazione
				Forming[i] 							:= TFCalcoloFormatura.FormingSlab;
				Forming[i].Enable 					:= 1;
				Forming[i].Code 					:= HMI_Forming_CodiciAbilitatiFormatura[i].Code;
				Forming[i].GUID						:= HMI_Forming_GUID;
				Forming[i].Pallet					:= HMI_Forming_Supporto;
				HMI_Forming_IndiceFormaturaAttivata := i;
				HMI_Forming_FormaturaAttivata[i] 	:= TRUE;
			ELSE
				HMI_Forming_ErroreCalcoli := TFCalcoloFormatura.Errore;
			END_IF
			HMI_Forming_Attivazione[i] := FALSE;
		END_IF
	ELSIF HMI_Forming_Attivazione[i] THEN
		memset(destAddr:=ADR(TFCalcoloFormatura.Errore),fillByte:=(UINT_TO_USINT(ErrNumeroMassimoFormatureAmmesse)),n:=SIZEOF(TFCalcoloFormatura.Errore));
	END_IF

	//Disattivazione formatura
	IF HMI_Forming_Disattivazione[i] THEN
		HMI_Forming_Disattivazione[i] := FALSE;
		MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));	//Pulisco la formatura selezionata e di consegenza la disattivo
	END_IF
		
END_FOR

//IF HMI_Forming_Calcola AND Forming[1].Enable = 1 AND Forming[2].Enable = 1 THEN
//	memset(destAddr:=ADR(TFCalcoloFormatura.Errore),fillByte:=(UINT_TO_USINT(ErrNumeroMassimoFormatureAmmesse)),n:=SIZEOF(TFCalcoloFormatura.Errore));
//	HMI_Forming_Calcola := FALSE;
//Creazione
IF HMI_Forming_Calcola  AND NOT CalcolaFormaturaTrig  THEN
	TFCalcoloFormatura.PulisciMemoria := TRUE;
	IF TFCalcoloFormatura.PulisciMemoriaDone THEN	
		TFCalcoloFormatura.PulisciMemoria := FALSE;
		HMI_Forming_ErroreCalcoli := 0;
		CalcolaFormaturaTrig := TRUE;
		//Assegno l'ordine tutto a 1 perchè ho solo lastre
		FOR i:= 1 TO MAXFORMINGSLAB DO
			IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
				TFCalcoloFormatura.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
			ELSE
				TFCalcoloFormatura.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
			END_IF
		END_FOR
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].Typology := LASTRA;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]			:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA].Typology := FALDA;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]		:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormatura.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA].Typology := QUADROTTA;
		TFCalcoloFormatura.Supporto					:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
		TFCalcoloFormatura.CalcolaFormatura 		:= HMI_Forming_Calcola; 		//Lancio esecuzione dei calcoli
		TFCalcoloFormatura.NumeroElementiDaDepositare := HMI_Forming_NumeroElementiDaDepositare; 		//Lancio esecuzione dei calcoli
			
		MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
		//HMI_Forming_Calcola := FALSE;
	END_IF

ELSIF HMI_Forming_Calcola AND (TFCalcoloFormatura.CalcolaFormaturaDone OR TFCalcoloFormatura.Errore > 0) AND CalcolaFormaturaTrig THEN
	HMI_Forming_Calcola := FALSE;
	TFCalcoloFormatura.CalcolaFormatura := FALSE;
	IF TFCalcoloFormatura.Errore = 0 THEN
		HMI_Forming_FormaturaCalcolata 	:= TFCalcoloFormatura.FormingSlab;
	//	IDFormatura 			:= IDFormatura+1;
	//	GUIDFormatura 			:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
	//	HMI_Forming_GUID 		:= GUIDFormatura;
		(*FOR i:= 1 TO 2 DO
			IF Forming[i].Enable <> 1 THEN
				MEMSET(ADR(Forming[i]),0,SIZEOF(Forming[i]));	//Pulisco la memoria di destinazione
				HMI_Forming_IndiceFormaturaAttivata := i;
				Forming[i] 			:= TFCalcoloFormatura.FormingSlab;
				Forming[i].Enable 	:= 1;
				Forming[i].Code 	:= HMI_Forming_CodiciAbilitatiFormatura[i].Code;
				Forming[i].GUID		:= HMI_Forming_GUID;
				Forming[i].Pallet	:= HMI_Forming_Supporto;
			ELSE
				CONTINUE;
			END_IF
			EXIT;
		END_FOR*)
		HMI_Forming_FormaturaCreata := TRUE;
	ELSE
		HMI_Forming_ErroreCalcoli := TFCalcoloFormatura.Errore;
	END_IF
	
	CalcolaFormaturaTrig := FALSE;
END_IF

TFCalcoloFormatura();*)
]]></ST>
      </Implementation>
    </Action>
    <Action Name="_10_PackModifier" Id="{fe2414cb-edd2-4aa8-a335-29a17133418c}">
      <Implementation>
        <ST><![CDATA[//Filtro le FTC delle postazioni
FOR i := 1 TO MAXAREAPRESENT DO
	FiltroFTCPalletPerManuale[i].FilterTime_OFF := 3000;
	FiltroFTCPalletPerManuale[i].FilterTime_ON 	:= 3000;
	FiltroFTCPalletPerManuale[i].IN_Signal 		:= I_PHPresenzaPallet[i];
	FiltroFTCPalletPerManuale[i]();
END_FOR

IF MachinePalletizer_TF.CmdExe.Code = CmdNOP THEN
	FOR i:= 1 TO MAXAREAPRESENT DO
		IF HMI_NumeroPezziPresentiPostazione[i] <> WorkAreaState[i].P-1 THEN
			WorkAreaState[i].P := HMI_NumeroPezziPresentiPostazione[i]+1;
		END_IF	
		
		IF HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_A_Cavaleto <> WorkAreaState[i].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto -1	THEN 
			WorkAreaState[i].P_Cava.HMI_NumeroPezziPresentiPostazione_A_Cavaleto 
								:= HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +1 ;
		END_IF
		IF HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_B_Cavaleto <> WorkAreaState[i].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto -1	THEN 
			WorkAreaState[i].P_Cava.HMI_NumeroPezziPresentiPostazione_B_Cavaleto 
								:= HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_B_Cavaleto +1 ;
		END_IF
		IF (ActualPickingListFromHMI[1].State <> 0 OR ActualPickingListFromHMI[2].State <> 0 OR ActualPickingListFromHMI[3].State <>0)
				AND WorkAreaState[i].Supporto.Tipologia = CAVALLETTO THEN 
			WorkAreaState[i].P := HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_A_Cavaleto 
					+ HMI_NumeroPezziPresentiCavallete[i].HMI_NumeroPezziPresentiPostazione_B_Cavaleto +1 ;
		END_IF		
		
		IF WorkAreaState[i].PackPointerModified THEN//Se sto facendo una modifica da HMI
			WorkAreaState[i].PackPointer:= MIN(MAX(1,WorkAreaState[i].PackPointer ),MAXFORMINGSLAB);//limito i valori con quelli ammissibili
			IF WorkAreaState[i].PackPointer > WorkAreaState[i].P THEN 
				IF (WorkAreaState[i].PackPointer - WorkAreaState[i].P) = 1 THEN
					WorkAreaState[i].P := WorkAreaState[i].P+1;
				ELSE 
					WorkAreaState[i].P := WorkAreaState[i].PackPointer+1;	
				END_IF
			ELSE
				IF (WorkAreaState[i].PackPointer - WorkAreaState[i].P) = -1 THEN
					WorkAreaState[i].P := WorkAreaState[i].P-1;
				ELSE 
					WorkAreaState[i].P := WorkAreaState[i].PackPointer+1;	
				END_IF
			END_IF
			WorkAreaState[i].Slow := 1;
			WorkAreaState[i].PackPointerModified := FALSE;
			WorkAreaState[i].PackPointer := -1;
		END_IF
		//
		HMI_NumeroPezziPresentiPostazione[i] := MAX(0,WorkAreaState[i].P-1);
		
		AggiuntaPalletManuale(WorkArea := ADR(WorkArea),
									WorkAreaState := ADR(WorkAreaState),
									WorkAreaNumber := i,
									Forming := ADR(Forming),
									Pallet := ADR(Pallet),
									Layer := ADR(Layer),
									ProgressiveNrWA := ADR(ProgressiveNrWA),
									CodicePostazione := WorkAreaState[i].Code,
									AbilitaAssegnazioneCodicePiazzoleConPaccoSuRibaltino := TRUE,
									PH_Presenza := FiltroFTCPalletPerManuale[i].Out_Signal_Filtrato);	
	END_FOR
END_IF	



















]]></ST>
      </Implementation>
    </Action>
    <Action Name="_11_CalcolaListaProduzione" Id="{b5a90fc5-183c-446d-9172-e9ebb125fccb}">
      <Implementation>
        <ST><![CDATA[{region "Gestione zona GLOBALE - Postazioni da 1 a 8"}


//#############################################################################################################

{region "Gestione zona GLOBALE - Postazioni da 1 a 8"}

//Traferisco i valori dei supporti della lista 1 nella lista 2 e 3
 

FOR LoopLista := 1 TO 3 DO
	IdxLista := LoopLista;		 
	 // IdxLista := 2;		  
	CASE IdxLista OF	 
		1: Iforstart := 1; Iforend := MAXAREAPRESENT;
		2: Iforstart := 1; Iforend := 4;
		3: Iforstart := 5; Iforend := MAXAREAPRESENT;
	END_CASE	 
	IF MachinePalletizer_TF.IN.Mode.Man AND
		(MachinePalletizer_TF.CmdExe.Code = CmdNOP OR MachinePalletizer_TF.CmdExe.Code = CmdMAN) THEN

//--------------------------------------------------------
			//AZZERAMENTO (Reset) lista di picking	
//--------------------------------------------------------		 
			IF Cmd_AzzeraLista[IdxLista] THEN
				IF Prueva THEN
					MissionClr := ADR(Mission) ;
	 				MEMSET(destAddr := ADR(MissionClr^),fillByte := 0 , n := SIZEOF(MissionClr^));
				END_IF
					ClrEstructura := ADR(PosCavalleteOrdenPikin) ;
					MEMSET(destAddr := ADR(ClrEstructura^),fillByte := 0 , n := SIZEOF(ClrEstructura^));	  
					NuEstacionesPiking := 0 ;	  
					NuEstacionPiking   := 0 ;
					NuPosGuiroPiking := 0;
					PosFinOrdenPikingCaballete := 0 ;
					
					MultiplesCavalletesReceta := FALSE ;
					CoordenadaPasillo0_Y := 0 ;
					CoordenadaPasillo180_Y := 0 ;
				
				//FOR i:= 1 TO 3 DO
						//CalcolaFormingRT2[i] := FALSE ;
					CalcolaFormingRT[IdxLista] := FALSE ;
					CalcolaFormingRT2[IdxLista] := FALSE ;	 
						//#Añadido 4_7_2025########################
					Formacion_bandelCalOk[IdxLista]			:= FALSE ;
					Formacion_FrameCalOk[IdxLista]			:= FALSE ;
					Formacion_De_listaOk[IdxLista]			:= FALSE ;
					FormaturaAFRAMERT[IdxLista]		   	:=	FormingEmpty;
					FormaturaBundleRT[IdxLista]	 		:=	FormingEmpty;
					
					MEMSET(destAddr := ADR(TFFormacionBandelCalculada),fillByte := 0 , n := SIZEOF(TFFormacionBandelCalculada));
					MEMSET(destAddr := ADR(TFFormacionCavalleteCalculada),fillByte := 0 , n := SIZEOF(TFFormacionCavalleteCalculada));
					MEMSET(destAddr := ADR(TFCalcoloFormaturaWA),fillByte := 0 , n := SIZEOF(TFCalcoloFormaturaWA));
					MEMSET(destAddr := ADR(GestionCargaCaballete),fillByte := 0 , n := SIZEOF(GestionCargaCaballete));	
					MEMSET(destAddr := ADR(GestionDescargaCaballete),fillByte := 0 , n := SIZEOF(GestionDescargaCaballete));			  
				//Añadido 4_7_2025##########################
						
				// END_FOR
				ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.NON_ESEGUITO;
				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0; 
				//Disattivazione formatura
				Forming[1] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[2] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[3] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[4] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.NON_ESEGUITO;
				Cmd_AttivaLista[IdxLista] := FALSE;
				HMI_Forming_NumeroElementiDaDepositare := 0;
 				RequestPickingListFromHMI[IdxLista].SlabNumber :=0;
	 
				//Azzero le liste per le postazioni dove non avviene la pallettizzazione
				FOR i:= Iforstart TO Iforend DO	
					TFClearWorkAreaArray(ADR(Workarea),ADR(WorkAreaState),k:=i);
					HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
					HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
					WorkAreaState[i].P 			:= 1;
					WorkAreaProductionList[i] 	:= ListaEmpty;
					WorkAreaOffset[i].Y 		:= 0;
					//HMI_NumeroPezziPresentiPostazione[i] 	:= 0; // Quitado Para No resetear posiciones
					NumeroPezziPresentiPostazioneStart[i] 	:= 0;
					WorkAreaProductionList[i].Stato 		:= e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;	 
				END_FOR			  
				ActualPickingListFromHMI[IdxLista].SlabNumber 		  			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.XDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.YDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.ZDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SupportPianoLegno 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportPianoFerro 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportVertBundle 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportVertCav 			 	:= SupportDataEmpty;
				
				HMI_ErroreCalcoloLista 		:= 0;
				Cmd_CalcolaLista[IdxLista] 	:= FALSE;
				HMI_Forming_Attivazione[IdxLista] 	:= FALSE;//attivo nuova formatura
				Cmd_AzzeraLista[IdxLista] := FALSE;
				//Ack 
				//IF HMI_ErrAckCalcolaFormatura THEN
					HMI_Forming_ErroreCalcoli := 0;
					HMI_ErrAckCalcolaFormatura := FALSE;
					FOR i:= 1 TO MAXFORMING DO
						HMI_ConfermaAttivazioneFormatura[i] := FALSE;
						HMI_Forming_FormaturaAttivata[i] := FALSE;
					END_FOR
				//END_IF
				CalcolaFormaturaTrig := FALSE;
			END_IF



//--------------------------------------------------------
		// COMANDO ATTIVAZIONE  lista di picking	
//--------------------------------------------------------		 		  
			//Se non ho una Destinazione impostata, Num.pezzi impostato, o Num.pezzi richiesto...
			//	Resetto il comando		
					IF Cmd_AttivaLista[1] = TRUE  THEN
						FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR		  
											
													  
																
						IF 	(HMI_WorkAreaDataPicking[1].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[2].Destinazione =0 AND
							HMI_WorkAreaDataPicking[3].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[4].Destinazione =0 AND	 
							HMI_WorkAreaDataPicking[5].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[6].Destinazione =0 AND
							HMI_WorkAreaDataPicking[7].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[8].Destinazione =0)							 
							OR
							(HMI_NumeroPezziPresentiPostazione[1] =0 AND 
							HMI_NumeroPezziPresentiPostazione[2] =0 AND
							HMI_NumeroPezziPresentiPostazione[3] =0 AND 
							HMI_NumeroPezziPresentiPostazione[4] =0 AND
							HMI_NumeroPezziPresentiPostazione[5] =0 AND 
	 						HMI_NumeroPezziPresentiPostazione[6] =0 AND
							HMI_NumeroPezziPresentiPostazione[7] =0 AND 
							HMI_NumeroPezziPresentiPostazione[8] =0)
							OR	 	 
							RequestPickingListFromHMI[1].SlabNumber = 0	 
						THEN
							Cmd_AttivaLista[1] := FALSE;
						 END_IF
					END_IF		  
					IF Cmd_AttivaLista[2] = TRUE  THEN
						FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR		  
						IF 	(HMI_WorkAreaDataPicking[1].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[2].Destinazione =0 AND
							HMI_WorkAreaDataPicking[3].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[4].Destinazione =0)
							OR
							(HMI_NumeroPezziPresentiPostazione[1] =0 AND 
							HMI_NumeroPezziPresentiPostazione[2] =0 AND
							HMI_NumeroPezziPresentiPostazione[3] =0 AND 
							HMI_NumeroPezziPresentiPostazione[4] =0)
							OR	 
							RequestPickingListFromHMI[2].SlabNumber = 0	 	 
						THEN
							Cmd_AttivaLista[2] := FALSE;
						 END_IF
					END_IF		
					IF Cmd_AttivaLista[3] = TRUE  THEN
					  FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR		  
						IF 	(HMI_WorkAreaDataPicking[5].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[6].Destinazione =0 AND
							HMI_WorkAreaDataPicking[7].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[8].Destinazione =0)
							OR
							(HMI_NumeroPezziPresentiPostazione[5] =0 AND 
							HMI_NumeroPezziPresentiPostazione[6] =0 AND
							HMI_NumeroPezziPresentiPostazione[7] =0 AND 
							HMI_NumeroPezziPresentiPostazione[8] =0)
							OR	 	 
							RequestPickingListFromHMI[3].SlabNumber = 0	 	 
						THEN
							Cmd_AttivaLista[3] := FALSE;
						 END_IF
					END_IF		
{Region "Prmer Bucle cuenta las piezas a coger y rellena el workareastate Con el Tipo Palet"}

			// COMANDO ATTIVAZIONE  lista di picking	
		    IF Cmd_AttivaLista[IdxLista] AND ActualPickingListFromHMI[IdxLista].State <> e_StatoWorkOrder.IN_ESECUZIONE THEN
				ElementiDaDepositare[IdxLista]   :=0;
				HMI_ErroreCalcoloLista := 0;
				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0;
				FOR i:= Iforstart TO Iforend DO	
					//HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
					//HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
					WorkAreaState[i].P := 1;
					WorkAreaProductionList[i] := ListaEmpty;
				END_FOR	 
				
				FOR i:= Iforstart TO Iforend DO	
					IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
						ElementiDaDepositare[IdxLista] := ElementiDaDepositare[IdxLista] +HMI_WorkAreaDataPicking[i].NumElementiDaLavorare;
						WorkAreaState[i].P := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare +1;
									   
						CASE HMI_WorkAreaDataPicking[i].Typology OF
							LEGNO_PIANO,TELAIO_PIANO:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;
							A_FRAME_VERT:	
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CAVALLETTO;
								
							IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare > 0 THEN 
								NuEstacionesPiking := NuEstacionesPiking + 1 ;	
								PosCavalleteOrdenPikin[i]	:=  e_Tipo_Pallet.CAVALLETTO;  
							END_IF
							BUNDLE_VERT:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.BUNDLE;	
							
						 ELSE
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;		   
						 END_CASE
					ELSE
						NumPostazioneDeposito := i; NuEstacionPiking := i;
						
						HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare := RequestPickingListFromHMI[IdxLista].SlabNumber;
						CASE HMI_WorkAreaDataPicking[i].Typology OF
							LEGNO_PIANO,TELAIO_PIANO:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;
							A_FRAME_VERT:	
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CAVALLETTO;
								NuEstacionesPiking := NuEstacionesPiking + 1 ;	
								PosCavalleteOrdenPikin[i]	:=  e_Tipo_Pallet.CAVALLETTO;  	 
							BUNDLE_VERT:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.BUNDLE;	
								
							
						 ELSE
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;		   
						 END_CASE
					END_IF

		  
//HMI_NumeroPezziPresentiPostazione[i] := WorkAreaState[i].P -1; //NB:cancellato xckè alla attivazione azzerava il num.pezzi presenti sulle postazioni di prelievo
				END_FOR
	
				IF ElementiDaDepositare[IdxLista] <= HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare THEN
					ActualPickingListFromHMI[IdxLista] 				:= RequestPickingListFromHMI[IdxLista];
					ActualPickingListFromHMI[IdxLista].State 		:= e_StatoWorkOrder.DA_ESEGUIRE;

				ELSE
					HMI_ErroreCalcoloLista := 1;
				END_IF
				Cmd_AttivaLista[IdxLista] 				:= FALSE;
				 
			ELSE
				Cmd_AttivaLista[IdxLista] 				:= FALSE;
				 
			END_IF
{endregion}	

{region "Cotas posicione de trabajo"}

//--------------------------------------------------------------------				
//////// attivazione lista di picking : StatoWorkOrder.DA_ESEGUIRE ///
//--------------------------------------------------------------------				
			IF ActualPickingListFromHMI[IdxLista].State = e_StatoWorkOrder.DA_ESEGUIRE  THEN
				ListaInEsecuzione[IdxLista] := FALSE;
				NumeroListaInEsecuzione := 0;
			
				(* Inserimento sequenza di prelievo dalle postazioni in base al quello che l'operatore ha editato da HMI*)
				ElementiDaDepositare[IdxLista] := 0;
				ElementiElaborati[IdxLista]    := 1;
				NumPostazioneDeposito := 0;
				//FOR i:= 1 TO MAXAREAPRESENT DO
				//	WorkAreaState[i].P := 1;
				//END_FOR		
				
				FOR i:= Iforstart TO Iforend DO//---------- For 1 HMI_WorkAreaDataPicking[i].Destinazione 
					IF HMI_WorkAreaDataPicking[i].Destinazione THEN  //-------> Palet destino
						NumPostazioneDeposito := i;
						HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare 	:= RequestPickingListFromHMI[IdxLista].SlabNumber;
						(*CASE HMI_WorkAreaDataPicking[i].Typology OF     // case Pricipal1*)		 
						CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF     // case Pricipal1	
							(* Se ho un legno in piano *)	 
							LEGNO_PIANO:	
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								
								CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF
									LEGNO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									TELAIO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									BUNDLE_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.BUNDLE; 
												
									A_FRAME_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CAVALLETTO; 
												
								END_CASE
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;
													//Lo que HABIA	
													//WorkAreaOffset[j].Y 							:= HMI_OffsetDepositoLastra.Y180 ;
													//Mod 25/&/2025	  
													WorkAreaOffset[NumPostazioneDeposito].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40 ;			
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVertCav.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoTrabajoLado_Cavallete := HMI_WorkAreaDataPicking[j].TipoTrabajoLado_Cavallete ;	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
											   		CoordenadaPasillo0_Y := WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y := WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
											END_CASE	
											WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto; 
										END_IF
									END_IF     
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento 
								END_FOR
								EXIT; 
							(* Se ho un telaio in piano *)	 
							TELAIO_PIANO:	
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim;
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF
									LEGNO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									TELAIO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									BUNDLE_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.BUNDLE; 
									A_FRAME_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CAVALLETTO; 
								END_CASE
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVertBundle.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													 WorkAreaOffset[j].Y 		:= 0 ;	
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;				
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertcav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoTrabajoLado_Cavallete := HMI_WorkAreaDataPicking[j].TipoTrabajoLado_Cavallete ;	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
											   		CoordenadaPasillo0_Y := WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y := WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
											END_CASE	
											WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto; 
										END_IF
									END_IF     
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento 
								END_FOR
								EXIT; 
							(* Se ho un bundle *)
							BUNDLE_VERT:
								CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF
									LEGNO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									TELAIO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									BUNDLE_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.BUNDLE; 
									A_FRAME_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CAVALLETTO; 
								END_CASE
								//Se ho deposito verticale su bundle
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.BUNDLE;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
								//Lo que HABIA
								//PruevaWorkAreaOffset[NumPostazioneDeposito].Y 								:= -40;	
								//Mod 25/&/2025	  
								//WorkAreaOffset[NumPostazioneDeposito].Y 								:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -20;
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													// **Lo Que Habia	
													WorkAreaOffset[j].Y 							:= 0;
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;	
			
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoTrabajoLado_Cavallete := HMI_WorkAreaDataPicking[j].TipoTrabajoLado_Cavallete ;	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
													CoordenadaPasillo0_Y := WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y := WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;		  
											END_CASE
											//WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto;		  
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto;
										END_IF
									END_IF
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
								END_FOR
								EXIT; 
							(* Se ho un A_Frame *)	
							A_FRAME_VERT:
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CAVALLETTO;//ActualPickingListFromHMI.SupportVertBundle.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
								//WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO (*- ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2*);
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;	
								WorkAreaState[NumPostazioneDeposito].Supporto.TipoTrabajoLado_Cavallete := HMI_WorkAreaDataPicking[NumPostazioneDeposito].TipoTrabajoLado_Cavallete ;
								CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF
									LEGNO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									TELAIO_PIANO:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CASSA_STANDARD; 
									BUNDLE_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.BUNDLE; 
									A_FRAME_VERT:
										 		WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
												WorkAreaProductionList[NumPostazioneDeposito].Support.Tipologia	:= e_Tipo_Pallet.CAVALLETTO; 
												CoordenadaPasillo0_Y := WorkArea[NumPostazioneDeposito].Y +  WorkAreaOffset[NumPostazioneDeposito].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[NumPostazioneDeposito].Supporto.YDim /2;
												CoordenadaPasillo180_Y := WorkArea[NumPostazioneDeposito].Y + WorkAreaState[NumPostazioneDeposito].Supporto.YDim /2 + WorkAreaOffset[NumPostazioneDeposito].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;		
					  
								END_CASE
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													//**Lo Que Habia
													WorkAreaOffset[j].Y 							:= 0;
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;					
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI[IdxLista].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVertCav.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoTrabajoLado_Cavallete := HMI_WorkAreaDataPicking[j].TipoTrabajoLado_Cavallete ;	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												   CoordenadaPasillo0_Y := WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y := WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
												
											END_CASE
													  
											WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto;
										END_IF
									END_IF
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
								END_FOR
								EXIT; 
						END_CASE // case Pricipal1
					END_IF	//-------->	 //-------> Palet destino
				END_FOR//----------For 1 HMI_WorkAreaDataPicking[i].Destinazione 
				
				Picking.Cmd_CalcolaLista[IdxLista] := TRUE;
				Temp_UDINT[8] := IdxLista;
				HMI_Forming_Attivazione[IdxLista] := TRUE;//attivo nuova formatura
			END_IF //------------------------------ActualPickingListFromHMI[IdxLista].State = e_StatoWorkOrder.DA_ESEGUIRE 
{endregion }



			Temp_UINT[9]	 := 0 ; // añadido
				 
			
			//una volta calcolata la lista per stabilire le postazioni di prelievo e quella di deposito, calcolo la formatura della postazione di deposito
			IF Picking.Cmd_CalcolaLista[IdxLista] THEN
				Temp_UINT[9]	 := IdxLista ;
				Temp_UINT[7] := j ;
				//CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF 	 
				//CASE HMI_WorkAreaDataPicking[j].Typology OF 
				CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF 
					TELAIO_PIANO:
						HMI_Formatura.HMI_Forming_Supporto.Code				:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
						HMI_Formatura.HMI_Forming_Supporto.XDim				:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.XDim;
						HMI_Formatura.HMI_Forming_Supporto.YDim				:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.YDim;
						HMI_Formatura.HMI_Forming_Supporto.ZDim				:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.ZDim;
						HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.DimBaseUtile;
						HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.DimVertice;
						HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= RequestPickingListFromHMI[IdxLista].SupportPianoFerro.HMAX;
						HMI_Formatura.HMI_Forming_Supporto.Tipologia		:= e_Tipo_Pallet.CASSA_STANDARD;// RequestPickingListFromHMI[1].Support.Tipologia;		

					A_FRAME_VERT:
						HMI_Formatura.HMI_Forming_Supporto.Code				:= RequestPickingListFromHMI[IdxLista].SupportVertCav.Code;
						HMI_Formatura.HMI_Forming_Supporto.XDim				:= RequestPickingListFromHMI[IdxLista].SupportVertCav.XDim;
						HMI_Formatura.HMI_Forming_Supporto.YDim				:= RequestPickingListFromHMI[IdxLista].SupportVertCav.YDim;
						HMI_Formatura.HMI_Forming_Supporto.ZDim				:= RequestPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
						HMI_Formatura.HMI_Forming_Supporto.TipoPianoAppoggio 		:= 1;                      
						HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta		:= 15;              
						HMI_Formatura.HMI_Forming_Supporto.ZDim_Ext1        := HMI_Formatura.HMI_Forming_Supporto.ZDim + HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta;
						HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= RequestPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
						HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= RequestPickingListFromHMI[IdxLista].SupportVertCav.DimVertice;
						HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= RequestPickingListFromHMI[IdxLista].SupportVertCav.HMAX;
						HMI_Formatura.HMI_Forming_Supporto.Tipologia 		:= e_Tipo_Pallet.CAVALLETTO;                  
			
					BUNDLE_VERT:
						HMI_Formatura.HMI_Forming_Supporto.Code				:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.Code;
						HMI_Formatura.HMI_Forming_Supporto.XDim				:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
						HMI_Formatura.HMI_Forming_Supporto.YDim				:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.YDim*2;
						HMI_Formatura.HMI_Forming_Supporto.ZDim				:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
						HMI_Formatura.HMI_Forming_Supporto.TipoPianoAppoggio := 1;                      
						HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta		:= 20;              
						HMI_Formatura.HMI_Forming_Supporto.ZDim_Ext1        := HMI_Formatura.HMI_Forming_Supporto.ZDim +	HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta;
						HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
						HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice*2;
						HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
						HMI_Formatura.HMI_Forming_Supporto.Tipologia 		:= e_Tipo_Pallet.BUNDLE;                  
						HMI_Formatura.HMI_Forming_Supporto.LatoDeposito 	:= 180;                     
					ELSE	
						HMI_Formatura.HMI_Forming_Supporto.Code				:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
						HMI_Formatura.HMI_Forming_Supporto.XDim				:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
						HMI_Formatura.HMI_Forming_Supporto.YDim				:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
						HMI_Formatura.HMI_Forming_Supporto.ZDim				:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
						HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
						HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
						HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= RequestPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
						HMI_Formatura.HMI_Forming_Supporto.Tipologia		:= e_Tipo_Pallet.CASSA_STANDARD;// RequestPickingListFromHMI[1].Support.Tipologia;		
				END_CASE	
				WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto;		   
				//WorkAreaProductionList[NumPostazioneDeposito].Support := HMI_Formatura.HMI_Forming_Supporto;												 
				//
				HMI_Formatura.HMI_Forming_LastraDaDepositare.XDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.XDim;
				HMI_Formatura.HMI_Forming_LastraDaDepositare.YDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.YDim;
				HMI_Formatura.HMI_Forming_LastraDaDepositare.ZDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.ZDim;
																									
				HMI_Formatura.HMI_Forming_CodiciAbilitatiFormatura[IdxLista].Code[1] := 1;                 
				
				FaldaDaDepositare.TypologyCode := RequestPickingListFromHMI[IdxLista].Layer.Tipologia;
				
				FaldaDaDepositare.XDim := RequestPickingListFromHMI[IdxLista].Layer.XDim;
				FaldaDaDepositare.YDim := RequestPickingListFromHMI[IdxLista].Layer.YDim;
				FaldaDaDepositare.ZDim := RequestPickingListFromHMI[IdxLista].Layer.ZDim;
				
				//Vado ad assegnare il numero giusto di elementi a seconda se è presente o meno la falda 
				IF (RequestPickingListFromHMI[IdxLista].LayerSequence = 1 AND HMI_AbilitaDepositoFalda) AND RequestPickingListFromHMI[IdxLista].SupportPianoLegno.Tipologia <> CAVALLETTO AND RequestPickingListFromHMI[IdxLista].SupportPianoLegno.Tipologia <> BUNDLE THEN 
					HMI_Formatura.HMI_Forming_NumeroElementiDaDepositare	:= TO_UINT(2*RequestPickingListFromHMI[IdxLista].SlabNumber - 1);
				ELSE 
					HMI_Formatura.HMI_Forming_NumeroElementiDaDepositare	:= TO_UINT(RequestPickingListFromHMI[IdxLista].SlabNumber);
				END_IF
				
				//Ack 
				IF HMI_ErrAckCalcolaFormatura THEN
					HMI_Forming_ErroreCalcoli := 0;
					HMI_ErrAckCalcolaFormatura := FALSE;
					FOR i:= 1 TO MAXFORMING DO
						HMI_ConfermaAttivazioneFormatura[i] := FALSE;
						HMI_Forming_FormaturaAttivata[i] := FALSE;
					END_FOR
				END_IF
				
				//Azzeramento comandi in caso di errore
				IF HMI_Forming_ErroreCalcoli <> 0 THEN
					FOR i:=1 TO MAXFORMING DO
						HMI_Forming_Attivazione[i] 		:= FALSE;
						HMI_Forming_Disattivazione[i] 	:= FALSE;
					END_FOR
					HMI_Forming_Calcola 			:= FALSE;
				END_IF
				
				//Valorizzo altezza esterna supporto
				//IF HMI_Forming_Supporto.ZDim_Ext1 = 0 THEN
					HMI_Forming_Supporto.ZDim_Ext1 := HMI_Forming_Supporto.ZDim + HMI_Forming_Supporto.AltezzaDenteRitenuta;
				//END_IF
				//Valorizzo HMAX x tipologia pallet
				IF HMI_Forming_Supporto.Tipologia = PALLET_STANDARD THEN
					HMI_Forming_Supporto.HMAX := HMI_Forming_Supporto.ZDim;
				END_IF

				
//##########################################################################################		  
//------------------------------------------------------------------------------------------				
///////////	Attivazione	Formature  autosettata dopo caricamento dei dati dell'ordine  /////
//------------------------------------------------------------------------------------------	
					 
				//FOR i:= 1 TO MAXFORMING DO
					idxForm:= IdxLista;//forzo a 1 la formatura da attivare
					IF HMI_Forming_Attivazione[idxForm] AND idxForm <=3 AND NOT Formacion_De_listaOk[idxForm] THEN
						Forming[idxForm] := FormingEmpty;
						(*IF NOT CalcolaFormaturaTrig AND TFCalcoloFormaturaDaLista.PulisciMemoriaDone THEN *)//#Modificado
							 IF TFCalcoloFormaturaDaLista.CalcolaFormaturaDone THEN
								CalcolaFormaturaTrig := TRUE;	  
							END_IF	
						IF NOT CalcolaFormaturaTrig  AND NOT Formacion_De_listaOk[idxForm] THEN 
							HMI_Forming_FormaturaAttivata[idxForm] 	:= FALSE;
							TFCalcoloFormaturaDaLista.PulisciMemoria 	:= TRUE;
							IF TFCalcoloFormaturaDaLista.PulisciMemoriaDone THEN	
								HMI_Forming_ErroreCalcoli := 0;
								CalcolaFormaturaTrig := TRUE;
								IF (RequestPickingListFromHMI[1].LayerSequence = 0 OR NOT HMI_AbilitaDepositoFalda)
									AND HMI_Forming_NumeroElementiDaDepositare >0 
								THEN
									//Assegno l'ordine tutto a 1 perchè ho solo lastre	
									FOR i:= 1 TO MAXFORMINGSLAB DO
										//IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
										IF i <= HMI_Forming_NumeroElementiDaDepositare + HMI_NumeroPezziPresentiPostazione[NumPostazioneDeposito] THEN
										//IF i <= 20THEN
											TFCalcoloFormaturaDaLista.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
										ELSE
											TFCalcoloFormaturaDaLista.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
										END_IF
									END_FOR
								ELSE
									//FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO		  
									FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO
										IF i MOD 2 = 1 THEN// i <= HMI_Forming_NumeroElementiDaDepositare THEN 
											TFCalcoloFormaturaDaLista.TipoElementoDep[i] := LASTRA;//Settiamo tipo lastre!!
										ELSE
											TFCalcoloFormaturaDaLista.TipoElementoDep[i] := FALDA;//Settiamo tipoi falda!
										END_IF
										TFCalcoloFormaturaDaLista.TipoElementoDep[i+1] := TERMINATORE;//Settiamo il resto come terminatore
									END_FOR
								END_IF	
								//FOR i := HMI_Forming_NumeroElementiDaDepositare+1 TO MAXFORMINGSLAB DO
								FOR i := (HMI_Forming_NumeroElementiDaDepositare + HMI_NumeroPezziPresentiPostazione[NumPostazioneDeposito] )   +1 TO MAXFORMINGSLAB DO
									TFCalcoloFormaturaDaLista.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
								END_FOR
									
								TFCalcoloFormaturaDaLista.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare; 
								TFCalcoloFormaturaDaLista.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]		:= FaldaDaDepositare;
								TFCalcoloFormaturaDaLista.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]	:= HMI_Forming_LastraDaDepositare;
								TFCalcoloFormaturaDaLista.Supporto											:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
								
								//CASE HMI_WorkAreaDataPicking[j].Typology OF //**Mod	 
								CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF //**Mod
									BUNDLE_VERT:
										TFCalcoloFormaturaDaLista.TipoOrdinamento := 4;//Ordinamento di deposito òato 180°
									A_FRAME_VERT:
										TFCalcoloFormaturaDaLista.TipoOrdinamento := 1;//Ordinamento di deposito, prima un lato poi l'altro	
										TFCalcoloFormaturaDaLista.HabiCalTodasCordenadas := TRUE ;
									ELSE
										TFCalcoloFormaturaDaLista.TipoOrdinamento := 2;//Ordinamento di deposito consecutivo	 
								END_CASE
									 
								TFCalcoloFormaturaDaLista.CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
								MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
								HMI_Forming_Attivazione[i] := FALSE;
								TFCalcoloFormaturaDaLista.PulisciMemoria := FALSE;
							END_IF
						ELSIF (TFCalcoloFormaturaDaLista.CalcolaFormaturaDone OR TFCalcoloFormaturaDaLista.Errore > 0) AND CalcolaFormaturaTrig AND NOT Formacion_De_listaOk[idxForm] THEN
							CalcolaFormaturaTrig := FALSE;
							TFCalcoloFormaturaDaLista.CalcolaFormatura := FALSE;
							Formacion_De_listaOk[idxForm] := TRUE ;
							IF TFCalcoloFormaturaDaLista.Errore = 0 THEN
								IDFormatura 								:= IDFormatura+1;
								GUIDFormatura 								:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
								HMI_Forming_GUID 							:= GUIDFormatura;
						
								HMI_Forming_FormaturaCalcolata 				:= TFCalcoloFormaturaDaLista.FormingSlab;
								Forming[idxForm] 							:= FormingEmpty;	//Pulisco la memoria di destinazione
								Forming[idxForm] 							:= TFCalcoloFormaturaDaLista.FormingSlab;
								Forming[idxForm].Enable 					:= 1;
								Forming[idxForm].Code 						:= HMI_Forming_CodiciAbilitatiFormatura[idxForm].Code;
								Forming[idxForm].GUID						:= HMI_Forming_GUID;
								Forming[idxForm].Pallet						:= HMI_Forming_Supporto;
								HMI_Forming_IndiceFormaturaAttivata := idxForm;
								HMI_Forming_FormaturaAttivata[idxForm] 	:= TRUE;
								HMI_ConfermaAttivazioneFormatura[idxForm] := TRUE;
								//Valorizzo la struttura del WAPL per ogni elemento da elaborare
								FOR jj := 1 TO MAXELEMENTLIST DO
									IF jj < ElementiElaborati[IdxLista] THEN
										WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].PElement 		:= TFCalcoloFormaturaDaLista.FormingSlab.PElement[jj];	
										WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Stato			:= ELEMENTO_DA_ELABORARE;
									
										IF Picking.HMI_PareggiaturaLastraAbilitata THEN
											WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Pareggiatura := PAREGGIATURA_DA_ESEGUIRE;
										ELSE
											WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Pareggiatura := PAREGGIATURA_DISABILITATA;
										END_IF
									ELSE
										WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Stato			:= ELEMENTO_NOT_DEFINED;
									END_IF
								END_FOR
							ELSE
								HMI_Forming_ErroreCalcoli := TFCalcoloFormaturaDaLista.Errore;
							END_IF
							HMI_Forming_Attivazione[idxForm] := FALSE;
						END_IF
					ELSIF HMI_Forming_Attivazione[idxForm]  AND NOT Formacion_De_listaOk[idxForm] THEN
						memset(destAddr:=ADR(TFCalcoloFormaturaDaLista.Errore),fillByte:=(UINT_TO_USINT(ErrNumeroMassimoFormatureAmmesse)),n:=SIZEOF(TFCalcoloFormaturaDaLista.Errore));
					END_IF
				
					//Disattivazione formatura
					IF HMI_Forming_Disattivazione[idxForm] THEN
						HMI_Forming_Disattivazione[idxForm] := FALSE;
						Forming[idxForm] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
					END_IF
						
				//END_FOR
				
//####################################################################						 

						  
				(* Metto in stato di esecuzione il nuovo W.O. se tutto si è attivato *)
				IF HMI_Forming_FormaturaAttivata[IdxLista] THEN

					ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.DA_ESEGUIRE;
					//Azzero le liste per le postazioni dove non avviene la pallettizzazione
					FOR i:= Iforstart TO Iforend DO		 
						WorkAreaProductionList[i].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
					END_FOR
					//WorkAreaProductionList[NumPostazioneDeposito].Support := Forming[idxForm].Pallet;
					WorkAreaProductionList[NumPostazioneDeposito].Stato 					:= LISTA_PROD_DA_ESEGUIRE;
					WorkAreaProductionList[NumPostazioneDeposito].NumeroListaAssociata 		:= IdxLista;
					WorkAreaState[NumPostazioneDeposito].F 									:= idxForm;
					Picking.Cmd_CalcolaLista[IdxLista] 										:= FALSE;
					HMI_Forming_FormaturaAttivata[IdxLista] 								:= FALSE;
					//CalcolaFormingRT[IdxLista] 												:= TRUE;
				END_IF
				//TFCalcoloFormaturaDaLista();
			END_IF	
		
			TFCalcoloFormaturaDaLista();
		END_IF	
		
		//verifico che la lista sia in esecuzione o terminata
		IF NOT ListaInEsecuzione[IdxLista] THEN
			FOR i:= Iforstart TO Iforend DO	
				IF WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_IN_ESECUZIONE THEN
					ListaInEsecuzione[IdxLista] := TRUE;
					EXIT;	
				END_IF
			END_FOR
		ELSE
			FOR i:= Iforstart TO Iforend DO	
				IF WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_ESEGUITA THEN
					ListaInEsecuzione[IdxLista] := FALSE;
					EXIT;	
				END_IF
			END_FOR
		END_IF
		
		//
		FOR i:= Iforstart TO Iforend DO	
			IF NumeroPezziPresentiPostazioneStart[i] = 0 AND WorkAreaState[i].P > 1 THEN
				NumeroPezziPresentiPostazioneStart[i] := TO_UINT(WorkAreaState[i].P);
			END_IF
		
			IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
				IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare > 0 THEN
					//IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare >= TO_UINT(WorkAreaState[i].P)-1 THEN
					//	HMI_NumeroLastreRimanentiOrdineAttuale[i] := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - TO_UINT(WorkAreaState[i].P);
					//ELSE
					//	HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
					//END_IF
					IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - (TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i]) > 0 THEN
						HMI_NumeroLastreRimanentiOrdineAttuale[i] := MIN(HMI_WorkAreaDataPicking[i].NumElementiDaLavorare,HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - 
																	(NumeroPezziPresentiPostazioneStart[i] - TO_UINT(WorkAreaState[i].P)));
					ELSE
						HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
					END_IF
				ELSE
					HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
				END_IF
			ELSE
				IF NumeroPezziPresentiPostazioneStart[i] <= (TO_UINT(WorkAreaState[i].P)) AND NumeroPezziPresentiPostazioneStart[i]>0 THEN
					HMI_NumeroLastreRimanentiOrdineAttuale[i] := TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i]+1;
				ELSE
					HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
				END_IF
			END_IF
			IF (WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_IN_ESECUZIONE OR WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_ESEGUITA) AND WorkAreaState[i].P > 1 THEN
					//P:	(* Pack Pointer - Puntatore tabella ELEMENTO (0..n-1=, -1 dato non valido),Numero ELEMENTO successivo da depositare *)
					HMI_NumeroLastreDepOrdineAttuale[IdxLista] := TO_UINT(WorkAreaState[i].P-1);
				IF NumeroPezziPresentiPostazioneStart[i] < (TO_UINT(WorkAreaState[i].P)) AND NumeroPezziPresentiPostazioneStart[i]>0 THEN
					HMI_NumeroLastreDepOrdineAttuale[IdxLista] := TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i];
				ELSE
					HMI_NumeroLastreDepOrdineAttuale[IdxLista] := TO_UINT(WorkAreaState[i].P) - 1;
				END_IF
			END_IF	
		END_FOR
		
		//trasferisco i valori alla variabile in lettura x HMI
		MEMCPY(destAddr:=ADR(HMI_WorkAreaProductionList),srcAddr:=ADR(WorkAreaProductionList),n:=SIZEOF(HMI_WorkAreaProductionList));
		//IF CalcolaFormingRT[IdxLista] AND NOT CalcolaFormingRT2[IdxLista] THEN //original	
			 
				  
					   
		//##################################añadido	############################################################ 
		IF 	NOT CalcolaFormingRT[IdxLista] AND NOT CalcolaFormingRT2[IdxLista] AND Temp_UINT[9] = IdxLista THEN
			
				CalcolaFormaturaTrig2 		:= FALSE ;
				CalcolaFormingRT[IdxLista] 	:= TRUE ;
	 
		END_IF
  		//#######################################################################################################
					   
							
		IF CalcolaFormingRT[IdxLista] AND NOT CalcolaFormingRT2[IdxLista] AND ActualPickingListFromHMI[IdxLista].State = 1   THEN //###############################  If  Principal calculos formaciones bendel y cabaleta
				 		//Para quitar
		Control1 := control1 +1 ;
			IF TFCalcoloFormaturaRT[IdxLista].CalcolaFormaturaDone THEN
				CalcolaFormaturaTrig2 := TRUE;	  
			END_IF
			IF NOT CalcolaFormaturaTrig2 AND NOT Formacion_bandelCalOk[idxForm]  THEN//11111111111111111
			///////////////////////////
				//CalcolaFormaturaTrig2 := TRUE;
				TFCalcoloFormaturaRT[IdxLista].PulisciMemoria 	:= TRUE;
				IF TFCalcoloFormaturaRT[IdxLista].PulisciMemoriaDone THEN		
					FOR i:= 1 TO MAXFORMINGSLAB DO
						IF i <= 40 THEN
						//IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
							TFCalcoloFormaturaRT[IdxLista].TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
						ELSE
							TFCalcoloFormaturaRT[IdxLista].TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
						END_IF
					END_FOR
					TFCalcoloFormaturaRT[IdxLista].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].XDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.XDim; 
					TFCalcoloFormaturaRT[IdxLista].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].YDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.YDim; 
					TFCalcoloFormaturaRT[IdxLista].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].ZDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.ZDim; 
					TFCalcoloFormaturaRT[IdxLista].Supporto.Code											:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.Code;
					TFCalcoloFormaturaRT[IdxLista].Supporto.XDim											:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.XDim;
					TFCalcoloFormaturaRT[IdxLista].Supporto.YDim											:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.YDim*2;
					TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim				:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.ZDim;
					TFCalcoloFormaturaRT[IdxLista].Supporto.TipoPianoAppoggio 	:= 1;
					TFCalcoloFormaturaRT[IdxLista].Supporto.AltezzaDenteRitenuta:= 15;
					TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim_Ext1        	:= TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim + TFCalcoloFormaturaRT[IdxLista].Supporto.AltezzaDenteRitenuta;
					TFCalcoloFormaturaRT[IdxLista].Supporto.DimBaseUtile		:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile;
					TFCalcoloFormaturaRT[IdxLista].Supporto.DimVertice 			:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.DimVertice*2;
					TFCalcoloFormaturaRT[IdxLista].Supporto.HMAX 				:= RequestPickingListFromHMI[IdxLista].SupportVertBundle.HMAX;
					TFCalcoloFormaturaRT[IdxLista].Supporto.Tipologia 			:= BUNDLE;
					TFCalcoloFormaturaRT[IdxLista].Supporto.LatoDeposito 		:= 180;
					TFCalcoloFormaturaRT[IdxLista].TipoOrdinamento				:= 4;	//Ordinamento di deposito, prima un lato poi l'altro
					TFCalcoloFormaturaRT[IdxLista].CalcolaFormatura 			:= TRUE;//Lancio esecuzione dei calcoli
					MEMSET(ADR(FormaturaBundleRT[IdxLista]),0,SIZEOF(FormaturaBundleRT[IdxLista]));	//Pulisco la memoria di destinazione
					TFCalcoloFormaturaRT[IdxLista].PulisciMemoria := FALSE;
				END_IF
			ELSIF (TFCalcoloFormaturaRT[IdxLista].CalcolaFormaturaDone OR TFCalcoloFormaturaRT[IdxLista].Errore > 0) AND CalcolaFormaturaTrig2 THEN
				CalcolaFormaturaTrig2 := FALSE;
				TFCalcoloFormaturaRT[IdxLista].CalcolaFormatura := FALSE;
				TFFormacionBandelCalculada := TFCalcoloFormaturaRT[IdxLista]; 
				FormaturaBundleRT[IdxLista] := TFCalcoloFormaturaRT[IdxLista].FormingSlab;
				IF TFCalcoloFormaturaRT[IdxLista].Errore = 0 THEN
					CalcolaFormaturaTrig2 			:= FALSE;
					CalcolaFormingRT[IdxLista] 		:= FALSE;
					CalcolaFormingRT2[IdxLista]		:= TRUE;
					Formacion_bandelCalOk[idxForm] 			:= TRUE ;
				ELSE
					CalcolaFormingRT[IdxLista] 		:= TRUE;
					CalcolaFormaturaTrig2 			:= FALSE;
				END_IF
			END_IF
		//##############################Inicio##############################################		 
		//#########################Calculo cavaleta##########################################
		ELSIF CalcolaFormingRT2[IdxLista] AND NOT CalcolaFormingRT[IdxLista] AND ActualPickingListFromHMI[IdxLista].State = 1  THEN 
			IF NOT CalcolaFormaturaTrig2 AND NOT Formacion_FrameCalOk[idxForm] THEN
			///////////////////////////
				TFCalcoloFormaturaRT[IdxLista].PulisciMemoria 	:= TRUE;	  
				
					
				//TFCalcoloFormaturaRT[IdxLista].PulisciMemoria 	:= TRUE;
				IF TFCalcoloFormaturaRT[IdxLista].PulisciMemoriaDone THEN
					CalcolaFormaturaTrig2 := TRUE;		
					FOR i:= 1 TO MAXFORMINGSLAB DO
						//IF i <= 10  THEN
						IF i <= 40 THEN
						//IF i <= HMI_Forming_NumeroElementiDaDepositare  THEN
							TFCalcoloFormaturaRT[IdxLista].TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
						ELSE
							TFCalcoloFormaturaRT[IdxLista].TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
						END_IF
					END_FOR
					TFCalcoloFormaturaRT[IdxLista].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].XDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.XDim; 
					TFCalcoloFormaturaRT[IdxLista].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].YDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.YDim; 
					TFCalcoloFormaturaRT[IdxLista].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].ZDim		:= RequestPickingListFromHMI[IdxLista].SlabDimension.ZDim; 
					TFCalcoloFormaturaRT[IdxLista].HabiCalTodasCordenadas := true ;
					TFCalcoloFormaturaRT[IdxLista].Supporto.Code											:= RequestPickingListFromHMI[IdxLista].SupportVertCav.Code;
					TFCalcoloFormaturaRT[IdxLista].Supporto.XDim											:= RequestPickingListFromHMI[IdxLista].SupportVertCav.XDim;
					TFCalcoloFormaturaRT[IdxLista].Supporto.YDim											:= RequestPickingListFromHMI[IdxLista].SupportVertCav.YDim(**2*);
					TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim				:= RequestPickingListFromHMI[IdxLista].SupportVertCav.ZDim;
					TFCalcoloFormaturaRT[IdxLista].Supporto.TipoPianoAppoggio 	:= 1;
					TFCalcoloFormaturaRT[IdxLista].Supporto.AltezzaDenteRitenuta:= 13;
					TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim_Ext1        	:= TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim + TFCalcoloFormaturaRT[IdxLista].Supporto.AltezzaDenteRitenuta;
					TFCalcoloFormaturaRT[IdxLista].Supporto.DimBaseUtile		:= RequestPickingListFromHMI[IdxLista].SupportVertCav.DimBaseUtile;
					TFCalcoloFormaturaRT[IdxLista].Supporto.DimVertice 			:= RequestPickingListFromHMI[IdxLista].SupportVertCav.DimVertice(**2*);
					TFCalcoloFormaturaRT[IdxLista].Supporto.HMAX 				:= RequestPickingListFromHMI[IdxLista].SupportVertCav.HMAX;
					TFCalcoloFormaturaRT[IdxLista].Supporto.Tipologia 			:= CAVALLETTO;
					TFCalcoloFormaturaRT[IdxLista].Supporto.LatoDeposito 		:= 0;
					TFCalcoloFormaturaRT[IdxLista].TipoOrdinamento				:= 1;	//Ordinamento di deposito, prima un lato poi l'altro
					TFCalcoloFormaturaRT[IdxLista].CalcolaFormatura 			:= TRUE;//Lancio esecuzione dei calcoli
					MEMSET(ADR(FormaturaAFRAMERT[IdxLista]),0,SIZEOF(FormaturaAFRAMERT[IdxLista]));	//Pulisco la memoria di destinazione
					TFCalcoloFormaturaRT[IdxLista].PulisciMemoria := FALSE;
				END_IF
			ELSIF (TFCalcoloFormaturaRT[IdxLista].CalcolaFormaturaDone OR TFCalcoloFormaturaRT[IdxLista].Errore > 0) AND CalcolaFormaturaTrig2 THEN
				CalcolaFormaturaTrig2 		:= FALSE;
				TFCalcoloFormaturaRT[IdxLista].CalcolaFormatura := FALSE;
				TFFormacionCavalleteCalculada := TFCalcoloFormaturaRT[IdxLista] ;
				FormaturaAFRAMERT[IdxLista] := TFCalcoloFormaturaRT[IdxLista].FormingSlab;
				
				//CalcolaFormingRT[IdxLista] := TRUE ; // modificacion probar
				IF TFCalcoloFormaturaRT[IdxLista].Errore = 0 THEN
					CalcolaFormaturaTrig2 		:= FALSE;
					CalcolaFormingRT[IdxLista] 	:= TRUE;
					CalcolaFormingRT2[IdxLista]	:= FALSE;
					Formacion_FrameCalOk[idxForm] 		:= TRUE ;
				ELSE
					//CalcolaFormingRT[IdxLista] := TRUE; // original	  
					CalcolaFormingRT2[IdxLista] := TRUE;
				//##############################Fin ##############################################		 
				//#########################Calculo cavaleta##########################################
				END_IF
			END_IF
				  
		END_IF //###############################  If  Principal calculos formaciones bendel y cabaleta
	
	TFCalcoloFormaturaRT[IdxLista]();
END_FOR	 
	 

	HMI_WorkAreaDataPicking_1_8 := ActualPickingListFromHMI[1].State >= 1;//Ordine postazioni 1..8 in lavoro
		 
	HMI_WorkAreaDataPicking_1_4 := (ActualPickingListFromHMI[2].State >= 1);//Ordine postazioni 1..4 in lavoro
	HMI_WorkAreaDataPicking_5_8 := (ActualPickingListFromHMI[3].State >= 1);//Ordine postazioni 5..8 in lavoro

//FOR IdxLista := 1 TO 3 DO
//	CASE IdxLista OF	 
//		1: Iforstart := 1; Iforend := MAXAREAPRESENT;
//		2: Iforstart := 1; Iforend := 4;
//		3: Iforstart := 5; Iforend := MAXAREAPRESENT;
//	END_CASE		 		   
//	FOR i:= Iforstart TO Iforend DO	
//		IF NumeroPezziPresentiPostazioneStart[i] = 0 AND WorkAreaState[i].P > 1 THEN
//			NumeroPezziPresentiPostazioneStart[i] := TO_UINT(WorkAreaState[i].P);
//		END_IF
//	
//		IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
//			IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare > 0 THEN
//				//IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare >= TO_UINT(WorkAreaState[i].P)-1 THEN
//				//	HMI_NumeroLastreRimanentiOrdineAttuale[i] := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - TO_UINT(WorkAreaState[i].P);
//				//ELSE
//				//	HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
//				//END_IF
//				IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - (TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i]) > 0 THEN
//					HMI_NumeroLastreRimanentiOrdineAttuale[i] := MIN(HMI_WorkAreaDataPicking[i].NumElementiDaLavorare,HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - 
//																(NumeroPezziPresentiPostazioneStart[i] - TO_UINT(WorkAreaState[i].P)));
//				ELSE
//					HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
//				END_IF
//			ELSE
//				HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
//			END_IF
//		ELSE
//			IF NumeroPezziPresentiPostazioneStart[i] <= (TO_UINT(WorkAreaState[i].P)) AND NumeroPezziPresentiPostazioneStart[i]>0 THEN
//				HMI_NumeroLastreRimanentiOrdineAttuale[i] := TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i]+1;
//			ELSE
//				HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
//			END_IF
//		END_IF
//		IF (WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_IN_ESECUZIONE OR WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_ESEGUITA) AND WorkAreaState[i].P > 1 THEN
//			HMI_NumeroLastreDepOrdineAttuale[IdxLista] := TO_UINT(WorkAreaState[i].P-1);
//			IF NumeroPezziPresentiPostazioneStart[i] < (TO_UINT(WorkAreaState[i].P)) AND NumeroPezziPresentiPostazioneStart[i]>0 THEN
//				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i] +1;
//			ELSE
//				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0;
//			END_IF
//		END_IF	
//	END_FOR		  
//END_FOR			   
					
						 
							  
								   
{endregion}

















]]></ST>
      </Implementation>
    </Action>
    <Action Name="_11_CalcolaListaProduzioneNew" Id="{ebc346ff-5575-4e87-bd40-d981abf7f59b}">
      <Implementation>
        <ST><![CDATA[{region "Gestione zona GLOBALE - Postazioni da 1 a 8"}


//#############################################################################################################



	  
	  

FOR LoopLista := 1 TO 3 DO
	IdxLista := LoopLista;		 
	 // IdxLista := 2;		  
	CASE IdxLista OF	 
		1: Iforstart := 1; Iforend := MAXAREAPRESENT;
		2: Iforstart := 1; Iforend := 4;
		3: Iforstart := 5; Iforend := MAXAREAPRESENT;
	END_CASE	 
IF MachinePalletizer_TF.IN.Mode.Man AND
		(MachinePalletizer_TF.CmdExe.Code = CmdNOP OR MachinePalletizer_TF.CmdExe.Code = CmdMAN) THEN
			 
				  
					   
							
{region "Reset Litas"}
//--------------------------------------------------------
			//AZZERAMENTO (Reset) lista di picking	
//--------------------------------------------------------		 
			IF Cmd_AzzeraLista[IdxLista] THEN
				IF Prueva AND FALSE THEN
					MissionClr := ADR(Mission) ;
	 				MEMSET(destAddr := ADR(MissionClr^),fillByte := 0 , n := SIZEOF(MissionClr^));
				END_IF
					ClrEstructura := ADR(PosCavalleteOrdenPikin) ;
					MEMSET(destAddr := ADR(ClrEstructura^),fillByte := 0 , n := SIZEOF(ClrEstructura^));	  
					NuEstacionesPiking := 0 ;	  
					NuEstacionPiking   := 0 ;
					NuPosGuiroPiking := 0;
					PosFinOrdenPikingCaballete := 0 ;
					
					MultiplesCavalletesReceta := FALSE ;
					CoordenadaPasillo0_Y := 0 ;
					CoordenadaPasillo180_Y := 0 ;
					
				
				//FOR i:= 1 TO 3 DO
						//CalcolaFormingRT2[i] := FALSE ;
					CalcolaFormingRT[IdxLista] := FALSE ;
					CalcolaFormingRT2[IdxLista] := FALSE ;	 
						//#Añadido 4_7_2025########################
					Formacion_bandelCalOk[IdxLista]			:= FALSE ;
					Formacion_FrameCalOk[IdxLista]			:= FALSE ;
					Formacion_De_listaOk[IdxLista]			:= FALSE ;
					FormaturaAFRAMERT[IdxLista]		   	:=	FormingEmpty;
					FormaturaBundleRT[IdxLista]	 		:=	FormingEmpty;
							  
					MEMSET(destAddr := ADR(TFFormacionBandelCalculada),fillByte := 0 , n := SIZEOF(TFFormacionBandelCalculada));
					MEMSET(destAddr := ADR(TFFormacionCavalleteCalculada),fillByte := 0 , n := SIZEOF(TFFormacionCavalleteCalculada));
					MEMSET(destAddr := ADR(TFCalcoloFormaturaWA),fillByte := 0 , n := SIZEOF(TFCalcoloFormaturaWA));
					MEMSET(destAddr := ADR(HMI_Forming_FormaturaAttivataWa),fillByte := 0 , n := SIZEOF(HMI_Forming_FormaturaAttivataWa));
					IF Prueva THEN 
							MEMSET(destAddr := ADR(HMi_DimensionesPiezasWorkAreaDeposito),fillByte := 0 , n := SIZEOF(HMi_DimensionesPiezasWorkAreaDeposito));			  
					END_IF
				
					
					FormacionesCalculadas := FALSE ;
					FormacionPikingCalculada := FALSE ;
				(*	FOR i:= Iforstart TO Iforend DO	
						TFCalcoloFormaturaWA[i].PulisciMemoria := TRUE ;
		  			END_FOR *)
				//Añadido 4_7_2025##########################
						
				// END_FOR
				ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.NON_ESEGUITO;
				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0; 
				//Disattivazione formatura
				Forming[1] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[2] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[3] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[4] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.NON_ESEGUITO;
				Cmd_AttivaLista[IdxLista] := FALSE;
				HMI_Forming_NumeroElementiDaDepositare := 0;
 				RequestPickingListFromHMI[IdxLista].SlabNumber :=0;
	 
				//Azzero le liste per le postazioni dove non avviene la pallettizzazione
				FOR i:= Iforstart TO Iforend DO	
					TFClearWorkAreaArray(ADR(Workarea),ADR(WorkAreaState),k:=i);
					HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
					HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
					WorkAreaState[i].P 			:= 1;
					WorkAreaProductionList[i] 	:= ListaEmpty;
					WorkAreaOffset[i].Y 		:= 0;
					//HMI_NumeroPezziPresentiPostazione[i] 	:= 0; // Quitado Para No resetear posiciones
					NumeroPezziPresentiPostazioneStart[i] 	:= 0;
					WorkAreaProductionList[i].Stato 		:= e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;	 
				END_FOR			  
				ActualPickingListFromHMI[IdxLista].SlabNumber 		  			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.XDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.YDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.ZDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SupportPianoLegno 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportPianoFerro 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportVertBundle 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportVertCav 			 	:= SupportDataEmpty;
				
				HMI_ErroreCalcoloLista 		:= 0;
				Cmd_CalcolaLista[IdxLista] 	:= FALSE;
				HMI_Forming_Attivazione[IdxLista] 	:= FALSE;//attivo nuova formatura
				Cmd_AzzeraLista[IdxLista] := FALSE;
				//Ack 
				//IF HMI_ErrAckCalcolaFormatura THEN
					HMI_Forming_ErroreCalcoli := 0;
					HMI_ErrAckCalcolaFormatura := FALSE;
					FOR i:= 1 TO MAXFORMING DO
						HMI_ConfermaAttivazioneFormatura[i] := FALSE;
						HMI_Forming_FormaturaAttivata[i] := FALSE;
					END_FOR
				//END_IF
				CalcolaFormaturaTrig := FALSE;
			END_IF

{endregion}

//--------------------------------------------------------
		// COMANDO ATTIVAZIONE  lista di picking	
//--------------------------------------------------------		 		  
			//Se non ho una Destinazione impostata, Num.pezzi impostato, o Num.pezzi richiesto...
			//	Resetto il comando		
					IF Cmd_AttivaLista[1] = TRUE  THEN
							FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR
								  
						IF 	(HMI_WorkAreaDataPicking[1].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[2].Destinazione =0 AND
							HMI_WorkAreaDataPicking[3].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[4].Destinazione =0 AND	 
							HMI_WorkAreaDataPicking[5].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[6].Destinazione =0 AND
							HMI_WorkAreaDataPicking[7].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[8].Destinazione =0)							 
							OR
							(HMI_NumeroPezziPresentiPostazione[1] =0 AND 
							HMI_NumeroPezziPresentiPostazione[2] =0 AND
							HMI_NumeroPezziPresentiPostazione[3] =0 AND 
							HMI_NumeroPezziPresentiPostazione[4] =0 AND
							HMI_NumeroPezziPresentiPostazione[5] =0 AND 
	 						HMI_NumeroPezziPresentiPostazione[6] =0 AND
							HMI_NumeroPezziPresentiPostazione[7] =0 AND 
							HMI_NumeroPezziPresentiPostazione[8] =0)
							OR	 	 
							RequestPickingListFromHMI[1].SlabNumber = 0	 
						THEN
							Cmd_AttivaLista[1] := FALSE;
						 END_IF
					END_IF		  
					IF Cmd_AttivaLista[2] = TRUE  THEN
							FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR
						IF 	(HMI_WorkAreaDataPicking[1].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[2].Destinazione =0 AND
							HMI_WorkAreaDataPicking[3].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[4].Destinazione =0)
							OR
							(HMI_NumeroPezziPresentiPostazione[1] =0 AND 
							HMI_NumeroPezziPresentiPostazione[2] =0 AND
							HMI_NumeroPezziPresentiPostazione[3] =0 AND 
							HMI_NumeroPezziPresentiPostazione[4] =0)
							OR	 
							RequestPickingListFromHMI[2].SlabNumber = 0	 	 
						THEN
							Cmd_AttivaLista[2] := FALSE;
						 END_IF
					END_IF		
					IF Cmd_AttivaLista[3] = TRUE  THEN
							FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR
						IF 	(HMI_WorkAreaDataPicking[5].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[6].Destinazione =0 AND
							HMI_WorkAreaDataPicking[7].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[8].Destinazione =0)
							OR
							(HMI_NumeroPezziPresentiPostazione[5] =0 AND 
							HMI_NumeroPezziPresentiPostazione[6] =0 AND
							HMI_NumeroPezziPresentiPostazione[7] =0 AND 
							HMI_NumeroPezziPresentiPostazione[8] =0)
							OR	 	 
							RequestPickingListFromHMI[3].SlabNumber = 0	 	 
						THEN
							Cmd_AttivaLista[3] := FALSE;
						 END_IF
					END_IF		
{Region "Prmer Bucle cuenta las piezas a coger y rellena el workareastate Con el Tipo Palet"}

			// COMANDO ATTIVAZIONE  lista di picking	
		    IF Cmd_AttivaLista[IdxLista] AND ActualPickingListFromHMI[IdxLista].State <> e_StatoWorkOrder.IN_ESECUZIONE THEN
				ElementiDaDepositare[IdxLista]   :=0;
				HMI_ErroreCalcoloLista := 0;
				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0;
				FOR i:= Iforstart TO Iforend DO	
					//HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
					//HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
					WorkAreaState[i].P := 1;
					WorkAreaProductionList[i] := ListaEmpty;
				END_FOR	 
				
				FOR i:= Iforstart TO Iforend DO	
					IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
						ElementiDaDepositare[IdxLista] := ElementiDaDepositare[IdxLista] + HMI_WorkAreaDataPicking[i].NumElementiDaLavorare;
						WorkAreaState[i].P := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare +1;
					//#####################################################################################
							FOR InPiezasPos := 1 TO HMI_NumeroPezziPresentiPostazione[i] + 1 DO
								WorkAreaProductionList[i].PElementList[InPiezasPos].PElement.SlabDimension :=
																	 RequestPickingListFromHMIWorkArea[i].SlabDimension ;
								WorkAreaProductionList[i].PElementList[InPiezasPos].PElement.Typology := LASTRA ;
											   
							END_FOR
					//#################################################################################################	
						CASE HMI_WorkAreaDataPicking[i].Typology OF
							LEGNO_PIANO,TELAIO_PIANO:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;
							A_FRAME_VERT:	
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CAVALLETTO;
								
							IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare > 0 THEN 
								NuEstacionesPiking := NuEstacionesPiking + 1 ;	
								PosCavalleteOrdenPikin[i]	:=  e_Tipo_Pallet.CAVALLETTO;  
							END_IF
							BUNDLE_VERT:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.BUNDLE;	
							
						 ELSE
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;		   
						 END_CASE
					ELSE
						NumPostazioneDeposito := i; NuEstacionPiking := i;
						
						HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare := RequestPickingListFromHMI[IdxLista].SlabNumber;
						CASE HMI_WorkAreaDataPicking[i].Typology OF
							LEGNO_PIANO,TELAIO_PIANO:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;
							A_FRAME_VERT:	
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CAVALLETTO;
								NuEstacionesPiking := NuEstacionesPiking + 1 ;	
								PosCavalleteOrdenPikin[i]	:=  e_Tipo_Pallet.CAVALLETTO;  	 
							BUNDLE_VERT:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.BUNDLE;	
								
							
						 ELSE
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;		   
						 END_CASE
					END_IF

		  
//HMI_NumeroPezziPresentiPostazione[i] := WorkAreaState[i].P -1; //NB:cancellato xckè alla attivazione azzerava il num.pezzi presenti sulle postazioni di prelievo
				END_FOR
	
				IF ElementiDaDepositare[IdxLista] <= HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare THEN
					ActualPickingListFromHMI[IdxLista] 			:= RequestPickingListFromHMI[IdxLista];
					ActualPickingListFromHMI[IdxLista].State 	:= e_StatoWorkOrder.DA_ESEGUIRE;

				ELSE
					HMI_ErroreCalcoloLista := 1;
				END_IF
				Cmd_AttivaLista[IdxLista] 				:= FALSE;
				 
			ELSE
				Cmd_AttivaLista[IdxLista] 				:= FALSE;
				 
			END_IF
{endregion}	

{region "Cotas posicione de trabajo"}

//--------------------------------------------------------------------				
//////// attivazione lista di picking : StatoWorkOrder.DA_ESEGUIRE ///
//--------------------------------------------------------------------				
			IF ActualPickingListFromHMI[IdxLista].State = e_StatoWorkOrder.DA_ESEGUIRE  THEN
				ListaInEsecuzione[IdxLista] := FALSE;
				NumeroListaInEsecuzione := 0;
			
				(* Inserimento sequenza di prelievo dalle postazioni in base al quello che l'operatore ha editato da HMI*)
				ElementiDaDepositare[IdxLista] := 0;
				ElementiElaborati[IdxLista]    := 1;
				NumPostazioneDeposito := 0;
				//FOR i:= 1 TO MAXAREAPRESENT DO
				//	WorkAreaState[i].P := 1;
				//END_FOR		
				
				FOR i:= Iforstart TO Iforend DO//---------- For 1 HMI_WorkAreaDataPicking[i].Destinazione 
					IF HMI_WorkAreaDataPicking[i].Destinazione THEN  //-------> Palet destino
						NumPostazioneDeposito := i;
						Numero_Piezas_estacionPikin := HMI_NumeroPezziPresentiPostazione[NumPostazioneDeposito] +1 ;
						Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto := HMI_NumeroPezziPresentiCavallete[NumPostazioneDeposito].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +1 ;
						Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_B_Cavaleto := HMI_NumeroPezziPresentiCavallete[NumPostazioneDeposito].HMI_NumeroPezziPresentiPostazione_B_Cavaleto +1 ;
						HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare 	:= RequestPickingListFromHMI[IdxLista].SlabNumber;
						(*CASE HMI_WorkAreaDataPicking[i].Typology OF     // case Pricipal1*)		 
						CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF     // case Pricipal1	
							(* Se ho un legno in piano *)	 
							LEGNO_PIANO:	
								//WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code; 
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.Code; 	   
								//WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.DimBaseUtile;
								//WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.DimVertice;			   
								//WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
							   	WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.HMAX;
								//WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;   
								//WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.XDim;
								//WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.YDim;
								//WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.ZDim;
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								
								WorkAreaProductionList[NumPostazioneDeposito].Support 				:= WorkAreaState[NumPostazioneDeposito].Supporto;
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
												pr1 := 	Numero_Piezas_estacionPikin ;  
												pr2 := Numero_Piezas_estacionPikin  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare -1 ;				
											FOR ja := Numero_Piezas_estacionPikin  TO Numero_Piezas_estacionPikin  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare-1 DO
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[ja].Dim_Horizontal := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################		  
											END_FOR		  
												Numero_Piezas_estacionPikin := Numero_Piezas_estacionPikin +HMI_WorkAreaDataPicking[j].NumElementiDaLavorare; 	
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
													
																   
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 20; 
													WorkAreaState[j].Supporto.LatoDeposito 			:= 180;    
													//Lo que HABIA	
													//WorkAreaOffset[j].Y 							:= HMI_OffsetDepositoLastra.Y180 ;
													//Mod 25/&/2025	  
													WorkAreaOffset[NumPostazioneDeposito].Y 		:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim - RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile -40 ;			
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVertCav.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15;     	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
											   		CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
											END_CASE	
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto; 
										END_IF
									END_IF     
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento 
								END_FOR
								EXIT; 
							(* Se ho un telaio in piano *)	 
							TELAIO_PIANO:	
								
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportPianoFerro.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportPianoFerro.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportPianoFerro.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportPianoFerro.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportPianoFerro.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportPianoFerro.ZDim;
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								
								WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
							
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											
												//Numero_Piezas_estacionPikin := 	Numero_Piezas_estacionPikin + ElementiDaDepositare[IdxLista] ;  
											END_FOR
												pr1 := 	Numero_Piezas_estacionPikin ;  
												pr2 := Numero_Piezas_estacionPikin  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare -1 ;				
											FOR ja := Numero_Piezas_estacionPikin  TO Numero_Piezas_estacionPikin  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare-1 DO
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[ja].Dim_Horizontal := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################		  
											END_FOR		  
												Numero_Piezas_estacionPikin := Numero_Piezas_estacionPikin +HMI_WorkAreaDataPicking[j].NumElementiDaLavorare; 			
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVertBundle.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 20; 
													WorkAreaState[j].Supporto.LatoDeposito 			:= 180;   	
													  
													WorkAreaOffset[j].Y 		:= 0 ;	
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;				
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertcav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15; 	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
											   		CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
											END_CASE	
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto; 
										END_IF
									END_IF     
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento 
								END_FOR
								EXIT; 
							(* Se ho un bundle *)
							BUNDLE_VERT:
								
								//Se ho deposito verticale su bundle
								
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertBundle.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertBundle.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertBundle.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.BUNDLE;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertBundle.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertBundle.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertBundle.ZDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.TipoPianoAppoggio 		:= 1;                      
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta		:= 20; 
								WorkAreaState[NumPostazioneDeposito].Supporto.LatoDeposito 				:= 180; 
											   
								WorkAreaProductionList[NumPostazioneDeposito].Support 					:= WorkAreaState[NumPostazioneDeposito].Supporto;
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
												 
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
												pr1 := 	Numero_Piezas_estacionPikin ;  
												pr2 := Numero_Piezas_estacionPikin  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare -1 ;				
											FOR ja := Numero_Piezas_estacionPikin  TO Numero_Piezas_estacionPikin  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare-1 DO
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[ja].Dim_Horizontal := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################		  
											END_FOR		  
												Numero_Piezas_estacionPikin := Numero_Piezas_estacionPikin +HMI_WorkAreaDataPicking[j].NumElementiDaLavorare; 	 
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													// **Lo Que Habia	
													WorkAreaOffset[j].Y 							:= 0;
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;	
			
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15; 	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
													CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;		  
											END_CASE
											//WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto;		  
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto;
										END_IF
									END_IF
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
								END_FOR
								EXIT; 
							(* Se ho un A_Frame *)	
							A_FRAME_VERT:
								
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertCav.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertCav.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertCav.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CAVALLETTO;//ActualPickingListFromHMI.SupportVertBundle.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertCav.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertCav.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[NumPostazioneDeposito].SupportVertCav.ZDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.TipoPianoAppoggio 		:= 1;                      
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta		:= 15; 
								//WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO (*- ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2*);
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;	
								
								WorkAreaProductionList[NumPostazioneDeposito].Support 				:= WorkAreaState[NumPostazioneDeposito].Supporto; 
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
										ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR 
													  
																
												CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].TipoTrabajoLado_Cavallete OF
												0:
													pr1 := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto ; 
													pr2 := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;  
													FOR ja := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto  TO Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare-1 DO
														  Fun_PiezaLadoCaballete(Nu_PiezaGlobal:= ja , Nu_pieza_LadoA=> P_ladoA , Nu_pieza_LadoB=> P_ladoB , Grados := ADR(LadoRegistar));
														IF  LadoRegistar  = 0 THEN 
															HMi_DimensionesPiezasWorkAreaDeposito[P_ladoA].DimPieza_LadoA := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
														ELSIF LadoRegistar  = 180 THEN 	
															HMi_DimensionesPiezasWorkAreaDeposito[P_ladoB].DimPieza_LadoB := RequestPickingListFromHMIWorkArea[j].SlabDimension ;		  
														END_IF
													END_FOR		  
													Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare; 	
												1:
													FOR ja := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto  TO Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare-1 DO
														// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
														HMi_DimensionesPiezasWorkAreaDeposito[ja].DimPieza_LadoA := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
														//########################################################################################################	
													END_FOR		  
													Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_A_Cavaleto + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare; 		  	  	  
													;
												2:
													FOR ja := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_B_Cavaleto  TO Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_B_Cavaleto  + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare-1 DO
														// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
														HMi_DimensionesPiezasWorkAreaDeposito[ja].DimPieza_LadoB := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
														//########################################################################################################	
													END_FOR		  
													Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_B_Cavaleto := Numero_piezas_CaballeteEstacionPiking.HMI_NumeroPezziPresentiPostazione_B_Cavaleto + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare; 			  	  	
													;		  
											END_CASE
											
															  
																
																		  
									
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 20; 
													WorkAreaState[j].Supporto.LatoDeposito 			:= 180; 
													//**Lo Que Habia
													WorkAreaOffset[j].Y 							:= 0;
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;					
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVertCav.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15; 		
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												   	CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
												
											END_CASE
													  
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto;
										END_IF
									END_IF
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
								END_FOR
								EXIT; 
						END_CASE // case Pricipal1
					END_IF	//-------->	 //-------> Palet destino
				END_FOR//----------For 1 HMI_WorkAreaDataPicking[i].Destinazione 
				
				Picking.Cmd_CalcolaLista[IdxLista] := TRUE;
				HMI_Forming_Attivazione[IdxLista] := TRUE;//attivo nuova formatura
			END_IF //------------------------------ActualPickingListFromHMI[IdxLista].State = e_StatoWorkOrder.DA_ESEGUIRE 
{endregion }
			 
{Region "Formaciones Nuevas" }
IF Picking.Cmd_CalcolaLista[IdxLista] AND HMI_Forming_Attivazione[IdxLista] AND NOT FormacionesCalculadas AND NOT FormacionPikingCalculada THEN
	idxForm:= IdxLista;		 
	CalFor := NumPostazioneDeposito;
{Region " calculo la formacion para los calculos "}
		  
	IF CalFor = NumPostazioneDeposito AND NOT FormacionPikingCalculada THEN // calcula la formacion para la estacion de piking
		MEMSET(destAddr := ADR(TFCalcoloFormaturaWA[CalFor]),fillByte := 0 , n := SIZEOF(TFCalcoloFormaturaWA[CalFor]));
		TFCalcoloFormaturaWA[CalFor].PulisciMemoria 			:= TRUE ; 
		TFCalcoloFormaturaWA[CalFor]();			   
		
			//Ponemos El tipo de soporte que tiene la estacion 
			HMI_Formatura.HMI_Forming_Supporto.Code				:= WorkAreaState[CalFor].Supporto.Code;
			HMI_Formatura.HMI_Forming_Supporto.XDim				:= WorkAreaState[CalFor].Supporto.XDim;
			HMI_Formatura.HMI_Forming_Supporto.YDim				:= WorkAreaState[CalFor].Supporto.YDim;
			HMI_Formatura.HMI_Forming_Supporto.ZDim				:= WorkAreaState[CalFor].Supporto.ZDim;
			HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= WorkAreaState[CalFor].Supporto.DimBaseUtile;
			HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= WorkAreaState[CalFor].Supporto.DimVertice;
			HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= WorkAreaState[CalFor].Supporto.HMAX;
			HMI_Formatura.HMI_Forming_Supporto.Tipologia		:= WorkAreaState[CalFor].Supporto.Tipologia;// RequestPickingListFromHMI[1].Support.Tipologia;		
			CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF 
				A_FRAME_VERT:
							   
					HMI_Formatura.HMI_Forming_Supporto.TipoPianoAppoggio 		:= 1;                      
					HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta		:= 15;              
					HMI_Formatura.HMI_Forming_Supporto.ZDim_Ext1        := HMI_Formatura.HMI_Forming_Supporto.ZDim + HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta;		  
					BUNDLE_VERT:
					HMI_Formatura.HMI_Forming_Supporto.YDim				:= WorkAreaState[CalFor].Supporto.YDim * 2;
					HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= WorkAreaState[CalFor].Supporto.DimVertice *2;	
					HMI_Formatura.HMI_Forming_Supporto.TipoPianoAppoggio := 1;                      
					HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta		:= 20;              
					HMI_Formatura.HMI_Forming_Supporto.ZDim_Ext1        := HMI_Formatura.HMI_Forming_Supporto.ZDim +	HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta;
			END_CASE
			//Copiamos es soporte en la lista de produccio Para le estacion de picking
			WorkAreaProductionList[CalFor].Support := HMI_Formatura.HMI_Forming_Supporto;
			//Añadimos las dikmensiones de la pieza	
			HMI_Formatura.HMI_Forming_LastraDaDepositare.XDim		:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.XDim;
			HMI_Formatura.HMI_Forming_LastraDaDepositare.YDim		:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.YDim;
			HMI_Formatura.HMI_Forming_LastraDaDepositare.ZDim		:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.ZDim;
			//Escribimos el codigo para la estacion 
			HMI_Formatura.HMI_Forming_CodiciAbilitatiFormatura[IdxLista].Code[1] := 1; 
			// ########para quitar ###############################################################               
			FaldaDaDepositare.TypologyCode := RequestPickingListFromHMI[IdxLista].Layer.Tipologia;
			FaldaDaDepositare.XDim := RequestPickingListFromHMI[IdxLista].Layer.XDim;
			FaldaDaDepositare.YDim := RequestPickingListFromHMI[IdxLista].Layer.YDim;
			FaldaDaDepositare.ZDim := RequestPickingListFromHMI[IdxLista].Layer.ZDim;
			//#################################################################################
			//Vado ad assegnare il numero giusto di elementi a seconda se è presente o meno la falda 
			IF (RequestPickingListFromHMI[IdxLista].LayerSequence = 1 AND HMI_AbilitaDepositoFalda) AND RequestPickingListFromHMI[IdxLista].SupportPianoLegno.Tipologia <> CAVALLETTO AND RequestPickingListFromHMI[IdxLista].SupportPianoLegno.Tipologia <> BUNDLE THEN 
				HMI_Formatura.HMI_Forming_NumeroElementiDaDepositare	:= TO_UINT(2*RequestPickingListFromHMI[IdxLista].SlabNumber - 1);
			ELSE 
				HMI_Formatura.HMI_Forming_NumeroElementiDaDepositare	:= TO_UINT(RequestPickingListFromHMI[IdxLista].SlabNumber);
			END_IF
			//Ack 
				IF HMI_ErrAckCalcolaFormatura THEN
					HMI_Forming_ErroreCalcoli := 0;
					HMI_ErrAckCalcolaFormatura := FALSE;
					FOR i:= 1 TO MAXFORMING DO
						HMI_ConfermaAttivazioneFormatura[i] := FALSE;
						HMI_Forming_FormaturaAttivata[i] := FALSE;
					END_FOR
				END_IF
				
				//Azzeramento comandi in caso di errore
				IF HMI_Forming_ErroreCalcoli <> 0 THEN
					FOR i:=1 TO MAXFORMING DO
						HMI_Forming_Attivazione[i] 		:= FALSE;
						HMI_Forming_Disattivazione[i] 	:= FALSE;
					END_FOR
					HMI_Forming_Calcola 			:= FALSE;
				END_IF
				
			 
		END_IF 
{endregion}
			   
	IF  TFCalcoloFormaturaWA[CalFor].PulisciMemoria AND (TFCalcoloFormaturaWA[CalFor].PulisciMemoriaDone OR TRUE)AND NOT FormacionPikingCalculada THEN 
		HMI_Forming_FormaturaAttivata[CalFor] 	:= FALSE;	
		HMI_Forming_ErroreCalcoli := 0;	
		TFCalcoloFormaturaWA[CalFor].PulisciMemoria := FALSE ;
		IF (RequestPickingListFromHMI[1].LayerSequence = 0 OR NOT HMI_AbilitaDepositoFalda)
						AND HMI_Forming_NumeroElementiDaDepositare >0  THEN
			//Assegno l'ordine tutto a 1 perchè ho solo lastre	
			FOR i:= 1 TO MAXFORMINGSLAB DO
				//IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
				IF i <= HMI_Forming_NumeroElementiDaDepositare + HMI_NumeroPezziPresentiPostazione[CalFor] THEN
				//IF i <= 20THEN
					TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
				ELSE
					TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
				END_IF
			END_FOR
		ELSE
			//FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO		  
			FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO
				IF i MOD 2 = 1 THEN// i <= HMI_Forming_NumeroElementiDaDepositare THEN 
					TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := LASTRA;//Settiamo tipo lastre!!
				ELSE
					TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := FALDA;//Settiamo tipoi falda!
				END_IF
					TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i+1] := TERMINATORE;//Settiamo il resto come terminatore
			END_FOR
		END_IF	
		TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare; 
		TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]		:= FaldaDaDepositare;
		TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]	:= HMI_Forming_LastraDaDepositare;
		TFCalcoloFormaturaWA[CalFor].Supporto											:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
		
		TFCalcoloFormaturaWA[CalFor].DimensionesPiezasLadoALadoB     := HMi_DimensionesPiezasWorkAreaDeposito ;
		
		//CASE HMI_WorkAreaDataPicking[j].Typology OF //**Mod
	 
		CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF //**Mod
			BUNDLE_VERT:
				TFCalcoloFormaturaWA[CalFor].TipoOrdinamento := 4;//Ordinamento di deposito òato 180°
			A_FRAME_VERT:
				TFCalcoloFormaturaWA[CalFor].TipoOrdinamento := 1;//Ordinamento di deposito, prima un lato poi l'altro	
				TFCalcoloFormaturaWA[CalFor].HabiCalTodasCordenadas := TRUE ;
			ELSE
				TFCalcoloFormaturaWA[CalFor].TipoOrdinamento := 2;//Ordinamento di deposito consecutivo	 
		END_CASE
			 
		TFCalcoloFormaturaWA[CalFor].CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
			  
		MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
		HMI_Forming_Attivazione[i] := FALSE;
		TFCalcoloFormaturaDaLista.PulisciMemoria := FALSE;
		TFCalcoloFormaturaWA[CalFor]();
  
	 END_IF
			   
	IF (TFCalcoloFormaturaWA[CalFor].CalcolaFormaturaDone OR TFCalcoloFormaturaWA[CalFor].Errore > 0)AND NOT FormacionPikingCalculada THEN
		
		TFCalcoloFormaturaDaLista.CalcolaFormatura := FALSE;
		Formacion_De_listaOk[calfor] := TRUE ;
				IF TFCalcoloFormaturaWA[CalFor].Errore = 0 THEN
					IDFormatura 								:= IDFormatura+1;
					GUIDFormatura 								:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
					HMI_Forming_GUID 							:= GUIDFormatura;
					HMI_Forming_FormaturaCalcolata 				:= TFCalcoloFormaturaWA[CalFor].FormingSlab;
					HMI_Forming_FormaturaAttivataWa[CalFor] 	:= TRUE ;

		  
					FormaturaWa[CalFor]							:= FormingEmpty;
					FormaturaWa[CalFor]	 						:= TFCalcoloFormaturaWA[CalFor].FormingSlab;
					FormaturaWa[CalFor].Enable 					:= 1;
					FormaturaWa[CalFor].Code 					:= HMI_Forming_CodiciAbilitatiFormatura[CalFor].Code;
					FormaturaWa[CalFor].GUID					:= HMI_Forming_GUID;
					FormaturaWa[CalFor].Pallet					:= HMI_Forming_Supporto;
					
					Forming[CalFor] 							:= FormingEmpty;	//Pulisco la memoria di destinazione
					Forming[CalFor] 							:= TFCalcoloFormaturaWA[CalFor].FormingSlab;
					Forming[CalFor].Enable 						:= 1;
					Forming[CalFor].Code 						:= HMI_Forming_CodiciAbilitatiFormatura[CalFor].Code;
					Forming[CalFor].GUID						:= HMI_Forming_GUID;
					Forming[CalFor].Pallet						:= HMI_Forming_Supporto;
					HMI_Forming_IndiceFormaturaAttivata 		:= idxForm;
					HMI_Forming_FormaturaAttivata[CalFor] 		:= TRUE;
					HMI_ConfermaAttivazioneFormatura[CalFor] 	:= TRUE;
					FormacionPikingCalculada					:= TRUE ;
					//Valorizzo la struttura del WAPL per ogni elemento da elaborare
					FOR jj := 1 TO MAXELEMENTLIST DO
						IF jj < ElementiElaborati[IdxLista] THEN
							WorkAreaProductionList[CalFor].PElementList[jj].PElement 		:= TFCalcoloFormaturaWA[CalFor].FormingSlab.PElement[jj];	
							WorkAreaProductionList[CalFor].PElementList[jj].Stato			:= ELEMENTO_DA_ELABORARE;
						
							IF Picking.HMI_PareggiaturaLastraAbilitata THEN
								WorkAreaProductionList[CalFor].PElementList[jj].Pareggiatura := PAREGGIATURA_DA_ESEGUIRE;
							ELSE
								WorkAreaProductionList[CalFor].PElementList[jj].Pareggiatura := PAREGGIATURA_DISABILITATA;
							END_IF
						ELSE
							WorkAreaProductionList[CalFor].PElementList[jj].Stato			:= ELEMENTO_NOT_DEFINED;
						END_IF
					END_FOR
				ELSE
					HMI_Forming_ErroreCalcoli := TFCalcoloFormaturaWA[CalFor].Errore;
				END_IF
				HMI_Forming_Attivazione[idxForm] := FALSE;
			END_IF		  
	(* Metto in stato di esecuzione il nuovo W.O. se tutto si è attivato *)
		IF HMI_Forming_FormaturaAttivata[CalFor] THEN

			ActualPickingListFromHMI[idxForm].State := e_StatoWorkOrder.DA_ESEGUIRE;
			//Azzero le liste per le postazioni dove non avviene la pallettizzazione
			FOR i:= Iforstart TO Iforend DO		 
				WorkAreaProductionList[i].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			END_FOR
			//WorkAreaProductionList[NumPostazioneDeposito].Support := Forming[idxForm].Pallet;
			WorkAreaProductionList[idxForm].Stato 								:= LISTA_PROD_DA_ESEGUIRE;
			WorkAreaProductionList[CalFor].NumeroListaAssociata 				:= idxForm;
			WorkAreaState[CalFor].F 											:= idxForm;
			Picking.Cmd_CalcolaLista[IdxLista] 									:= FALSE;
			HMI_Forming_FormaturaAttivata[IdxLista] 							:= FALSE;
			
		END_IF	  
END_IF 
		  
					
							  
										
												  
IF HMI_Forming_FormaturaAttivataWa[NumPostazioneDeposito] AND NOT FormacionesCalculadas 	   THEN
		idxForm:= IdxLista;		  
		FOR CalFor := Iforstart TO Iforend DO
				
				IF CalFor <> NumPostazioneDeposito AND HMI_NumeroPezziPresentiPostazione[CalFor] > 0 AND HMI_WorkAreaDataPicking[CalFor].NumElementiDaLavorare <> 0 AND NOT FormacionesCalculadas  THEN // calcula la formacion para la estacion de piking
					MEMSET(destAddr := ADR(TFCalcoloFormaturaWA[CalFor]),fillByte := 0 , n := SIZEOF(TFCalcoloFormaturaWA[CalFor]));
					TFCalcoloFormaturaWA[CalFor].PulisciMemoria 			:= TRUE ; 
					TFCalcoloFormaturaWA[CalFor]();	
		 				IF TFCalcoloFormaturaWA[CalFor].PulisciMemoriaDone THEN		
							FOR i:= 1 TO MAXFORMINGSLAB DO
								IF i <= 40 THEN
								//IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
									TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
								ELSE
									TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
								END_IF
							END_FOR
						TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].XDim				:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.XDim; 
						TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].YDim				:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.YDim; 
						TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].ZDim				:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.ZDim; 
						TFCalcoloFormaturaWA[CalFor].Supporto.Code													:= WorkAreaState[CalFor].Supporto.Code ;
						TFCalcoloFormaturaWA[CalFor].Supporto.XDim													:= WorkAreaState[CalFor].Supporto.XDim;
						TFCalcoloFormaturaWA[CalFor].Supporto.YDim													:= WorkAreaState[CalFor].Supporto.YDim ;
						TFCalcoloFormaturaWA[CalFor].Supporto.ZDim													:= WorkAreaState[CalFor].Supporto.ZDim;
						TFCalcoloFormaturaWA[CalFor].Supporto.DimBaseUtile											:= WorkAreaState[CalFor].Supporto.DimBaseUtile;
						TFCalcoloFormaturaWA[CalFor].Supporto.DimVertice 											:= WorkAreaState[CalFor].Supporto.DimVertice ;
						TFCalcoloFormaturaWA[CalFor].Supporto.HMAX 													:= WorkAreaState[CalFor].Supporto.HMAX;
							CASE  WorkAreaState[calfor].Supporto.Tipologia OF
								LEGNO_PIANO :
												;
								TELAIO_PIANO : 
												;
								BUNDLE:
									TFCalcoloFormaturaWA[CalFor].Supporto.YDim											:= WorkAreaState[CalFor].Supporto.YDim*2;
									TFCalcoloFormaturaWA[CalFor].Supporto.DimVertice 									:= WorkAreaState[CalFor].Supporto.DimVertice*2;
									TFCalcoloFormaturaWA[CalFor].Supporto.TipoPianoAppoggio 							:= 1;
									TFCalcoloFormaturaWA[CalFor].Supporto.AltezzaDenteRitenuta							:= 15;
									TFCalcoloFormaturaWA[CalFor].Supporto.ZDim_Ext1        								:= TFCalcoloFormaturaWA[CalFor].Supporto.ZDim + TFCalcoloFormaturaWA[CalFor].Supporto.AltezzaDenteRitenuta;
									TFCalcoloFormaturaWA[CalFor].Supporto.Tipologia 									:= BUNDLE;
									TFCalcoloFormaturaWA[CalFor].Supporto.LatoDeposito 									:= 180;
									TFCalcoloFormaturaWA[CalFor].TipoOrdinamento										:= 4;	//Ordinamento di deposito, prima un lato poi l'altro
									
								A_FRAME_VERT:		  
									TFCalcoloFormaturaWA[CalFor].HabiCalTodasCordenadas 								:= TRUE ;
									TFCalcoloFormaturaWA[CalFor].Supporto.TipoPianoAppoggio 							:= 1;
									TFCalcoloFormaturaWA[CalFor].Supporto.AltezzaDenteRitenuta							:= 13;
									TFCalcoloFormaturaWA[CalFor].Supporto.ZDim_Ext1        								:= TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim + TFCalcoloFormaturaRT[IdxLista].Supporto.AltezzaDenteRitenuta;
									TFCalcoloFormaturaWA[CalFor].Supporto.Tipologia 									:= CAVALLETTO;
									TFCalcoloFormaturaWA[CalFor].Supporto.LatoDeposito 									:= 0;
									TFCalcoloFormaturaWA[CalFor].TipoOrdinamento										:= 1;	//Ordinamento di deposito, prima un lato poi l'altro
									 
							END_CASE
							TFCalcoloFormaturaWA[CalFor].CalcolaFormatura 				:= TRUE;//Lancio esecuzione dei calcoli
							MEMSET(ADR(FormaturaWA[CalFor]),0,SIZEOF(FormaturaWA[CalFor]));	//Pulisco la memoria di destinazione
							TFCalcoloFormaturaWA[CalFor].PulisciMemoria 				:= FALSE;
							TFCalcoloFormaturaWA[CalFor]() ;
					END_IF
									
							
					 IF (TFCalcoloFormaturaWA[CalFor].CalcolaFormaturaDone OR TFCalcoloFormaturaWA[CalFor].Errore > 0) THEN
							
						TFCalcoloFormaturaWA[CalFor].CalcolaFormatura := FALSE;
						TFFormacionCavalleteCalculada := TFCalcoloFormaturaWA[CalFor] ;
						FormaturaWa[CalFor] := TFCalcoloFormaturaWA[CalFor].FormingSlab;
							//CalcolaFormingRT[IdxLista] := TRUE ; // modificacion probar
							IF TFCalcoloFormaturaRT[CalFor].Errore = 0 THEN
								HMI_Forming_FormaturaAttivataWa[CalFor] := TRUE ;
								IF  calfor = Iforend    THEN 
									FormacionesCalculadas := TRUE ;		  
								END_IF		  
							ELSE
								HMI_Forming_ErroreCalculos[CalFor] := TRUE ; 
							END_IF
					END_IF
								 
				 
	
			END_IF
		IF  calfor = Iforend  AND NOT FormacionesCalculadas  THEN 
			FormacionesCalculadas := TRUE ;	
			EXIT ;	  
		END_IF		  			  
	END_FOR
END_IF 															
																	  
{endregion}
	 

		






END_IF	
		
END_FOR	 
	 

	HMI_WorkAreaDataPicking_1_8 := ActualPickingListFromHMI[1].State >= 1;//Ordine postazioni 1..8 in lavoro
	HMI_WorkAreaDataPicking_1_4 := (ActualPickingListFromHMI[2].State >= 1);//Ordine postazioni 1..4 in lavoro
	HMI_WorkAreaDataPicking_5_8 := (ActualPickingListFromHMI[3].State >= 1);//Ordine postazioni 5..8 in lavoro


							  
								   
{endregion}

















]]></ST>
      </Implementation>
    </Action>
    <Action Name="_11_CalcolaListaProduzioneNew1" Id="{aef0e38f-9c55-4f0c-8209-0f05e5b59d79}">
      <Implementation>
        <ST><![CDATA[{region "Gestione zona GLOBALE - Postazioni da 1 a 8"}


//#############################################################################################################



	  
	  

FOR LoopLista := 1 TO 3 DO
	IdxLista := LoopLista;		 
	 // IdxLista := 2;		  
	CASE IdxLista OF	 
		1: Iforstart := 1; Iforend := MAXAREAPRESENT;
		2: Iforstart := 1; Iforend := 4;
		3: Iforstart := 5; Iforend := MAXAREAPRESENT;
	END_CASE	 
	IF MachinePalletizer_TF.IN.Mode.Man AND
		(MachinePalletizer_TF.CmdExe.Code = CmdNOP OR MachinePalletizer_TF.CmdExe.Code = CmdMAN) THEN
			 
				  
					   
							
{region "Reset Litas"}
//--------------------------------------------------------
			//AZZERAMENTO (Reset) lista di picking	
//--------------------------------------------------------		 
			IF Cmd_AzzeraLista[IdxLista] THEN
				IF Prueva THEN
					MissionClr := ADR(Mission) ;
	 				MEMSET(destAddr := ADR(MissionClr^),fillByte := 0 , n := SIZEOF(MissionClr^));
				END_IF
					ClrEstructura := ADR(PosCavalleteOrdenPikin) ;
					MEMSET(destAddr := ADR(ClrEstructura^),fillByte := 0 , n := SIZEOF(ClrEstructura^));	  
					NuEstacionesPiking := 0 ;	  
					NuEstacionPiking   := 0 ;
					NuPosGuiroPiking := 0;
					PosFinOrdenPikingCaballete := 0 ;
					
					MultiplesCavalletesReceta := FALSE ;
					CoordenadaPasillo0_Y := 0 ;
					CoordenadaPasillo180_Y := 0 ;
					
				
				//FOR i:= 1 TO 3 DO
						//CalcolaFormingRT2[i] := FALSE ;
					CalcolaFormingRT[IdxLista] := FALSE ;
					CalcolaFormingRT2[IdxLista] := FALSE ;	 
						//#Añadido 4_7_2025########################
					Formacion_bandelCalOk[IdxLista]			:= FALSE ;
					Formacion_FrameCalOk[IdxLista]			:= FALSE ;
					Formacion_De_listaOk[IdxLista]			:= FALSE ;
					FormaturaAFRAMERT[IdxLista]		   	:=	FormingEmpty;
					FormaturaBundleRT[IdxLista]	 		:=	FormingEmpty;
							  
					MEMSET(destAddr := ADR(TFFormacionBandelCalculada),fillByte := 0 , n := SIZEOF(TFFormacionBandelCalculada));
					MEMSET(destAddr := ADR(TFFormacionCavalleteCalculada),fillByte := 0 , n := SIZEOF(TFFormacionCavalleteCalculada));
					MEMSET(destAddr := ADR(TFCalcoloFormaturaWA),fillByte := 0 , n := SIZEOF(TFCalcoloFormaturaWA));
					
		  
				//Añadido 4_7_2025##########################
						
				// END_FOR
				ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.NON_ESEGUITO;
				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0; 
				//Disattivazione formatura
				Forming[1] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[2] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[3] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				Forming[4] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
				ActualPickingListFromHMI[IdxLista].State := e_StatoWorkOrder.NON_ESEGUITO;
				Cmd_AttivaLista[IdxLista] := FALSE;
				HMI_Forming_NumeroElementiDaDepositare := 0;
 				RequestPickingListFromHMI[IdxLista].SlabNumber :=0;
	 
				//Azzero le liste per le postazioni dove non avviene la pallettizzazione
				FOR i:= Iforstart TO Iforend DO	
					TFClearWorkAreaArray(ADR(Workarea),ADR(WorkAreaState),k:=i);
					HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
					HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
					WorkAreaState[i].P 			:= 1;
					WorkAreaProductionList[i] 	:= ListaEmpty;
					WorkAreaOffset[i].Y 		:= 0;
					//HMI_NumeroPezziPresentiPostazione[i] 	:= 0; // Quitado Para No resetear posiciones
					NumeroPezziPresentiPostazioneStart[i] 	:= 0;
					WorkAreaProductionList[i].Stato 		:= e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;	 
				END_FOR			  
				ActualPickingListFromHMI[IdxLista].SlabNumber 		  			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.XDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.YDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SlabDimension.ZDim 			:= 0;
				ActualPickingListFromHMI[IdxLista].SupportPianoLegno 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportPianoFerro 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportVertBundle 			:= SupportDataEmpty;
				ActualPickingListFromHMI[IdxLista].SupportVertCav 			 	:= SupportDataEmpty;
				
				HMI_ErroreCalcoloLista 		:= 0;
				Cmd_CalcolaLista[IdxLista] 	:= FALSE;
				HMI_Forming_Attivazione[IdxLista] 	:= FALSE;//attivo nuova formatura
				Cmd_AzzeraLista[IdxLista] := FALSE;
				//Ack 
				//IF HMI_ErrAckCalcolaFormatura THEN
					HMI_Forming_ErroreCalcoli := 0;
					HMI_ErrAckCalcolaFormatura := FALSE;
					FOR i:= 1 TO MAXFORMING DO
						HMI_ConfermaAttivazioneFormatura[i] := FALSE;
						HMI_Forming_FormaturaAttivata[i] := FALSE;
					END_FOR
				//END_IF
				CalcolaFormaturaTrig := FALSE;
			END_IF

{endregion}

//--------------------------------------------------------
		// COMANDO ATTIVAZIONE  lista di picking	
//--------------------------------------------------------		 		  
			//Se non ho una Destinazione impostata, Num.pezzi impostato, o Num.pezzi richiesto...
			//	Resetto il comando		
					IF Cmd_AttivaLista[1] = TRUE  THEN
							FOR uu := Iforstart TO Iforend DO
							 	IF	HMI_WorkAreaDataPicking[uu].Typology = CAVALLETTO THEN 
									CASE HMI_WorkAreaDataPicking[uu].TipoTrabajoLado_Cavallete OF 
	 									0:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto +
												 HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
										1:
											HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_A_Cavaleto ;									 ;
											 
										2:	
		   									HMI_NumeroPezziPresentiPostazione[uu] := HMI_NumeroPezziPresentiCavallete[uu].HMI_NumeroPezziPresentiPostazione_B_Cavaleto ;
												 
									END_CASE
								END_IF 	 
							END_FOR
								  
						IF 	(HMI_WorkAreaDataPicking[1].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[2].Destinazione =0 AND
							HMI_WorkAreaDataPicking[3].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[4].Destinazione =0 AND	 
							HMI_WorkAreaDataPicking[5].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[6].Destinazione =0 AND
							HMI_WorkAreaDataPicking[7].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[8].Destinazione =0)							 
							OR
							(HMI_NumeroPezziPresentiPostazione[1] =0 AND 
							HMI_NumeroPezziPresentiPostazione[2] =0 AND
							HMI_NumeroPezziPresentiPostazione[3] =0 AND 
							HMI_NumeroPezziPresentiPostazione[4] =0 AND
							HMI_NumeroPezziPresentiPostazione[5] =0 AND 
	 						HMI_NumeroPezziPresentiPostazione[6] =0 AND
							HMI_NumeroPezziPresentiPostazione[7] =0 AND 
							HMI_NumeroPezziPresentiPostazione[8] =0)
							OR	 	 
							RequestPickingListFromHMI[1].SlabNumber = 0	 
						THEN
							Cmd_AttivaLista[1] := FALSE;
						 END_IF
					END_IF		  
					IF Cmd_AttivaLista[2] = TRUE  THEN
						IF 	(HMI_WorkAreaDataPicking[1].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[2].Destinazione =0 AND
							HMI_WorkAreaDataPicking[3].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[4].Destinazione =0)
							OR
							(HMI_NumeroPezziPresentiPostazione[1] =0 AND 
							HMI_NumeroPezziPresentiPostazione[2] =0 AND
							HMI_NumeroPezziPresentiPostazione[3] =0 AND 
							HMI_NumeroPezziPresentiPostazione[4] =0)
							OR	 
							RequestPickingListFromHMI[2].SlabNumber = 0	 	 
						THEN
							Cmd_AttivaLista[2] := FALSE;
						 END_IF
					END_IF		
					IF Cmd_AttivaLista[3] = TRUE  THEN
						IF 	(HMI_WorkAreaDataPicking[5].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[6].Destinazione =0 AND
							HMI_WorkAreaDataPicking[7].Destinazione =0 AND 
							HMI_WorkAreaDataPicking[8].Destinazione =0)
							OR
							(HMI_NumeroPezziPresentiPostazione[5] =0 AND 
							HMI_NumeroPezziPresentiPostazione[6] =0 AND
							HMI_NumeroPezziPresentiPostazione[7] =0 AND 
							HMI_NumeroPezziPresentiPostazione[8] =0)
							OR	 	 
							RequestPickingListFromHMI[3].SlabNumber = 0	 	 
						THEN
							Cmd_AttivaLista[3] := FALSE;
						 END_IF
					END_IF		
{Region "Prmer Bucle cuenta las piezas a coger y rellena el workareastate Con el Tipo Palet"}

			// COMANDO ATTIVAZIONE  lista di picking	
		    IF Cmd_AttivaLista[IdxLista] AND ActualPickingListFromHMI[IdxLista].State <> e_StatoWorkOrder.IN_ESECUZIONE THEN
				ElementiDaDepositare[IdxLista]   :=0;
				HMI_ErroreCalcoloLista := 0;
				HMI_NumeroLastreDepOrdineAttuale[IdxLista] := 0;
				FOR i:= Iforstart TO Iforend DO	
					//HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
					//HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
					WorkAreaState[i].P := 1;
					WorkAreaProductionList[i] := ListaEmpty;
				END_FOR	 
				
				FOR i:= Iforstart TO Iforend DO	
					IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
						ElementiDaDepositare[IdxLista] := ElementiDaDepositare[IdxLista] + HMI_WorkAreaDataPicking[i].NumElementiDaLavorare;
						WorkAreaState[i].P := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare +1;
					//#####################################################################################
							FOR InPiezasPos := 1 TO HMI_NumeroPezziPresentiPostazione[i] + 1 DO
								WorkAreaProductionList[i].PElementList[InPiezasPos].PElement.SlabDimension :=
																	 RequestPickingListFromHMIWorkArea[i].SlabDimension ;
								WorkAreaProductionList[i].PElementList[InPiezasPos].PElement.Typology := LASTRA ;
											   
							END_FOR
					//#################################################################################################	
						CASE HMI_WorkAreaDataPicking[i].Typology OF
							LEGNO_PIANO,TELAIO_PIANO:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;
							A_FRAME_VERT:	
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CAVALLETTO;
								
							IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare > 0 THEN 
								NuEstacionesPiking := NuEstacionesPiking + 1 ;	
								PosCavalleteOrdenPikin[i]	:=  e_Tipo_Pallet.CAVALLETTO;  
							END_IF
							BUNDLE_VERT:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.BUNDLE;	
							
						 ELSE
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;		   
						 END_CASE
					ELSE
						NumPostazioneDeposito := i; NuEstacionPiking := i;
						
						HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare := RequestPickingListFromHMI[IdxLista].SlabNumber;
						CASE HMI_WorkAreaDataPicking[i].Typology OF
							LEGNO_PIANO,TELAIO_PIANO:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;
							A_FRAME_VERT:	
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CAVALLETTO;
								NuEstacionesPiking := NuEstacionesPiking + 1 ;	
								PosCavalleteOrdenPikin[i]	:=  e_Tipo_Pallet.CAVALLETTO;  	 
							BUNDLE_VERT:
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.BUNDLE;	
								
							
						 ELSE
								WorkareaState[i].Supporto.Tipologia := e_Tipo_Pallet.CASSA_STANDARD;		   
						 END_CASE
					END_IF

		  
//HMI_NumeroPezziPresentiPostazione[i] := WorkAreaState[i].P -1; //NB:cancellato xckè alla attivazione azzerava il num.pezzi presenti sulle postazioni di prelievo
				END_FOR
	
				IF ElementiDaDepositare[IdxLista] <= HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare THEN
					ActualPickingListFromHMI[IdxLista] 			:= RequestPickingListFromHMI[IdxLista];
					ActualPickingListFromHMI[IdxLista].State 	:= e_StatoWorkOrder.DA_ESEGUIRE;

				ELSE
					HMI_ErroreCalcoloLista := 1;
				END_IF
				Cmd_AttivaLista[IdxLista] 				:= FALSE;
				 
			ELSE
				Cmd_AttivaLista[IdxLista] 				:= FALSE;
				 
			END_IF
{endregion}	

{region "Cotas posicione de trabajo"}

//--------------------------------------------------------------------				
//////// attivazione lista di picking : StatoWorkOrder.DA_ESEGUIRE ///
//--------------------------------------------------------------------				
			IF ActualPickingListFromHMI[IdxLista].State = e_StatoWorkOrder.DA_ESEGUIRE  THEN
				ListaInEsecuzione[IdxLista] := FALSE;
				NumeroListaInEsecuzione := 0;
			
				(* Inserimento sequenza di prelievo dalle postazioni in base al quello che l'operatore ha editato da HMI*)
				ElementiDaDepositare[IdxLista] := 0;
				ElementiElaborati[IdxLista]    := 1;
				NumPostazioneDeposito := 0;
				//FOR i:= 1 TO MAXAREAPRESENT DO
				//	WorkAreaState[i].P := 1;
				//END_FOR		
				
				FOR i:= Iforstart TO Iforend DO//---------- For 1 HMI_WorkAreaDataPicking[i].Destinazione 
					IF HMI_WorkAreaDataPicking[i].Destinazione THEN  //-------> Palet destino
						NumPostazioneDeposito := i;
						HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare 	:= RequestPickingListFromHMI[IdxLista].SlabNumber;
						(*CASE HMI_WorkAreaDataPicking[i].Typology OF     // case Pricipal1*)		 
						CASE HMI_WorkAreaDataPicking[NumPostazioneDeposito].Typology OF     // case Pricipal1	
							(* Se ho un legno in piano *)	 
							LEGNO_PIANO:	
								//WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code; 
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.Code; 	   
								//WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.DimBaseUtile;
								//WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.DimVertice;			   
								//WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.HMAX;
							   	WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.HMAX;
								//WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;   
								//WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.XDim;
								//WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.YDim;
								//WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.ZDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[i].SupportPianoLegno.ZDim;
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								
								WorkAreaProductionList[NumPostazioneDeposito].Support 				:= WorkAreaState[NumPostazioneDeposito].Supporto;
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[K] := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
													
																   
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 20; 
													WorkAreaState[j].Supporto.LatoDeposito 			:= 180;    
													//Lo que HABIA	
													//WorkAreaOffset[j].Y 							:= HMI_OffsetDepositoLastra.Y180 ;
													//Mod 25/&/2025	  
													WorkAreaOffset[NumPostazioneDeposito].Y 		:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim - RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile -40 ;			
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVertCav.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15;     	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
											   		CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
											END_CASE	
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto; 
										END_IF
									END_IF     
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento 
								END_FOR
								EXIT; 
							(* Se ho un telaio in piano *)	 
							TELAIO_PIANO:	
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								
								WorkAreaProductionList[NumPostazioneDeposito].Support := WorkAreaState[NumPostazioneDeposito].Supporto;
							
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[K] := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVertBundle.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 20; 
													WorkAreaState[j].Supporto.LatoDeposito 			:= 180;   	
													  
													WorkAreaOffset[j].Y 		:= 0 ;	
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;				
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertcav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15; 	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
											   		CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
											END_CASE	
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto; 
										END_IF
									END_IF     
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento 
								END_FOR
								EXIT; 
							(* Se ho un bundle *)
							BUNDLE_VERT:
								
								//Se ho deposito verticale su bundle
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.BUNDLE;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.TipoPianoAppoggio 		:= 1;                      
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta		:= 20; 
								WorkAreaState[NumPostazioneDeposito].Supporto.LatoDeposito 				:= 180; 
											   
								WorkAreaProductionList[NumPostazioneDeposito].Support 					:= WorkAreaState[NumPostazioneDeposito].Supporto;
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[K] := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													// **Lo Que Habia	
													WorkAreaOffset[j].Y 							:= 0;
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;	
			
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15; 	
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
													CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;		  
											END_CASE
											//WorkAreaProductionList[j].Support := HMI_Formatura.HMI_Forming_Supporto;		  
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto;
										END_IF
									END_IF
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
								END_FOR
								EXIT; 
							(* Se ho un A_Frame *)	
							A_FRAME_VERT:
								WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
								WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
								WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
								WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= e_Tipo_Pallet.CAVALLETTO;//ActualPickingListFromHMI.SupportVertBundle.Tipologia;
								WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
								WorkAreaState[NumPostazioneDeposito].Supporto.TipoPianoAppoggio 		:= 1;                      
								WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta		:= 15; 
								//WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO (*- ActualPickingListFromHMI[IdxLista].SupportPianoFerro.YDim/2*);
								WorkAreaOffset[NumPostazioneDeposito].Y 								:= OFFSET_POSTAZIONE_LEGNO + ActualPickingListFromHMI[IdxLista].SupportVertCav.YDim/2;	
								
								WorkAreaProductionList[NumPostazioneDeposito].Support 				:= WorkAreaState[NumPostazioneDeposito].Supporto; 
								
								FOR j:= Iforstart TO Iforend DO
									IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
										IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
											ElementiDaDepositare[IdxLista] := ElementiElaborati[IdxLista] + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
											FOR k := ElementiElaborati[IdxLista] TO ElementiDaDepositare[IdxLista]-1 DO	
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
												WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
												// Se van Añadiendo los Diferentes Espesores de la receta del piking ######################################
												HMi_DimensionesPiezasWorkAreaDeposito[K] := RequestPickingListFromHMIWorkArea[j].SlabDimension ;
												//########################################################################################################
												ElementiElaborati[IdxLista] := ElementiElaborati[IdxLista]+1; 
											END_FOR
											CASE HMI_WorkAreaDataPicking[j].Typology OF 
												(* Se ho una cassa pianale in legno *)
												LEGNO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoLegno.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + RequestPickingListFromHMIWorkArea[j].SupportPianoLegno.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho una cassa pianale in ferro su supporto *)
												TELAIO_PIANO:
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportPianoFerro.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:=  e_Tipo_Pallet.CASSA_STANDARD;//ActualPickingListFromHMI[1].Support.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.ZDim;
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_TELAIO - RequestPickingListFromHMIWorkArea[j].SupportPianoFerro.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												(* Se ho un bundle *)
												BUNDLE_VERT:
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= e_Tipo_Pallet.BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertBundle.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 20; 
													WorkAreaState[j].Supporto.LatoDeposito 			:= 180; 
													//**Lo Que Habia
													WorkAreaOffset[j].Y 							:= 0;
													//Mod 25/&/2025	  
													//WorkAreaOffset[j].Y 		:= ActualPickingListFromHMI[IdxLista].SupportVertBundle.YDim-ActualPickingListFromHMI[IdxLista].SupportVertBundle.DimBaseUtile -40;					
												(* Se ho un A_Frame *)	  
												A_FRAME_VERT:  						
													//WorkAreaState[j].P := ElementiDaDepositare;
													WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI[IdxLista].SupportVertCav.Code;
													WorkAreaState[j].Supporto.DimBaseUtile		 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimBaseUtile;
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim+20;
													WorkAreaState[j].Supporto.DimVertice 			:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.DimVertice;
													WorkAreaState[j].Supporto.HMAX 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.HMAX;
													WorkAreaState[j].Supporto.Tipologia 			:= CAVALLETTO;//ActualPickingListFromHMI.SupportVertCav.Tipologia;
													WorkAreaState[j].Supporto.XDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.XDim;
													WorkAreaState[j].Supporto.YDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim;
													WorkAreaState[j].Supporto.ZDim 					:= RequestPickingListFromHMIWorkArea[j].SupportVertCav.ZDim;
													WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;	
													WorkAreaState[j].Supporto.TipoPianoAppoggio 	:= 1;                      
													WorkAreaState[j].Supporto.AltezzaDenteRitenuta	:= 15; 		
													WorkAreaOffset[j].Y 							:= OFFSET_POSTAZIONE_LEGNO + RequestPickingListFromHMIWorkArea[j].SupportVertCav.YDim/2;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
												   	CoordenadaPasillo0_Y 							:= WorkArea[j].Y +  WorkAreaOffset[j].Y  - Dimensioni_Pinza.Spessore - INGOMBRO_RISCONTRO_BUNDLE - WorkAreaState[j].Supporto.YDim /2 ;
													CoordenadaPasillo180_Y 							:= WorkArea[j].Y + WorkAreaState[j].Supporto.YDim /2 + WorkAreaOffset[j].Y  + Dimensioni_Pinza.Spessore + INGOMBRO_RISCONTRO_FRAME  ;	
												
											END_CASE
													  
											WorkAreaProductionList[j].Support := WorkAreaState[j].Supporto;
										END_IF
									END_IF
									TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
								END_FOR
								EXIT; 
						END_CASE // case Pricipal1
					END_IF	//-------->	 //-------> Palet destino
				END_FOR//----------For 1 HMI_WorkAreaDataPicking[i].Destinazione 
				
				Picking.Cmd_CalcolaLista[IdxLista] := TRUE;
				HMI_Forming_Attivazione[IdxLista] := TRUE;//attivo nuova formatura
			END_IF //------------------------------ActualPickingListFromHMI[IdxLista].State = e_StatoWorkOrder.DA_ESEGUIRE 
{endregion }
			 
		    	  


	IF Picking.Cmd_CalcolaLista[IdxLista] AND HMI_Forming_Attivazione[IdxLista] THEN
			idxForm:= IdxLista;		  
		FOR CalFor := Iforstart TO Iforend DO
				CrearFormacion := 1 ; 
				IF CalFor = NumPostazioneDeposito THEN // calcula la formacion para la estacion de piking
					CASE CrearFormacion OF
		  				1:  
							//Ack 
							IF HMI_ErrAckCalcolaFormatura THEN
								HMI_Forming_ErroreCalcoli 					:= 0;
								HMI_ErrAckCalcolaFormatura 					:= FALSE;
								FOR i:= 1 TO MAXFORMING DO
									HMI_ConfermaAttivazioneFormatura[i] 	:= FALSE;
									HMI_Forming_FormaturaAttivata[i] 		:= FALSE;
								END_FOR	 
							END_IF
							
							//Azzeramento comandi in caso di errore
							IF HMI_Forming_ErroreCalcoli <> 0 THEN
								FOR i:=1 TO MAXFORMING DO
									HMI_Forming_Attivazione[i] 				:= FALSE;
									HMI_Forming_Disattivazione[i] 			:= FALSE;
								END_FOR
								HMI_Forming_Calcola 						:= FALSE;
							END_IF
							// borra las estructuras Anteas hacer el calculo
							TFCalcoloFormaturaWA[CalFor].PulisciMemoria := TRUE ;
							HMI_Forming_FormaturaAttivata[idxForm] 		:= FALSE;	
							TFCalcoloFormaturaWA[CalFor]() ;
							CrearFormacion := 2 ; 	  
						2:
								  
							
							IF 	 TFCalcoloFormaturaWA[CalFor].PulisciMemoria AND TFCalcoloFormaturaWA[CalFor].PulisciMemoriaDone THEN 
								// borra La Formacion de la estructura		  
								WorkAreaProductionList[CalFor].Forming := FormingEmpty;
									 
								CASE WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia OF //**Mod
									BUNDLE_VERT:
										TFCalcoloFormaturaWA[CalFor].TipoOrdinamento := 4;//Ordinamento di deposito òato 180°
									A_FRAME_VERT:
										TFCalcoloFormaturaWA[CalFor].TipoOrdinamento := 1;//Ordinamento di deposito, prima un lato poi l'altro	
										TFCalcoloFormaturaWA[CalFor].HabiCalTodasCordenadas := TRUE ;
									ELSE
										TFCalcoloFormaturaWA[CalFor].TipoOrdinamento := 2;//Ordinamento di deposito consecutivo	 
								END_CASE
								(*
									//Valorizzo altezza esterna supporto
									//IF HMI_Forming_Supporto.ZDim_Ext1 = 0 THEN
										HMI_Forming_Supporto.ZDim_Ext1 := HMI_Forming_Supporto.ZDim + HMI_Forming_Supporto.AltezzaDenteRitenuta;
									//END_IF
									//Valorizzo HMAX x tipologia pallet
									IF HMI_Forming_Supporto.Tipologia = PALLET_STANDARD THEN
										HMI_Forming_Supporto.HMAX := HMI_Forming_Supporto.ZDim;
									END_IF 
											  *)
								IF (RequestPickingListFromHMI[1].LayerSequence = 0 OR NOT HMI_AbilitaDepositoFalda)
									AND HMI_Forming_NumeroElementiDaDepositare >0 
								THEN
									//Assegno l'ordine tutto a 1 perchè ho solo lastre	
									FOR i:= 1 TO MAXFORMINGSLAB DO
										//IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
										IF i <= HMI_Forming_NumeroElementiDaDepositare + HMI_NumeroPezziPresentiPostazione[NumPostazioneDeposito] THEN
										//IF i <= 20THEN
											TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i]:= TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i]:= WorkAreaProductionList[CalFor].PElementList[1].PElement.Typology ;
										ELSE
											 TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
										END_IF
									END_FOR
								ELSE
									//FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO		  
									FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO
										IF i MOD 2 = 1 THEN// i <= HMI_Forming_NumeroElementiDaDepositare THEN 
											 TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i]:= WorkAreaProductionList[CalFor].PElementList[i].PElement.Typology ;//Settiamo tipo lastre!!
										ELSE
											 TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i] := FALDA;//Settiamo tipoi falda!
										END_IF
										 	TFCalcoloFormaturaWA[CalFor].TipoElementoDep[i+1] := TERMINATORE;//Settiamo il resto come terminatore
									END_FOR
								END_IF		
								
							
								 TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare; 
								 TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]		:= FaldaDaDepositare;
								 TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]	:= HMI_Forming_LastraDaDepositare;
								 TFCalcoloFormaturaWA[CalFor].Supporto											:= WorkAreaProductionList[CalFor].Support;	//Assegno la tipologia di supporto	  
								
								TFCalcoloFormaturaWA[CalFor].CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
								MEMSET(ADR(WorkAreaProductionList[CalFor].Forming),0,SIZEOF(WorkAreaProductionList[CalFor].Forming));	//Pulisco la memoria di destinazione
								HMI_Forming_Attivazione[CalFor] := FALSE;
								TFCalcoloFormaturaWA[CalFor].PulisciMemoria := FALSE;  
								TFCalcoloFormaturaWA[CalFor]() ;
							END_IF 
							CrearFormacion := 3 ; 
						3:	
							IF TFCalcoloFormaturaDaLista.CalcolaFormaturaDone OR TFCalcoloFormaturaDaLista.Errore > 0 THEN
								
								TFCalcoloFormaturaWA[CalFor].CalcolaFormatura := FALSE;
								Formacion_De_listaOk[idxForm] := TRUE ;
								IF TFCalcoloFormaturaWA[CalFor].Errore = 0 THEN
									IDFormatura 									:= IDFormatura+1;
									GUIDFormatura 									:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
									HMI_Forming_GUID 								:= GUIDFormatura;
							
									WorkAreaProductionList[CalFor].Forming 			:= TFCalcoloFormaturaDaLista.FormingSlab;
									WorkAreaProductionList[CalFor].Forming.Enable 	:= 1;
									WorkAreaProductionList[CalFor].Forming.Code 	:= HMI_Forming_CodiciAbilitatiFormatura[idxForm].Code;
									WorkAreaProductionList[CalFor].Forming.GUID		:= HMI_Forming_GUID;
											  
									Forming[idxForm] 								:= FormingEmpty;	//Pulisco la memoria di destinazione
									Forming[idxForm] 								:= TFCalcoloFormaturaDaLista.FormingSlab;
									Forming[idxForm].Pallet							:= HMI_Forming_Supporto;
									Forming[idxForm].Enable 						:= 1;
									Forming[idxForm].Code 							:= HMI_Forming_CodiciAbilitatiFormatura[idxForm].Code;
									Forming[idxForm].GUID							:= HMI_Forming_GUID;
											  
									HMI_Forming_IndiceFormaturaAttivata := idxForm;
									HMI_Forming_FormaturaAttivata[idxForm] 	:= TRUE;
									HMI_ConfermaAttivazioneFormatura[idxForm] := TRUE;
									//Valorizzo la struttura del WAPL per ogni elemento da elaborare
											FOR jj := 1 TO MAXELEMENTLIST DO
												IF jj < ElementiElaborati[IdxLista] THEN
													WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Stato			:= ELEMENTO_DA_ELABORARE;
													IF Picking.HMI_PareggiaturaLastraAbilitata THEN
														WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Pareggiatura := PAREGGIATURA_DA_ESEGUIRE;
													ELSE
														WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Pareggiatura := PAREGGIATURA_DISABILITATA;
													END_IF
												ELSE
													WorkAreaProductionList[NumPostazioneDeposito].PElementList[jj].Stato			:= ELEMENTO_NOT_DEFINED;
												END_IF
											END_FOR
								ELSE
									HMI_Forming_ErroreCalcoli := TFCalcoloFormaturaDaLista.Errore;
								END_IF
								HMI_Forming_Attivazione[idxForm] := FALSE;
						END_IF				
								  
					END_CASE	
				END_IF 
					 
//ELSE 
	;
	END_FOR
END_IF
(* 
	ELSE // Todas las formaciones  De coger
					IF HMI_WorkAreaDataPicking[CalFor].NumElementiDaLavorare <> 0 THEN 	  
						CASE CrearFormacion OF
							1: 
								 TFCalcoloFormaturaWA[CalFor].PulisciMemoria 	:= TRUE;
								 TFCalcoloFormaturaWA[CalFor]()	 ;
								 CrearFormacion := 2 ; 
								 ;
							2: 
								IF TFCalcoloFormaturaRT[IdxLista].PulisciMemoriaDone THEN		
									FOR i:= 1 TO MAXFORMINGSLAB DO
										IF i <= 40 THEN
										//IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
											TFCalcoloFormaturaRT[IdxLista].TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
										ELSE
											TFCalcoloFormaturaRT[IdxLista].TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
										END_IF
									END_FOR
									TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].XDim				:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.XDim; 
									TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].YDim				:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.YDim; 
									TFCalcoloFormaturaWA[CalFor].Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].ZDim				:= RequestPickingListFromHMIWorkArea[CalFor].SlabDimension.ZDim; 
									TFCalcoloFormaturaWA[CalFor].Supporto.Code													:= WorkAreaState[CalFor].Supporto.Code ;
									TFCalcoloFormaturaWA[CalFor].Supporto.XDim													:= WorkAreaState[CalFor].Supporto.XDim;
									TFCalcoloFormaturaWA[CalFor].Supporto.YDim													:= WorkAreaState[CalFor].Supporto.YDim*2;
									TFCalcoloFormaturaWA[CalFor].Supporto.ZDim													:= WorkAreaState[CalFor].Supporto.ZDim;
									TFCalcoloFormaturaWA[CalFor].Supporto.DimBaseUtile											:= WorkAreaState[CalFor].Supporto.DimBaseUtile;
									TFCalcoloFormaturaWA[CalFor].Supporto.DimVertice 											:= WorkAreaState[CalFor].Supporto.DimVertice*2;
									TFCalcoloFormaturaWA[CalFor].Supporto.HMAX 													:= WorkAreaState[CalFor].Supporto.HMAX;
									CASE  WorkAreaState[IdxLista].Supporto.Tipologia OF
										LEGNO_PIANO :
											 			;
										TELAIO_PIANO : 
														;
										BUNDLE_VERT:
											
											TFCalcoloFormaturaWA[CalFor].Supporto.TipoPianoAppoggio 							:= 1;
											TFCalcoloFormaturaWA[CalFor].Supporto.AltezzaDenteRitenuta							:= 15;
											TFCalcoloFormaturaWA[CalFor].Supporto.ZDim_Ext1        								:= TFCalcoloFormaturaWA[CalFor].Supporto.ZDim + TFCalcoloFormaturaWA[CalFor].Supporto.AltezzaDenteRitenuta;
											TFCalcoloFormaturaWA[CalFor].Supporto.Tipologia 									:= BUNDLE;
											TFCalcoloFormaturaWA[CalFor].Supporto.LatoDeposito 									:= 180;
											TFCalcoloFormaturaWA[CalFor].TipoOrdinamento										:= 4;	//Ordinamento di deposito, prima un lato poi l'altro
											
										A_FRAME_VERT:		  
											TFCalcoloFormaturaWA[CalFor].HabiCalTodasCordenadas 								:= TRUE ;
											TFCalcoloFormaturaWA[CalFor].Supporto.TipoPianoAppoggio 							:= 1;
											TFCalcoloFormaturaWA[CalFor].Supporto.AltezzaDenteRitenuta							:= 13;
											TFCalcoloFormaturaWA[CalFor].Supporto.ZDim_Ext1        								:= TFCalcoloFormaturaRT[IdxLista].Supporto.ZDim + TFCalcoloFormaturaRT[IdxLista].Supporto.AltezzaDenteRitenuta;
											TFCalcoloFormaturaWA[CalFor].Supporto.Tipologia 									:= CAVALLETTO;
											TFCalcoloFormaturaWA[CalFor].Supporto.LatoDeposito 									:= 0;
											TFCalcoloFormaturaWA[CalFor].TipoOrdinamento										:= 1;	//Ordinamento di deposito, prima un lato poi l'altro
											 
									END_CASE
									TFCalcoloFormaturaWA[CalFor].CalcolaFormatura 				:= TRUE;//Lancio esecuzione dei calcoli
									MEMSET(ADR(FormaturaWA[CalFor]),0,SIZEOF(FormaturaWA[CalFor]));	//Pulisco la memoria di destinazione
									TFCalcoloFormaturaWA[CalFor].PulisciMemoria 				:= FALSE;
									TFCalcoloFormaturaWA[CalFor]() ;
									CrearFormacion 												:= 3 ; 
								
								
								
							END_IF
									 ;
							3:	
								 IF (TFCalcoloFormaturaRT[IdxLista].CalcolaFormaturaDone OR TFCalcoloFormaturaRT[IdxLista].Errore > 0) AND CalcolaFormaturaTrig2 THEN
										
										TFCalcoloFormaturaWA[CalFor].CalcolaFormatura := FALSE;
										TFFormacionCavalleteCalculada := TFCalcoloFormaturaWA[CalFor] ;
										FormaturaWa[CalFor] := TFCalcoloFormaturaWA[CalFor].FormingSlab;
				
										//CalcolaFormingRT[IdxLista] := TRUE ; // modificacion probar
										IF TFCalcoloFormaturaRT[IdxLista].Errore = 0 THEN
											Formacion_FrameCalOk[idxForm] 		:= TRUE ;
										ELSE
											//CalcolaFormingRT[IdxLista] := TRUE; // original	  
											CalcolaFormingRT2[IdxLista] := TRUE;
										//##############################Fin ##############################################		 
										//#########################Calculo cavaleta##########################################
										END_IF
								END_IF
								 
					END_CASE 
	
				END_IF
			
		END_FOR
	END_IF	 
			
	*)	
//------------------------------------------------------------------------------------------	
					 
				

		
	
				  
					   
		
					   
							
		
			
				  
				
					
				
END_IF			
	
END_FOR	 
	 

	HMI_WorkAreaDataPicking_1_8 := ActualPickingListFromHMI[1].State >= 1;//Ordine postazioni 1..8 in lavoro
		 
	HMI_WorkAreaDataPicking_1_4 := (ActualPickingListFromHMI[2].State >= 1);//Ordine postazioni 1..4 in lavoro
	HMI_WorkAreaDataPicking_5_8 := (ActualPickingListFromHMI[3].State >= 1);//Ordine postazioni 5..8 in lavoro


							  
								   
{endregion}

















]]></ST>
      </Implementation>
    </Action>
    <Action Name="_11_CalcolaListaProduzioneold" Id="{71f8cc26-c970-492d-8e1e-8fd09f70d1e6}">
      <Implementation>
        <ST><![CDATA[IF MachinePalletizer_TF.IN.Mode.Man AND
	(MachinePalletizer_TF.CmdExe.Code = CmdNOP OR MachinePalletizer_TF.CmdExe.Code = CmdMAN) THEN
	IF Cmd_AzzeraLista THEN
		ActualPickingListFromHMI.State := e_StatoWorkOrder.NON_ESEGUITO;
		FOR i:= 1 TO MAXAREAPRESENT DO	
			TFClearWorkAreaArray(ADR(Workarea),ADR(WorkAreaState),k:=i);
			HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
			HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
			WorkAreaState[i].P 			:= 1;
			WorkAreaProductionList[i] 	:= ListaEmpty;
			WorkAreaOffset[i].Y 		:= 0;
			HMI_NumeroPezziPresentiPostazione[i] := 0;
			NumeroPezziPresentiPostazioneStart[i] := 0;
		END_FOR	
		HMI_NumeroLastreDepOrdineAttuale := 0; 
		//Disattivazione formatura
		Forming[1] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
		ActualPickingListFromHMI.State := e_StatoWorkOrder.NON_ESEGUITO;
		//Azzero le liste per le postazioni dove non avviene la pallettizzazione
		WorkAreaProductionList[1].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[2].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[3].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[4].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[5].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[6].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[7].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		WorkAreaProductionList[8].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
		ActualPickingListFromHMI.SlabNumber 		:= 0;
		ActualPickingListFromHMI.SlabDimension.XDim := 0;
		ActualPickingListFromHMI.SlabDimension.YDim := 0;
		ActualPickingListFromHMI.SlabDimension.ZDim := 0;
		ActualPickingListFromHMI.Support 			:= SupportDataEmpty;
		
		HMI_ErroreCalcoloLista 		:= 0;
		Picking.Cmd_CalcolaLista 	:= FALSE;
		HMI_Forming_Attivazione[1] 	:= FALSE;//attivo nuova formatura
		
		Cmd_AzzeraLista := FALSE;
		//Ack 
		//IF HMI_ErrAckCalcolaFormatura THEN
			HMI_Forming_ErroreCalcoli := 0;
			HMI_ErrAckCalcolaFormatura := FALSE;
			FOR i:= 1 TO MAXFORMING DO
				HMI_Forming_FormaturaAttivata[i] := FALSE;
			END_FOR
		//END_IF
		CalcolaFormaturaTrig := FALSE;
	END_IF
	
	IF Cmd_AttivaLista AND ActualPickingListFromHMI.State <> e_StatoWorkOrder.IN_ESECUZIONE THEN
		ElementiDaDepositare   :=0;
		HMI_ErroreCalcoloLista := 0;
		HMI_NumeroLastreDepOrdineAttuale := 0;
		FOR i:= 1 TO MAXAREAPRESENT DO	
			//HMI_WorkAreaDataPicking[i].Destinazione := FALSE;
			//HMI_WorkAreaDataPicking[i].NumElementiDaLavorare := 0;
			WorkAreaState[i].P := 1;
			WorkAreaProductionList[i] := ListaEmpty;
		END_FOR	 
		
		FOR i:= 1 TO MAXAREAPRESENT DO	
			IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
				ElementiDaDepositare := ElementiDaDepositare+HMI_WorkAreaDataPicking[i].NumElementiDaLavorare;
				WorkAreaState[i].P := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare +1;
				IF HMI_WorkAreaDataPicking[i].Vertical THEN
					WorkareaState[i].Supporto.Tipologia := BUNDLE;
				ELSE
					WorkareaState[i].Supporto.Tipologia := CASSA_STANDARD;
				END_IF
			ELSE
				NumPostazioneDeposito := i;
				HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare := RequestPickingListFromHMI.SlabNumber;
				IF HMI_WorkAreaDataPicking[i].Vertical THEN
					WorkareaState[i].Supporto.Tipologia := BUNDLE;
				ELSE
					WorkareaState[i].Supporto.Tipologia := CASSA_STANDARD;
				END_IF
			END_IF
			HMI_NumeroPezziPresentiPostazione[i] := WorkAreaState[i].P -1;
		END_FOR
	
		IF ElementiDaDepositare <= HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare THEN
			ActualPickingListFromHMI 		:= RequestPickingListFromHMI;
			ActualPickingListFromHMI.State 	:= e_StatoWorkOrder.DA_ESEGUIRE;
		ELSE
			HMI_ErroreCalcoloLista := 1;
		END_IF
		Cmd_AttivaLista 				:= FALSE;
	ELSE
		Cmd_AttivaLista 				:= FALSE;
	END_IF
	
	//attivazione lista di picking
	IF ActualPickingListFromHMI.State = e_StatoWorkOrder.DA_ESEGUIRE THEN
		ListaInEsecuzione := FALSE;
		NumeroListaInEsecuzione := 0;
	
		(* Inserimento sequenza di prelievo dalle postazioni in base al quello che l'operatore ha editato da HMI*)
		ElementiDaDepositare := 0;
		ElementiElaborati    := 1;
		NumPostazioneDeposito := 0;
		//FOR i:= 1 TO MAXAREAPRESENT DO
		//	WorkAreaState[i].P := 1;
		//END_FOR		
		
		FOR i:= 1 TO MAXAREAPRESENT DO
			IF HMI_WorkAreaDataPicking[i].Destinazione THEN
				NumPostazioneDeposito := i;
				HMI_WorkAreaDataPicking[NumPostazioneDeposito].NumElementiDaLavorare 	:= RequestPickingListFromHMI.SlabNumber;
				IF NOT HMI_WorkAreaDataPicking[NumPostazioneDeposito].Vertical THEN //Se NON ho deposito verticale
					WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI.Support.Code;
					WorkAreaState[NumPostazioneDeposito].Supporto.AltezzaDenteRitenuta 		:= ActualPickingListFromHMI.Support.DimBaseUtile;
					WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI.Support.DimVertice;
					WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI.Support.HMAX;
					WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= CASSA_STANDARD;//ActualPickingListFromHMI.Support.Tipologia;
					WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI.Support.XDim;
					WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI.Support.YDim;
					WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI.Support.ZDim;
					WorkAreaOffset[NumPostazioneDeposito].Y 								:= 1315;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
					
					FOR j := 1 TO MAXAREAPRESENT DO
						IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
							IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
								ElementiDaDepositare := ElementiElaborati + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
								FOR k := ElementiElaborati TO ElementiDaDepositare-1 DO	
									WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
									WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
									ElementiElaborati := ElementiElaborati+1; 
								END_FOR
								IF NOT HMI_WorkAreaDataPicking[j].Vertical THEN
									WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI.Support.Code;
									WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI.Support.DimBaseUtile;
									WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI.Support.ZDim+20;
									WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI.Support.DimVertice;
									WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI.Support.HMAX;
									WorkAreaState[j].Supporto.Tipologia 			:= ActualPickingListFromHMI.Support.Tipologia;
									WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI.Support.XDim;
									WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI.Support.YDim;
									WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI.Support.ZDim;
									WorkAreaOffset[j].Y 							:= 1315;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								ELSE
									//WorkAreaState[j].P := ElementiDaDepositare;
									WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI.SupportVert.Code;
									WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI.SupportVert.DimBaseUtile;
									WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI.Support.ZDim+20;
									WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI.SupportVert.DimVertice;
									WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI.SupportVert.HMAX;
									WorkAreaState[j].Supporto.Tipologia 			:= 5;//ActualPickingListFromHMI.SupportVert.Tipologia;
									WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI.SupportVert.XDim;
									WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI.SupportVert.YDim;
									WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI.SupportVert.ZDim;
									WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;					
								END_IF
							END_IF
						END_IF
						TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
					END_FOR
					EXIT; 
				ELSE //Se ho deposito verticale
					WorkAreaState[NumPostazioneDeposito].Supporto.Code 						:= ActualPickingListFromHMI.SupportVert.Code;
					WorkAreaState[NumPostazioneDeposito].Supporto.DimBaseUtile		 		:= ActualPickingListFromHMI.SupportVert.DimBaseUtile;
					WorkAreaState[NumPostazioneDeposito].Supporto.DimVertice 				:= ActualPickingListFromHMI.SupportVert.DimVertice;
					WorkAreaState[NumPostazioneDeposito].Supporto.HMAX 						:= ActualPickingListFromHMI.SupportVert.HMAX;
					WorkAreaState[NumPostazioneDeposito].Supporto.Tipologia 				:= BUNDLE;//ActualPickingListFromHMI.SupportVert.Tipologia;
					WorkAreaState[NumPostazioneDeposito].Supporto.XDim 						:= ActualPickingListFromHMI.SupportVert.XDim;
					WorkAreaState[NumPostazioneDeposito].Supporto.YDim 						:= ActualPickingListFromHMI.SupportVert.YDim;
					WorkAreaState[NumPostazioneDeposito].Supporto.ZDim 						:= ActualPickingListFromHMI.SupportVert.ZDim;
					FOR j := 1 TO MAXAREAPRESENT DO
						IF NOT HMI_WorkAreaDataPicking[j].Destinazione THEN
							IF HMI_WorkAreaDataPicking[j].NumElementiDaLavorare >= 1 THEN
								ElementiDaDepositare := ElementiElaborati + HMI_WorkAreaDataPicking[j].NumElementiDaLavorare;
								FOR k := ElementiElaborati TO ElementiDaDepositare-1 DO	
									WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_PRELIEVO := j;
									WorkAreaProductionList[NumPostazioneDeposito].PElementList[k].WA_DEPOSITO := i;	
									ElementiElaborati := ElementiElaborati+1; 
								END_FOR
								IF NOT HMI_WorkAreaDataPicking[j].Vertical THEN
									WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI.Support.Code;
									WorkAreaState[j].Supporto.DimBaseUtile		 	:= ActualPickingListFromHMI.Support.DimBaseUtile;
									WorkAreaState[j].Supporto.AltezzaDenteRitenuta 		:= ActualPickingListFromHMI.Support.ZDim+20;
									WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI.Support.DimVertice;
									WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI.Support.HMAX;
									WorkAreaState[j].Supporto.Tipologia 			:= ActualPickingListFromHMI.Support.Tipologia;
									WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI.Support.XDim;
									WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI.Support.YDim;
									WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI.Support.ZDim;
									WorkAreaOffset[j].Y 							:= 1315;//ATTENZIONE!!! per poter lavorare in centro con i supporti pari, questa misura è la distanza tra il riscontro bundle verticale e il centro postazione PARI
								ELSE
									//WorkAreaState[j].P := ElementiDaDepositare;
									WorkAreaState[j].Supporto.Code 					:= ActualPickingListFromHMI.SupportVert.Code;
									WorkAreaState[j].Supporto.DimBaseUtile 			:= ActualPickingListFromHMI.SupportVert.DimBaseUtile;
									WorkAreaState[j].Supporto.AltezzaDenteRitenuta 	:= ActualPickingListFromHMI.Support.ZDim+20;
									WorkAreaState[j].Supporto.DimVertice 			:= ActualPickingListFromHMI.SupportVert.DimVertice;
									WorkAreaState[j].Supporto.HMAX 					:= ActualPickingListFromHMI.SupportVert.HMAX;
									WorkAreaState[j].Supporto.Tipologia 			:= 5;//ActualPickingListFromHMI.SupportVert.Tipologia;
									WorkAreaState[j].Supporto.XDim 					:= ActualPickingListFromHMI.SupportVert.XDim;
									WorkAreaState[j].Supporto.YDim 					:= ActualPickingListFromHMI.SupportVert.YDim;
									WorkAreaState[j].Supporto.ZDim 					:= ActualPickingListFromHMI.SupportVert.ZDim;
									WorkAreaState[j].Supporto.ZDim_Ext1        		:= WorkAreaState[j].Supporto.ZDim + 20;
								END_IF
							END_IF
						END_IF
						TFClearApprendimento(ADR(WorkAreaState[j].Apprendimento));//Azzeramento apprendimento
					END_FOR
					EXIT; 
				END_IF
			END_IF
		END_FOR
		
		Picking.Cmd_CalcolaLista := TRUE;
		HMI_Forming_Attivazione[1] := TRUE;//attivo nuova formatura
	END_IF
	
	//una volta calcolata la lista per stabilire le postazioni di prelievo e quella di deposito, calcolo la formatura della postazione di deposito
	IF Picking.Cmd_CalcolaLista THEN
		IF NOT HMI_WorkAreaDataPicking[NumPostazioneDeposito].Vertical THEN
			HMI_Formatura.HMI_Forming_Supporto.Code				:= RequestPickingListFromHMI.Support.Code;
			HMI_Formatura.HMI_Forming_Supporto.XDim				:= RequestPickingListFromHMI.Support.XDim;
			HMI_Formatura.HMI_Forming_Supporto.YDim				:= RequestPickingListFromHMI.Support.YDim;
			HMI_Formatura.HMI_Forming_Supporto.ZDim				:= RequestPickingListFromHMI.Support.ZDim;
			HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= RequestPickingListFromHMI.Support.DimBaseUtile;
			HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= RequestPickingListFromHMI.Support.DimVertice;
			HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= RequestPickingListFromHMI.Support.HMAX;
			HMI_Formatura.HMI_Forming_Supporto.Tipologia		:= RequestPickingListFromHMI.Support.Tipologia;
		ELSE
			HMI_Formatura.HMI_Forming_Supporto.Code				:= RequestPickingListFromHMI.SupportVert.Code;
			HMI_Formatura.HMI_Forming_Supporto.XDim				:= RequestPickingListFromHMI.Supportvert.XDim;
			HMI_Formatura.HMI_Forming_Supporto.YDim				:= RequestPickingListFromHMI.Supportvert.YDim*2;
			HMI_Formatura.HMI_Forming_Supporto.ZDim				:= RequestPickingListFromHMI.Supportvert.ZDim;
			HMI_Formatura.HMI_Forming_Supporto.TipoPianoAppoggio := 1;
			HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta		:= 20;
			HMI_Formatura.HMI_Forming_Supporto.ZDim_Ext1        := HMI_Formatura.HMI_Forming_Supporto.ZDim +	HMI_Formatura.HMI_Forming_Supporto.AltezzaDenteRitenuta;
			HMI_Formatura.HMI_Forming_Supporto.DimBaseUtile		:= RequestPickingListFromHMI.Supportvert.DimBaseUtile;
			HMI_Formatura.HMI_Forming_Supporto.DimVertice 		:= RequestPickingListFromHMI.Supportvert.DimVertice*2;
			HMI_Formatura.HMI_Forming_Supporto.HMAX 			:= RequestPickingListFromHMI.Supportvert.HMAX;
			HMI_Formatura.HMI_Forming_Supporto.Tipologia 		:= BUNDLE;
			HMI_Formatura.HMI_Forming_Supporto.LatoDeposito 	:= 180;
		END_IF
		//
		HMI_Formatura.HMI_Forming_LastraDaDepositare.XDim		:= RequestPickingListFromHMI.SlabDimension.XDim;
		HMI_Formatura.HMI_Forming_LastraDaDepositare.YDim		:= RequestPickingListFromHMI.SlabDimension.YDim;
		HMI_Formatura.HMI_Forming_LastraDaDepositare.ZDim		:= RequestPickingListFromHMI.SlabDimension.ZDim;
		
		HMI_Formatura.HMI_Forming_CodiciAbilitatiFormatura[1].Code[1] := 1;
		
		FaldaDaDepositare.TypologyCode := RequestPickingListFromHMI.Layer.Tipologia;
		
		FaldaDaDepositare.XDim := RequestPickingListFromHMI.Layer.XDim;
		FaldaDaDepositare.YDim := RequestPickingListFromHMI.Layer.YDim;
		FaldaDaDepositare.ZDim := RequestPickingListFromHMI.Layer.ZDim;
		
		//Vado ad assegnare il numero giusto di elementi a seconda se è presente o meno la falda 
		IF (RequestPickingListFromHMI.LayerSequence = 1 AND HMI_AbilitaDepositoFalda) AND RequestPickingListFromHMI.Support.Tipologia <> CAVALLETTO AND RequestPickingListFromHMI.Support.Tipologia <> BUNDLE THEN 
			HMI_Formatura.HMI_Forming_NumeroElementiDaDepositare	:= TO_UINT(2*RequestPickingListFromHMI.SlabNumber - 1);
		ELSE 
			HMI_Formatura.HMI_Forming_NumeroElementiDaDepositare	:= TO_UINT(RequestPickingListFromHMI.SlabNumber);
		END_IF
		
		//Ack 
		IF HMI_ErrAckCalcolaFormatura THEN
			HMI_Forming_ErroreCalcoli := 0;
			HMI_ErrAckCalcolaFormatura := FALSE;
			FOR i:= 1 TO MAXFORMING DO
				HMI_Forming_FormaturaAttivata[i] := FALSE;
			END_FOR
		END_IF
		
		//Azzeramento comandi in caso di errore
		IF HMI_Forming_ErroreCalcoli <> 0 THEN
			FOR i:=1 TO MAXFORMING DO
				HMI_Forming_Attivazione[i] 		:= FALSE;
				HMI_Forming_Disattivazione[i] 	:= FALSE;
			END_FOR
			HMI_Forming_Calcola 			:= FALSE;
		END_IF
		
		//Valorizzo altezza esterna supporto
		//IF HMI_Forming_Supporto.ZDim_Ext1 = 0 THEN
			HMI_Forming_Supporto.ZDim_Ext1 := HMI_Forming_Supporto.ZDim + HMI_Forming_Supporto.AltezzaDenteRitenuta;
		//END_IF
		//Valorizzo HMAX x tipologia pallet
		IF HMI_Forming_Supporto.Tipologia = PALLET_STANDARD THEN
			HMI_Forming_Supporto.HMAX := HMI_Forming_Supporto.ZDim;
		END_IF
		
		//Attivazione
		//FOR i:= 1 TO MAXFORMING DO
			idxForm:=1;//forzo a 1 la formatura da attivare
			IF HMI_Forming_Attivazione[idxForm] AND idxForm <=2 THEN
				Forming[idxForm] := FormingEmpty;
				IF NOT CalcolaFormaturaTrig  THEN
					HMI_Forming_FormaturaAttivata[idxForm] 	:= FALSE;
					TFCalcoloFormaturaDaLista.PulisciMemoria 	:= TRUE;
					IF TFCalcoloFormaturaDaLista.PulisciMemoriaDone THEN	
						HMI_Forming_ErroreCalcoli := 0;
						
						IF RequestPickingListFromHMI.LayerSequence = 0 OR NOT HMI_AbilitaDepositoFalda THEN
							//Assegno l'ordine tutto a 1 perchè ho solo lastre	
							FOR i:= 1 TO MAXFORMINGSLAB DO
								IF i <= HMI_Forming_NumeroElementiDaDepositare THEN
									TFCalcoloFormaturaDaLista.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
								ELSE
									TFCalcoloFormaturaDaLista.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
								END_IF
							END_FOR
						ELSE
							FOR i := 1 TO HMI_Forming_NumeroElementiDaDepositare DO//BY (Request_WorkOrder.LayerSequence+1) DO
								IF i MOD 2 = 1 THEN// i <= HMI_Forming_NumeroElementiDaDepositare THEN 
									TFCalcoloFormaturaDaLista.TipoElementoDep[i] := LASTRA;//Settiamo tipo lastre!!
								ELSE
									TFCalcoloFormaturaDaLista.TipoElementoDep[i] := FALDA;//Settiamo tipoi falda!
								END_IF
								TFCalcoloFormaturaDaLista.TipoElementoDep[i+1] := TERMINATORE;//Settiamo il resto come terminatore
							END_FOR
						END_IF	
						FOR i := HMI_Forming_NumeroElementiDaDepositare+1 TO MAXFORMINGSLAB DO
							TFCalcoloFormaturaDaLista.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
						END_FOR
							
						TFCalcoloFormaturaDaLista.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA]		:= HMI_Forming_LastraDaDepositare; 
						TFCalcoloFormaturaDaLista.Materiale[e_Tipo_Elemento_Da_Lavorare.FALDA]		:= FaldaDaDepositare;
						TFCalcoloFormaturaDaLista.Materiale[e_Tipo_Elemento_Da_Lavorare.QUADROTTA]	:= HMI_Forming_LastraDaDepositare;
						TFCalcoloFormaturaDaLista.Supporto											:= HMI_Forming_Supporto;	//Assegno la tipologia di supporto
						IF HMI_WorkAreaDataPicking[NumPostazioneDeposito].Vertical THEN//Se sono in deposito verticale -> sono sul bundle...
							TFCalcoloFormaturaDaLista.TipoOrdinamento									:= 4;//Ordinamento di deposito, prima un lato poi l'altro
						ELSE
							TFCalcoloFormaturaDaLista.TipoOrdinamento									:= 2;//Ordinamento di deposito, prima un lato poi l'altro
						END_IF
						TFCalcoloFormaturaDaLista.CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
						MEMSET(ADR(HMI_Forming_FormaturaCalcolata),0,SIZEOF(HMI_Forming_FormaturaCalcolata));	//Pulisco la memoria di destinazione
						CalcolaFormaturaTrig := TRUE;
						HMI_Forming_Attivazione[i] := FALSE;
						TFCalcoloFormaturaDaLista.PulisciMemoria := FALSE;
					END_IF
				ELSIF (TFCalcoloFormaturaDaLista.CalcolaFormaturaDone OR TFCalcoloFormaturaDaLista.Errore > 0) AND CalcolaFormaturaTrig THEN
					TFCalcoloFormaturaDaLista.CalcolaFormatura := FALSE;
					IF TFCalcoloFormaturaDaLista.Errore = 0 THEN
						IDFormatura 			:= IDFormatura+1;
						GUIDFormatura 			:= STRING_TO_UINT(concat(UINT_TO_STRING(NUMERO_MACCHINA),UINT_TO_STRING(IDFormatura)));
						HMI_Forming_GUID 		:= GUIDFormatura;
				
						HMI_Forming_FormaturaCalcolata 		:= TFCalcoloFormaturaDaLista.FormingSlab;
						Forming[idxForm] 							:= FormingEmpty;	//Pulisco la memoria di destinazione
						Forming[idxForm] 							:= TFCalcoloFormaturaDaLista.FormingSlab;
						Forming[idxForm].Enable 					:= 1;
						Forming[idxForm].Code 					:= HMI_Forming_CodiciAbilitatiFormatura[idxForm].Code;
						Forming[idxForm].GUID						:= HMI_Forming_GUID;
						Forming[idxForm].Pallet					:= HMI_Forming_Supporto;
						HMI_Forming_IndiceFormaturaAttivata := idxForm;
						HMI_Forming_FormaturaAttivata[idxForm] 	:= TRUE;
						//Valorizzo la struttura del WAPL per ogni elemento da elaborare
						FOR j := 1 TO MAXELEMENTLIST DO
							IF j < ElementiElaborati THEN
								WorkAreaProductionList[NumPostazioneDeposito].PElementList[j].PElement 		:= TFCalcoloFormaturaDaLista.FormingSlab.PElement[j];	
								WorkAreaProductionList[NumPostazioneDeposito].PElementList[j].Stato			:= ELEMENTO_DA_ELABORARE;
							
								IF Picking.HMI_PareggiaturaLastraAbilitata THEN
									WorkAreaProductionList[NumPostazioneDeposito].PElementList[j].Pareggiatura := PAREGGIATURA_DA_ESEGUIRE;
								ELSE
									WorkAreaProductionList[NumPostazioneDeposito].PElementList[j].Pareggiatura := PAREGGIATURA_DISABILITATA;
								END_IF
							ELSE
								WorkAreaProductionList[NumPostazioneDeposito].PElementList[j].Stato			:= ELEMENTO_NOT_DEFINED;
							END_IF
						END_FOR
					ELSE
						HMI_Forming_ErroreCalcoli := TFCalcoloFormaturaDaLista.Errore;
					END_IF
					CalcolaFormaturaTrig := FALSE;
					HMI_Forming_Attivazione[idxForm] := FALSE;
				END_IF
			ELSIF HMI_Forming_Attivazione[idxForm] THEN
				memset(destAddr:=ADR(TFCalcoloFormaturaDaLista.Errore),fillByte:=(UINT_TO_USINT(ErrNumeroMassimoFormatureAmmesse)),n:=SIZEOF(TFCalcoloFormaturaDaLista.Errore));
			END_IF
		
			//Disattivazione formatura
			IF HMI_Forming_Disattivazione[idxForm] THEN
				HMI_Forming_Disattivazione[idxForm] := FALSE;
				Forming[idxForm] := FormingEmpty;	//Pulisco la formatura selezionata e di consegenza la disattivo
			END_IF
				
		//END_FOR
		
		(* Metto in stato di esecuzione il nuovo W.O. se tutto si è attivato *)
		IF HMI_Forming_FormaturaAttivata[1] THEN
			ActualPickingListFromHMI.State := e_StatoWorkOrder.IN_ESECUZIONE;
			//Azzero le liste per le postazioni dove non avviene la pallettizzazione
			WorkAreaProductionList[1].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[2].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[3].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[4].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[5].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[6].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[7].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[8].Stato := e_Stato_ListaDiProduzione.LISTA_PROD_ASSENTE;
			WorkAreaProductionList[NumPostazioneDeposito].Support := Forming[idxForm].Pallet;
			WorkAreaProductionList[NumPostazioneDeposito].Stato := LISTA_PROD_DA_ESEGUIRE;
			Picking.Cmd_CalcolaLista := FALSE;
			HMI_Forming_FormaturaAttivata[1] := FALSE;
			CalcolaFormingRT := TRUE;
		END_IF
	END_IF	
	TFCalcoloFormaturaDaLista();
END_IF	

//verifico che la lista sia in esecuzione o terminata
IF NOT ListaInEsecuzione THEN
	FOR i := 1 TO MAXAREAPRESENT DO	
		IF WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_IN_ESECUZIONE THEN
			ListaInEsecuzione := TRUE;
			EXIT;	
		END_IF
	END_FOR
ELSE
	FOR i := 1 TO MAXAREAPRESENT DO	
		IF WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_ESEGUITA THEN
			ListaInEsecuzione := FALSE;
			EXIT;	
		END_IF
	END_FOR
END_IF

//



FOR i := 1 TO MAXAREAPRESENT DO	
		
	IF NumeroPezziPresentiPostazioneStart[i] = 0 AND WorkAreaState[i].P > 1 THEN
		NumeroPezziPresentiPostazioneStart[i] := TO_UINT(WorkAreaState[i].P);
	END_IF

	IF NOT HMI_WorkAreaDataPicking[i].Destinazione THEN
		IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare > 0 THEN
			//IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare >= TO_UINT(WorkAreaState[i].P)-1 THEN
			//	HMI_NumeroLastreRimanentiOrdineAttuale[i] := HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - TO_UINT(WorkAreaState[i].P);
			//ELSE
			//	HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
			//END_IF
			IF HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - (TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i]) > 0 THEN
				HMI_NumeroLastreRimanentiOrdineAttuale[i] := MIN(HMI_WorkAreaDataPicking[i].NumElementiDaLavorare,HMI_WorkAreaDataPicking[i].NumElementiDaLavorare - 
															(NumeroPezziPresentiPostazioneStart[i] - TO_UINT(WorkAreaState[i].P)));
			ELSE
				HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
			END_IF
		ELSE
			HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
		END_IF
	ELSE
		IF NumeroPezziPresentiPostazioneStart[i] < (TO_UINT(WorkAreaState[i].P)) AND NumeroPezziPresentiPostazioneStart[i]>0 THEN
			HMI_NumeroLastreRimanentiOrdineAttuale[i] := TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i]+1;
		ELSE
			HMI_NumeroLastreRimanentiOrdineAttuale[i] := 0;
		END_IF
	END_IF
	IF (WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_IN_ESECUZIONE OR WorkAreaProductionList[i].Stato = e_Stato_ListaDiProduzione.LISTA_PROD_ESEGUITA) AND WorkAreaState[i].P > 1 THEN
		HMI_NumeroLastreDepOrdineAttuale := TO_UINT(WorkAreaState[i].P-1);
		IF NumeroPezziPresentiPostazioneStart[i] < (TO_UINT(WorkAreaState[i].P)) AND NumeroPezziPresentiPostazioneStart[i]>0 THEN
			HMI_NumeroLastreDepOrdineAttuale := TO_UINT(WorkAreaState[i].P) - NumeroPezziPresentiPostazioneStart[i];
		ELSE
			HMI_NumeroLastreDepOrdineAttuale := 0;
		END_IF
	END_IF	
END_FOR

//trasferisco i valori alla variabile in lettura x HMI
MEMCPY(destAddr:=ADR(HMI_WorkAreaProductionList),srcAddr:=ADR(WorkAreaProductionList),n:=SIZEOF(HMI_WorkAreaProductionList));
	
IF CalcolaFormingRT THEN
	IF NOT CalcolaFormaturaTrig2 THEN
	///////////////////////////
		TFCalcoloFormaturaRT.PulisciMemoria 	:= TRUE;
		IF TFCalcoloFormaturaRT.PulisciMemoriaDone THEN		
			FOR i:= 1 TO MAXFORMINGSLAB DO
				IF i <= 50 THEN
					TFCalcoloFormaturaRT.TipoElementoDep[i] := LASTRA;//Settiamo tutte lastre!!
				ELSE
					TFCalcoloFormaturaRT.TipoElementoDep[i] := TERMINATORE;//Settiamo il resto come terminatore
				END_IF
			END_FOR
			TFCalcoloFormaturaRT.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].XDim		:= RequestPickingListFromHMI.SlabDimension.XDim; 
			TFCalcoloFormaturaRT.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].YDim		:= RequestPickingListFromHMI.SlabDimension.YDim; 
			TFCalcoloFormaturaRT.Materiale[e_Tipo_Elemento_Da_Lavorare.LASTRA].ZDim		:= RequestPickingListFromHMI.SlabDimension.ZDim; 
			TFCalcoloFormaturaRT.Supporto.Code					:= RequestPickingListFromHMI.SupportVert.Code;
			TFCalcoloFormaturaRT.Supporto.XDim					:= RequestPickingListFromHMI.Supportvert.XDim;
			TFCalcoloFormaturaRT.Supporto.YDim					:= RequestPickingListFromHMI.Supportvert.YDim*2;
			TFCalcoloFormaturaRT.Supporto.ZDim					:= RequestPickingListFromHMI.Supportvert.ZDim;
			TFCalcoloFormaturaRT.Supporto.TipoPianoAppoggio 	:= 1;
			TFCalcoloFormaturaRT.Supporto.AltezzaDenteRitenuta	:= 20;
			TFCalcoloFormaturaRT.Supporto.ZDim_Ext1        	:= TFCalcoloFormaturaRT.Supporto.ZDim + TFCalcoloFormaturaRT.Supporto.AltezzaDenteRitenuta;
			TFCalcoloFormaturaRT.Supporto.DimBaseUtile		:= RequestPickingListFromHMI.Supportvert.DimBaseUtile;
			TFCalcoloFormaturaRT.Supporto.DimVertice 		:= RequestPickingListFromHMI.Supportvert.DimVertice*2;
			TFCalcoloFormaturaRT.Supporto.HMAX 				:= RequestPickingListFromHMI.Supportvert.HMAX;
			TFCalcoloFormaturaRT.Supporto.Tipologia 		:= BUNDLE;
			TFCalcoloFormaturaRT.Supporto.LatoDeposito 		:= 180;
			TFCalcoloFormaturaRT.TipoOrdinamento			:= 4;//Ordinamento di deposito, prima un lato poi l'altro
			TFCalcoloFormaturaRT.CalcolaFormatura := TRUE; 		//Lancio esecuzione dei calcoli
			MEMSET(ADR(FormaturaRT),0,SIZEOF(FormaturaRT));	//Pulisco la memoria di destinazione
			CalcolaFormaturaTrig2 := TRUE;
			TFCalcoloFormaturaRT.PulisciMemoria := FALSE;
		END_IF
	ELSIF (TFCalcoloFormaturaRT.CalcolaFormaturaDone OR TFCalcoloFormaturaRT.Errore > 0) AND CalcolaFormaturaTrig2 THEN
		TFCalcoloFormaturaRT.CalcolaFormatura := FALSE;
		FormaturaRT := TFCalcoloFormaturaRT.FormingSlab;
		CalcolaFormaturaTrig2 := FALSE;
		IF TFCalcoloFormaturaRT.Errore = 0 THEN
			CalcolaFormaturaTrig2 := FALSE;
			CalcolaFormingRT := FALSE;
		ELSE
			CalcolaFormingRT := TRUE;;
		END_IF
	END_IF
END_IF
TFCalcoloFormaturaRT();





















]]></ST>
      </Implementation>
    </Action>
    <Action Name="TEST_Variabili" Id="{d1477142-a8d1-4d92-b199-364b2f7edc0e}">
      <Implementation>
        <ST><![CDATA[
	Temp_Bool[8] := MachinePalletizer_TF.OUT.ClockSegnalazioni;
	Temp_Bool[9] := MachinePalletizer_TF.OUT.ClockSegnalazioniAlternato;

	Temp_Bool[0] := HMI_Status_BarrieraPall_OK;

  
 Temp_uint[0] := ElementiDaDepositare[1];	
 Temp_uint[0] := ElementiDaDepositare[2];		
 Temp_uint[0] := ElementiDaDepositare[3];
		 
 Temp_uint[0] := HMI_WorkAreaDataPicking[1].NumElementiDaLavorare;	
 Temp_uint[0] := HMI_WorkAreaDataPicking[1].NumElementiDaLavorare;		

	
 Temp_Real[1]:= 	MachinePalletizer_TF.WorkSpace[1].X;
 Temp_Real[1]:= 	MachinePalletizer_TF.WorkSpace[1].Y;
 Temp_Real[1]:= 	MachinePalletizer_TF.WorkSpace[1].Z;
   
 
 Temp_Real[1]:= Traiettoria.StartPoint.X;
 Temp_Real[1]:= Traiettoria.StartPoint.Y;
 Temp_Real[1]:= Traiettoria.StartPoint.Z;
 Temp_Real[1]:= Traiettoria.StartPoint.J;


//; SimulazioneSenzaPalletFalde;
//PINZA
Temp_Real[1]:= Pinza.Ovem1.Status.ValoreDepressioneIstantanea;
Temp_Real[1]:= HMI_DepressioneOVEM_DX1;
Temp_Real[1]:= Pinza.Ovem12.Status.ValoreDepressioneIstantanea;
Temp_Real[1]:= HMI_DepressioneOVEM_DX2;
//;
Temp_Real[1]:= Pinza.Ovem22.Status.ValoreDepressioneIstantanea;
Temp_Real[1]:= HMI_DepressioneOVEM_SX1;
Temp_Real[1]:= Pinza.Ovem22.Status.ValoreDepressioneIstantanea;
Temp_Real[1]:= HMI_DepressioneOVEM_SX2;
	
//Presenza
//FormaturaAFRAMERT;
Temp_bool[0] := I_PresenzaSupporto[1];
Temp_bool[0] := I_PresenzaBundle[1];
Temp_bool[0] := I_PresenzaCentrale[1];
Temp_bool[0] := I_PHPresenzaPallet[1];
Temp_bool[0] := I_PHPresenzaPalletVirtuale[1];

Temp_bool[0] := I_PresenzaSupporto[2];
Temp_bool[0] := I_PresenzaBundle[2];
Temp_bool[0] := I_PresenzaCentrale[2];
Temp_bool[0] := I_PHPresenzaPallet[2];
Temp_bool[0] := I_PHPresenzaPalletVirtuale[2];

Temp_bool[0] := I_PresenzaSupporto[3];
Temp_bool[0] := I_PresenzaBundle[3];
Temp_bool[0] := I_PresenzaCentrale[3];
Temp_bool[0] := I_PHPresenzaPallet[3];
Temp_bool[0] := I_PHPresenzaPalletVirtuale[3];

//*** Calcola Lista produzione  ***	

 Temp_bool[0] := HMI_WorkAreaDataPicking[1].Destinazione; // (0=Prelievo, 1= deposito).	
 Temp_bool[0] := HMI_WorkAreaDataPicking[2].Destinazione;
 Temp_bool[0] := HMI_WorkAreaDataPicking[3].Destinazione;
 Temp_bool[0] := HMI_WorkAreaDataPicking[4].Destinazione;
 
//valori dei supporti della lista 2
Temp_Real[1]:= RequestPickingListFromHMI[2].SupportPianoLegno.XDim;
Temp_Real[1]:= RequestPickingListFromHMI[2].SupportPianoLegno.YDim;	
Temp_real[1]:= RequestPickingListFromHMI[2].SupportPianoLegno.ZDim;
Temp_INT[0]	:= RequestPickingListFromHMI[2].State; 						//Stato WO richiesto
Temp_UINT[0]:= RequestPickingListFromHMI[2].SlabNumber;			// Numero Lastre da depositare

// compilazione WO
// Tipologia: 0= Orrizzontale LEGNO,1= Orrizzontale Telaio , 2 = Bundle, 3 = A-FRAME
Temp_INT[0] := WorkareaState[1].Supporto.Tipologia;
Temp_INT[0] := WorkareaState[2].Supporto.Tipologia;
Temp_INT[0] := WorkareaState[3].Supporto.Tipologia;
Temp_INT[0] := WorkareaState[4].Supporto.Tipologia;
	//...	
Temp_INT[0] := WorkareaState[8].Supporto.Tipologia;

IF (FALSE) THEN
(*
// Per ogni Postazione
// Postazione 1	
//	HMI_WorkAreaDataPicking[1].Destinazione := 0;		//Prel/Depo
	HMI_WorkAreaDataPicking[1].Typology := 0;			//Cassa,Telaio,...
	HMI_WorkAreaDataPicking[1].NumElementiDaLavorare := 0; // Lastre da prelevare, se la Postazione è di deposito, SCOMPARE!
	HMI_NumeroLastreRimanentiOrdineAttuale[1] :=0;	
	HMI_WorkAreaDataPicking[1].NumElementiDaLavorare := 0; // dopo la Barra
	HMI_NumeroPezziPresentiPostazione[1] :=0;			//Campo sotto la cornice	
// Postazione 2	
	HMI_WorkAreaDataPicking[2].Destinazione := 0;		//Prel/Depo
	HMI_WorkAreaDataPicking[2].Typology := 0;			//Cassa,Telaio,...
	HMI_WorkAreaDataPicking[2].NumElementiDaLavorare := 0; // Lastre da prelevare, se la Postazione è di deposito, SCOMPARE!
	HMI_NumeroLastreRimanentiOrdineAttuale[2] :=0;	
	HMI_WorkAreaDataPicking[2].NumElementiDaLavorare := 0; // dopo la Barra
	HMI_NumeroPezziPresentiPostazione[2] :=0;			//Campo sotto la cornice	
// Postazione 3
	HMI_WorkAreaDataPicking[3].Destinazione := 0;		//Prel/Depo
	HMI_WorkAreaDataPicking[3].Typology := 0;			//Cassa,Telaio,...
	HMI_WorkAreaDataPicking[3].NumElementiDaLavorare := 0; // Lastre da prelevare, se la Postazione è di deposito, SCOMPARE!
	HMI_NumeroLastreRimanentiOrdineAttuale[3] :=0;
	HMI_WorkAreaDataPicking[3].NumElementiDaLavorare := 0; // dopo la Barra
	HMI_NumeroPezziPresentiPostazione[3] :=0;			//Campo sotto la cornice	


// Work Order Richiesto
	RequestPickingListFromHMI[2].State :=0;
	RequestPickingListFromHMI[2].SlabNumber :=0;
// Work Order attuale	
	ActualPickingListFromHMI[2].State  :=0;	
	HMI_NumeroLastreDepOrdineAttuale[2] :=0; 
	RequestPickingListFromHMI[2].SlabNumber :=0;
	
	ElementiDaDepositare[Temp_IdxLista]  := Temp_UINT[0]; //# Somma delle Lastre da Prelevare nelle WorkArea
	WorkAreaState[Temp_i].P := Temp_INT[0];				//# Pack Poinyer, contiene il NumElementiDaLavorare
	
	//Controllo sul numero elementi da prelevare che deve essere min o uguale agli elementi da depositare
	ActualPickingListFromHMI[Temp_IdxLista]	:= RequestPickingListFromHMI[Temp_IdxLista];
	ActualPickingListFromHMI[Temp_IdxLista].State 	:= e_StatoWorkOrder.DA_ESEGUIRE;
	
	Temp_INT[0] := Picking.RequestPickingListFromHMI[1].SupportPianoLegno.Code;
	Temp_INT[0]	:= RequestPickingListFromHMI[Temp_IdxLista].SupportPianoLegno.Code;
	Temp_REAL[0] := RequestPickingListFromHMI[Temp_IdxLista].SupportPianoLegno.XDim;
	Temp_REAL[0] := RequestPickingListFromHMI[Temp_IdxLista].SupportPianoLegno.YDim;
	Temp_REAL[0] := RequestPickingListFromHMI[Temp_IdxLista].SupportPianoLegno.ZDim;
	Temp_INT[3] := HMI_WorkAreaDataPicking[1].Typology;

	// Lista di produzione compilata
	//WorkAreaProductionList[MAXAREA].PElementList[MAXELEMENTLIST].WA_PRELIEVO :=0;
	//WorkAreaProductionList[MAXAREA].PElementList[MAXELEMENTLIST].WA_DEPOSITO :=0;
	
	//Work Area Production List 1
	WorkAreaProductionList[1].PElementList[1].WA_PRELIEVO :=0;
	WorkAreaProductionList[1].PElementList[2].WA_PRELIEVO :=0;
	WorkAreaProductionList[1].PElementList[3].WA_PRELIEVO :=0;
	
	WorkAreaProductionList[1].PElementList[1].WA_DEPOSITO :=0;
	WorkAreaProductionList[1].PElementList[2].WA_DEPOSITO :=0;
	WorkAreaProductionList[1].PElementList[3].WA_DEPOSITO :=0;
	//Work Area Production List 2	
	WorkAreaProductionList[2].PElementList[1].WA_PRELIEVO :=0;
	WorkAreaProductionList[2].PElementList[2].WA_PRELIEVO :=0;
	WorkAreaProductionList[2].PElementList[3].WA_PRELIEVO :=0;
	WorkAreaProductionList[2].PElementList[4].WA_PRELIEVO :=0;
	WorkAreaProductionList[2].PElementList[5].WA_PRELIEVO :=0;
		
	WorkAreaProductionList[2].PElementList[1].WA_DEPOSITO :=0;
	WorkAreaProductionList[2].PElementList[2].WA_DEPOSITO :=0;
	WorkAreaProductionList[2].PElementList[3].WA_DEPOSITO :=0;
	WorkAreaProductionList[2].PElementList[4].WA_DEPOSITO :=0;
	WorkAreaProductionList[2].PElementList[5].WA_DEPOSITO :=0;
//Work Area Production List 3 (WA dove viene fatto il prelievo con 5 lastre da spostare)
	WorkAreaProductionList[3].PElementList[1].WA_PRELIEVO :=0;
	WorkAreaProductionList[3].PElementList[2].WA_PRELIEVO :=0;
	WorkAreaProductionList[3].PElementList[3].WA_PRELIEVO :=0;
	WorkAreaProductionList[3].PElementList[4].WA_PRELIEVO :=0;
	WorkAreaProductionList[3].PElementList[5].WA_PRELIEVO :=0;
	WorkAreaProductionList[3].PElementList[6].WA_PRELIEVO :=0;
							 //(WA dove viene fatto il deposito con 5 lastre da spostare)
	WorkAreaProductionList[3].PElementList[1].WA_DEPOSITO :=0;
	WorkAreaProductionList[3].PElementList[2].WA_DEPOSITO :=0;
	WorkAreaProductionList[3].PElementList[3].WA_DEPOSITO :=0;
	WorkAreaProductionList[3].PElementList[4].WA_DEPOSITO :=0;
	WorkAreaProductionList[3].PElementList[5].WA_DEPOSITO :=0;
	WorkAreaProductionList[3].PElementList[6].WA_DEPOSITO :=0;
//Work Area Production List 4
	WorkAreaProductionList[4].PElementList[1].WA_PRELIEVO :=0;
	WorkAreaProductionList[4].PElementList[2].WA_PRELIEVO :=0;
	WorkAreaProductionList[4].PElementList[3].WA_PRELIEVO :=0;
	WorkAreaProductionList[4].PElementList[4].WA_PRELIEVO :=0;
	WorkAreaProductionList[4].PElementList[5].WA_PRELIEVO :=0;
		
	WorkAreaProductionList[4].PElementList[1].WA_DEPOSITO :=0;
	WorkAreaProductionList[4].PElementList[2].WA_DEPOSITO :=0;
	WorkAreaProductionList[4].PElementList[3].WA_DEPOSITO :=0;
	WorkAreaProductionList[4].PElementList[4].WA_DEPOSITO :=0;
	WorkAreaProductionList[4].PElementList[5].WA_DEPOSITO :=0;	
	
// TEST SE LISTA E' ATTIVATA
	ActualPickingListFromHMI[1].State :=0;//Ordine postazioni 1..8 in lavoro
	ActualPickingListFromHMI[2].State :=0;//Ordine postazioni 1..4 in lavoro
	ActualPickingListFromHMI[3].State :=0;//Ordine postazioni 5..8 in lavoro
		
	HMI_WorkAreaDataPicking_1_8 := 0;//Ordine postazioni 1..8 in lavoro
	HMI_WorkAreaDataPicking_1_4 := 0;//Ordine postazioni 1..4 in lavoro
	HMI_WorkAreaDataPicking_5_8 := 0;//Ordine postazioni 5..8 in lavoro
*)	
END_IF


]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="TFMachinePalletizerMain">
      <LineId Id="1556" Count="0" />
      <LineId Id="1544" Count="1" />
      <LineId Id="1558" Count="2" />
      <LineId Id="1547" Count="0" />
      <LineId Id="1552" Count="0" />
      <LineId Id="1554" Count="0" />
      <LineId Id="1561" Count="0" />
      <LineId Id="1766" Count="0" />
      <LineId Id="1689" Count="0" />
      <LineId Id="1768" Count="2" />
      <LineId Id="1619" Count="2" />
      <LineId Id="1618" Count="0" />
      <LineId Id="1110" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._01_Init">
      <LineId Id="1929" Count="2" />
      <LineId Id="1927" Count="0" />
      <LineId Id="1938" Count="0" />
      <LineId Id="1947" Count="3" />
      <LineId Id="1952" Count="0" />
      <LineId Id="1954" Count="1" />
      <LineId Id="1953" Count="0" />
      <LineId Id="1956" Count="0" />
      <LineId Id="1958" Count="2" />
      <LineId Id="1984" Count="0" />
      <LineId Id="1981" Count="0" />
      <LineId Id="1983" Count="0" />
      <LineId Id="1982" Count="0" />
      <LineId Id="1961" Count="0" />
      <LineId Id="1957" Count="0" />
      <LineId Id="1932" Count="0" />
      <LineId Id="1935" Count="0" />
      <LineId Id="1933" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="1852" Count="0" />
      <LineId Id="1801" Count="0" />
      <LineId Id="1803" Count="0" />
      <LineId Id="1780" Count="1" />
      <LineId Id="1787" Count="0" />
      <LineId Id="1851" Count="0" />
      <LineId Id="1900" Count="0" />
      <LineId Id="1902" Count="0" />
      <LineId Id="1901" Count="0" />
      <LineId Id="1973" Count="1" />
      <LineId Id="1977" Count="3" />
      <LineId Id="1903" Count="0" />
      <LineId Id="1788" Count="0" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1804" Count="0" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1936" Count="0" />
      <LineId Id="1925" Count="0" />
      <LineId Id="1905" Count="0" />
      <LineId Id="1923" Count="0" />
      <LineId Id="1922" Count="0" />
      <LineId Id="1924" Count="0" />
      <LineId Id="1906" Count="0" />
      <LineId Id="1394" Count="1" />
      <LineId Id="1799" Count="0" />
      <LineId Id="1396" Count="2" />
      <LineId Id="1795" Count="0" />
      <LineId Id="1400" Count="0" />
      <LineId Id="1797" Count="0" />
      <LineId Id="1764" Count="0" />
      <LineId Id="1766" Count="2" />
      <LineId Id="1763" Count="0" />
      <LineId Id="1897" Count="2" />
      <LineId Id="1407" Count="3" />
      <LineId Id="1444" Count="65" />
      <LineId Id="1840" Count="0" />
      <LineId Id="1511" Count="2" />
      <LineId Id="1516" Count="4" />
      <LineId Id="1525" Count="2" />
      <LineId Id="1531" Count="4" />
      <LineId Id="1538" Count="2" />
      <LineId Id="1544" Count="4" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1853" Count="6" />
      <LineId Id="1564" Count="2" />
      <LineId Id="1570" Count="4" />
      <LineId Id="1839" Count="0" />
      <LineId Id="1578" Count="1" />
      <LineId Id="1582" Count="3" />
      <LineId Id="1896" Count="0" />
      <LineId Id="1939" Count="0" />
      <LineId Id="1941" Count="5" />
      <LineId Id="1940" Count="0" />
      <LineId Id="1962" Count="0" />
      <LineId Id="1966" Count="6" />
      <LineId Id="1911" Count="0" />
      <LineId Id="1965" Count="0" />
      <LineId Id="999" Count="1" />
      <LineId Id="1002" Count="0" />
      <LineId Id="1004" Count="2" />
      <LineId Id="1008" Count="0" />
      <LineId Id="1010" Count="2" />
      <LineId Id="1014" Count="0" />
      <LineId Id="1860" Count="0" />
      <LineId Id="1862" Count="2" />
      <LineId Id="1870" Count="1" />
      <LineId Id="1891" Count="0" />
      <LineId Id="1919" Count="1" />
      <LineId Id="1875" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="792" Count="0" />
      <LineId Id="776" Count="0" />
      <LineId Id="778" Count="2" />
      <LineId Id="782" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="982" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1213" Count="2" />
      <LineId Id="1658" Count="1" />
      <LineId Id="1217" Count="0" />
      <LineId Id="1341" Count="0" />
      <LineId Id="1219" Count="11" />
      <LineId Id="1662" Count="1" />
      <LineId Id="1232" Count="3" />
      <LineId Id="1841" Count="0" />
      <LineId Id="1850" Count="0" />
      <LineId Id="1847" Count="2" />
      <LineId Id="1865" Count="4" />
      <LineId Id="1842" Count="0" />
      <LineId Id="1236" Count="1" />
      <LineId Id="1349" Count="0" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1724" Count="38" />
      <LineId Id="1685" Count="0" />
      <LineId Id="1665" Count="0" />
      <LineId Id="1669" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="585" Count="6" />
      <LineId Id="1820" Count="5" />
      <LineId Id="1818" Count="1" />
      <LineId Id="1817" Count="0" />
      <LineId Id="601" Count="46" />
      <LineId Id="1826" Count="1" />
      <LineId Id="1837" Count="0" />
      <LineId Id="648" Count="3" />
      <LineId Id="1835" Count="0" />
      <LineId Id="1828" Count="0" />
      <LineId Id="1836" Count="0" />
      <LineId Id="1831" Count="2" />
      <LineId Id="1829" Count="1" />
      <LineId Id="1834" Count="0" />
      <LineId Id="652" Count="1" />
      <LineId Id="1843" Count="0" />
      <LineId Id="654" Count="26" />
      <LineId Id="683" Count="1" />
      <LineId Id="1846" Count="0" />
      <LineId Id="685" Count="16" />
      <LineId Id="1769" Count="0" />
      <LineId Id="703" Count="31" />
      <LineId Id="1770" Count="3" />
      <LineId Id="739" Count="12" />
      <LineId Id="1774" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._02_LeggiInput">
      <LineId Id="32" Count="2" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="451" Count="1" />
      <LineId Id="454" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="459" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="461" Count="1" />
      <LineId Id="155" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="441" Count="8" />
      <LineId Id="440" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="476" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="106" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="463" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="218" Count="15" />
      <LineId Id="365" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="255" Count="3" />
      <LineId Id="260" Count="3" />
      <LineId Id="265" Count="2" />
      <LineId Id="240" Count="0" />
      <LineId Id="242" Count="3" />
      <LineId Id="466" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="474" Count="1" />
      <LineId Id="469" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="247" Count="2" />
      <LineId Id="367" Count="0" />
      <LineId Id="317" Count="16" />
      <LineId Id="338" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="298" Count="3" />
      <LineId Id="339" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="310" Count="3" />
      <LineId Id="340" Count="0" />
      <LineId Id="334" Count="3" />
      <LineId Id="309" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="395" Count="17" />
      <LineId Id="414" Count="5" />
      <LineId Id="422" Count="5" />
      <LineId Id="429" Count="5" />
      <LineId Id="436" Count="2" />
      <LineId Id="371" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="491" Count="1" />
      <LineId Id="480" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="483" Count="1" />
      <LineId Id="489" Count="1" />
      <LineId Id="488" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="175" Count="3" />
      <LineId Id="174" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="168" Count="5" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._03_Modules">
      <LineId Id="8259" Count="4" />
      <LineId Id="9046" Count="0" />
      <LineId Id="9045" Count="0" />
      <LineId Id="9108" Count="3" />
      <LineId Id="9057" Count="0" />
      <LineId Id="9047" Count="0" />
      <LineId Id="9049" Count="2" />
      <LineId Id="9048" Count="0" />
      <LineId Id="9107" Count="0" />
      <LineId Id="8274" Count="1" />
      <LineId Id="8982" Count="0" />
      <LineId Id="8981" Count="0" />
      <LineId Id="8276" Count="1" />
      <LineId Id="8279" Count="0" />
      <LineId Id="8286" Count="0" />
      <LineId Id="8932" Count="12" />
      <LineId Id="8287" Count="105" />
      <LineId Id="9078" Count="1" />
      <LineId Id="9082" Count="0" />
      <LineId Id="9081" Count="0" />
      <LineId Id="9080" Count="0" />
      <LineId Id="8393" Count="6" />
      <LineId Id="8984" Count="3" />
      <LineId Id="8990" Count="2" />
      <LineId Id="8989" Count="0" />
      <LineId Id="8400" Count="3" />
      <LineId Id="8996" Count="0" />
      <LineId Id="8993" Count="0" />
      <LineId Id="8995" Count="0" />
      <LineId Id="8994" Count="0" />
      <LineId Id="8404" Count="5" />
      <LineId Id="8999" Count="0" />
      <LineId Id="8997" Count="0" />
      <LineId Id="9000" Count="0" />
      <LineId Id="8998" Count="0" />
      <LineId Id="8410" Count="4" />
      <LineId Id="9006" Count="1" />
      <LineId Id="9141" Count="0" />
      <LineId Id="9009" Count="0" />
      <LineId Id="9011" Count="0" />
      <LineId Id="9013" Count="0" />
      <LineId Id="9012" Count="0" />
      <LineId Id="9014" Count="4" />
      <LineId Id="9010" Count="0" />
      <LineId Id="9020" Count="0" />
      <LineId Id="9019" Count="0" />
      <LineId Id="9021" Count="2" />
      <LineId Id="9025" Count="1" />
      <LineId Id="9024" Count="0" />
      <LineId Id="9113" Count="0" />
      <LineId Id="9115" Count="0" />
      <LineId Id="9114" Count="0" />
      <LineId Id="9117" Count="0" />
      <LineId Id="9116" Count="0" />
      <LineId Id="9119" Count="2" />
      <LineId Id="9165" Count="0" />
      <LineId Id="9118" Count="0" />
      <LineId Id="9112" Count="0" />
      <LineId Id="9028" Count="2" />
      <LineId Id="9032" Count="3" />
      <LineId Id="9027" Count="0" />
      <LineId Id="9039" Count="0" />
      <LineId Id="9038" Count="0" />
      <LineId Id="9157" Count="4" />
      <LineId Id="9043" Count="1" />
      <LineId Id="9123" Count="2" />
      <LineId Id="9143" Count="1" />
      <LineId Id="9166" Count="6" />
      <LineId Id="9145" Count="1" />
      <LineId Id="9005" Count="0" />
      <LineId Id="8415" Count="14" />
      <LineId Id="9097" Count="0" />
      <LineId Id="9096" Count="0" />
      <LineId Id="8430" Count="3" />
      <LineId Id="9126" Count="0" />
      <LineId Id="9156" Count="0" />
      <LineId Id="8435" Count="24" />
      <LineId Id="9151" Count="0" />
      <LineId Id="9150" Count="0" />
      <LineId Id="9100" Count="0" />
      <LineId Id="9099" Count="0" />
      <LineId Id="9149" Count="0" />
      <LineId Id="9098" Count="0" />
      <LineId Id="8460" Count="22" />
      <LineId Id="9129" Count="0" />
      <LineId Id="9162" Count="0" />
      <LineId Id="8484" Count="31" />
      <LineId Id="9093" Count="2" />
      <LineId Id="9153" Count="0" />
      <LineId Id="9092" Count="0" />
      <LineId Id="8516" Count="12" />
      <LineId Id="8964" Count="1" />
      <LineId Id="9133" Count="0" />
      <LineId Id="9135" Count="1" />
      <LineId Id="8531" Count="20" />
      <LineId Id="9137" Count="0" />
      <LineId Id="8552" Count="33" />
      <LineId Id="9090" Count="1" />
      <LineId Id="9147" Count="0" />
      <LineId Id="9089" Count="0" />
      <LineId Id="8586" Count="18" />
      <LineId Id="9087" Count="0" />
      <LineId Id="9002" Count="0" />
      <LineId Id="9155" Count="0" />
      <LineId Id="9154" Count="0" />
      <LineId Id="9088" Count="0" />
      <LineId Id="9003" Count="1" />
      <LineId Id="9085" Count="1" />
      <LineId Id="8605" Count="56" />
      <LineId Id="8973" Count="0" />
      <LineId Id="8976" Count="3" />
      <LineId Id="8975" Count="0" />
      <LineId Id="8663" Count="73" />
      <LineId Id="8740" Count="46" />
      <LineId Id="8788" Count="6" />
      <LineId Id="8945" Count="0" />
      <LineId Id="8947" Count="16" />
      <LineId Id="8795" Count="0" />
      <LineId Id="8946" Count="0" />
      <LineId Id="8796" Count="55" />
      <LineId Id="9059" Count="1" />
      <LineId Id="8852" Count="4" />
      <LineId Id="9062" Count="0" />
      <LineId Id="9061" Count="0" />
      <LineId Id="8857" Count="5" />
      <LineId Id="9064" Count="1" />
      <LineId Id="8863" Count="4" />
      <LineId Id="9067" Count="0" />
      <LineId Id="9066" Count="0" />
      <LineId Id="8868" Count="5" />
      <LineId Id="9069" Count="1" />
      <LineId Id="8874" Count="4" />
      <LineId Id="9072" Count="0" />
      <LineId Id="9071" Count="0" />
      <LineId Id="8879" Count="5" />
      <LineId Id="9074" Count="1" />
      <LineId Id="8885" Count="4" />
      <LineId Id="9077" Count="0" />
      <LineId Id="9076" Count="0" />
      <LineId Id="8890" Count="12" />
      <LineId Id="8912" Count="2" />
      <LineId Id="9101" Count="1" />
      <LineId Id="9104" Count="2" />
      <LineId Id="9103" Count="0" />
      <LineId Id="8915" Count="5" />
      <LineId Id="9175" Count="4" />
      <LineId Id="9174" Count="0" />
      <LineId Id="9173" Count="0" />
      <LineId Id="8966" Count="0" />
      <LineId Id="8971" Count="1" />
      <LineId Id="8967" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._04_Comunicazione">
      <LineId Id="2" Count="14" />
      <LineId Id="66" Count="0" />
      <LineId Id="18" Count="19" />
      <LineId Id="64" Count="0" />
      <LineId Id="38" Count="4" />
      <LineId Id="65" Count="0" />
      <LineId Id="43" Count="20" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._05_ManualCmds">
      <LineId Id="586" Count="242" />
      <LineId Id="926" Count="0" />
      <LineId Id="938" Count="1" />
      <LineId Id="982" Count="0" />
      <LineId Id="940" Count="3" />
      <LineId Id="960" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="997" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="996" Count="0" />
      <LineId Id="994" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="990" Count="1" />
      <LineId Id="983" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="969" Count="4" />
      <LineId Id="984" Count="0" />
      <LineId Id="1001" Count="8" />
      <LineId Id="1000" Count="0" />
      <LineId Id="988" Count="0" />
      <LineId Id="980" Count="1" />
      <LineId Id="968" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="985" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="829" Count="96" />
      <LineId Id="365" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._06_ScriviOutput">
      <LineId Id="219" Count="2" />
      <LineId Id="380" Count="2" />
      <LineId Id="222" Count="1" />
      <LineId Id="439" Count="1" />
      <LineId Id="321" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="462" Count="2" />
      <LineId Id="226" Count="2" />
      <LineId Id="488" Count="0" />
      <LineId Id="491" Count="8" />
      <LineId Id="467" Count="0" />
      <LineId Id="469" Count="6" />
      <LineId Id="500" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="476" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="445" Count="1" />
      <LineId Id="251" Count="15" />
      <LineId Id="324" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="269" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="272" Count="1" />
      <LineId Id="328" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="386" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="360" Count="2" />
      <LineId Id="505" Count="2" />
      <LineId Id="504" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="502" Count="1" />
      <LineId Id="277" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="291" Count="2" />
      <LineId Id="297" Count="0" />
      <LineId Id="338" Count="1" />
      <LineId Id="388" Count="0" />
      <LineId Id="391" Count="1" />
      <LineId Id="389" Count="0" />
      <LineId Id="393" Count="1" />
      <LineId Id="390" Count="0" />
      <LineId Id="395" Count="1" />
      <LineId Id="298" Count="0" />
      <LineId Id="418" Count="16" />
      <LineId Id="397" Count="6" />
      <LineId Id="435" Count="0" />
      <LineId Id="404" Count="13" />
      <LineId Id="436" Count="2" />
      <LineId Id="442" Count="0" />
      <LineId Id="447" Count="1" />
      <LineId Id="444" Count="0" />
      <LineId Id="441" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._07_ScriviStatus">
      <LineId Id="364" Count="70" />
      <LineId Id="586" Count="2" />
      <LineId Id="435" Count="6" />
      <LineId Id="512" Count="35" />
      <LineId Id="662" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="684" Count="0" />
      <LineId Id="669" Count="14" />
      <LineId Id="706" Count="0" />
      <LineId Id="713" Count="33" />
      <LineId Id="663" Count="0" />
      <LineId Id="685" Count="16" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1101" Count="16" />
      <LineId Id="1100" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="1118" Count="1" />
      <LineId Id="590" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="594" Count="1" />
      <LineId Id="619" Count="2" />
      <LineId Id="602" Count="0" />
      <LineId Id="622" Count="1" />
      <LineId Id="615" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="702" Count="1" />
      <LineId Id="1120" Count="0" />
      <LineId Id="1122" Count="0" />
      <LineId Id="1124" Count="0" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="624" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="653" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="1024" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="1025" Count="3" />
      <LineId Id="651" Count="0" />
      <LineId Id="638" Count="1" />
      <LineId Id="751" Count="0" />
      <LineId Id="747" Count="0" />
      <LineId Id="753" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="1030" Count="7" />
      <LineId Id="1058" Count="4" />
      <LineId Id="1043" Count="3" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1020" Count="0" />
      <LineId Id="1022" Count="1" />
      <LineId Id="1021" Count="0" />
      <LineId Id="1063" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1064" Count="3" />
      <LineId Id="604" Count="0" />
      <LineId Id="1069" Count="29" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._08_DataLogger_ACT">
      <LineId Id="2" Count="94" />
      <LineId Id="261" Count="0" />
      <LineId Id="97" Count="5" />
      <LineId Id="262" Count="0" />
      <LineId Id="103" Count="157" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._09_CalcolaFormatura">
      <LineId Id="237" Count="10" />
      <LineId Id="396" Count="0" />
      <LineId Id="248" Count="144" />
      <LineId Id="394" Count="1" />
      <LineId Id="393" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="194" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="88" Count="4" />
      <LineId Id="169" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="97" Count="2" />
      <LineId Id="106" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="108" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="207" Count="2" />
      <LineId Id="204" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="4" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="131" Count="2" />
      <LineId Id="142" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="190" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="55" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="2" Count="2" />
      <LineId Id="232" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="174" Count="6" />
      <LineId Id="213" Count="5" />
      <LineId Id="12" Count="1" />
      <LineId Id="151" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="22" Count="15" />
      <LineId Id="50" Count="0" />
      <LineId Id="38" Count="4" />
      <LineId Id="137" Count="0" />
      <LineId Id="43" Count="2" />
      <LineId Id="136" Count="0" />
      <LineId Id="46" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._10_PackModifier">
      <LineId Id="107" Count="6" />
      <LineId Id="246" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="273" Count="1" />
      <LineId Id="277" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="281" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="216" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="220" Count="2" />
      <LineId Id="237" Count="0" />
      <LineId Id="240" Count="1" />
      <LineId Id="244" Count="1" />
      <LineId Id="239" Count="0" />
      <LineId Id="223" Count="1" />
      <LineId Id="234" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="260" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="119" Count="8" />
      <LineId Id="151" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="158" Count="18" />
      <LineId Id="157" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._11_CalcolaListaProduzione">
      <LineId Id="3875" Count="0" />
      <LineId Id="4728" Count="0" />
      <LineId Id="4709" Count="0" />
      <LineId Id="3874" Count="0" />
      <LineId Id="4726" Count="0" />
      <LineId Id="2670" Count="0" />
      <LineId Id="3364" Count="0" />
      <LineId Id="3363" Count="0" />
      <LineId Id="3359" Count="0" />
      <LineId Id="3362" Count="0" />
      <LineId Id="3242" Count="0" />
      <LineId Id="3643" Count="1" />
      <LineId Id="3328" Count="0" />
      <LineId Id="3332" Count="3" />
      <LineId Id="3243" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="3539" Count="0" />
      <LineId Id="3542" Count="2" />
      <LineId Id="3657" Count="1" />
      <LineId Id="3662" Count="0" />
      <LineId Id="3660" Count="0" />
      <LineId Id="3705" Count="0" />
      <LineId Id="4773" Count="0" />
      <LineId Id="4775" Count="0" />
      <LineId Id="4774" Count="0" />
      <LineId Id="4776" Count="0" />
      <LineId Id="4801" Count="0" />
      <LineId Id="4808" Count="1" />
      <LineId Id="4777" Count="0" />
      <LineId Id="4783" Count="1" />
      <LineId Id="4733" Count="0" />
      <LineId Id="3708" Count="2" />
      <LineId Id="3810" Count="0" />
      <LineId Id="4754" Count="5" />
      <LineId Id="4811" Count="3" />
      <LineId Id="4843" Count="1" />
      <LineId Id="4753" Count="0" />
      <LineId Id="4741" Count="0" />
      <LineId Id="3707" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1168" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="3365" Count="2" />
      <LineId Id="3533" Count="0" />
      <LineId Id="3537" Count="1" />
      <LineId Id="3536" Count="0" />
      <LineId Id="1155" Count="0" />
      <LineId Id="3282" Count="9" />
      <LineId Id="3272" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1178" Count="1" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1177" Count="0" />
      <LineId Id="3368" Count="2" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1407" Count="1" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1457" Count="4" />
      <LineId Id="3870" Count="0" />
      <LineId Id="1462" Count="1" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1583" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="3545" Count="7" />
      <LineId Id="3556" Count="0" />
      <LineId Id="4821" Count="13" />
      <LineId Id="4817" Count="3" />
      <LineId Id="3557" Count="23" />
      <LineId Id="4846" Count="13" />
      <LineId Id="4845" Count="0" />
      <LineId Id="3581" Count="15" />
      <LineId Id="4861" Count="13" />
      <LineId Id="4860" Count="0" />
      <LineId Id="3597" Count="14" />
      <LineId Id="3553" Count="2" />
      <LineId Id="3612" Count="0" />
      <LineId Id="1049" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1295" Count="0" />
      <LineId Id="1265" Count="4" />
      <LineId Id="1261" Count="0" />
      <LineId Id="3672" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1256" Count="0" />
      <LineId Id="4835" Count="0" />
      <LineId Id="3100" Count="4" />
      <LineId Id="4779" Count="0" />
      <LineId Id="4790" Count="0" />
      <LineId Id="4780" Count="0" />
      <LineId Id="4799" Count="0" />
      <LineId Id="4791" Count="0" />
      <LineId Id="3105" Count="4" />
      <LineId Id="1468" Count="0" />
      <LineId Id="1050" Count="1" />
      <LineId Id="4778" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1471" Count="0" />
      <LineId Id="3086" Count="0" />
      <LineId Id="3091" Count="1" />
      <LineId Id="3090" Count="0" />
      <LineId Id="4798" Count="0" />
      <LineId Id="4800" Count="0" />
      <LineId Id="3088" Count="0" />
      <LineId Id="3093" Count="0" />
      <LineId Id="4797" Count="0" />
      <LineId Id="3089" Count="0" />
      <LineId Id="3096" Count="1" />
      <LineId Id="3087" Count="0" />
      <LineId Id="3099" Count="0" />
      <LineId Id="3669" Count="1" />
      <LineId Id="3613" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="3674" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="3617" Count="0" />
      <LineId Id="1052" Count="1" />
      <LineId Id="1042" Count="0" />
      <LineId Id="1055" Count="0" />
      <LineId Id="3654" Count="0" />
      <LineId Id="1057" Count="1" />
      <LineId Id="3655" Count="0" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="3675" Count="2" />
      <LineId Id="3614" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="1193" Count="1" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="453" Count="1" />
      <LineId Id="467" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="3664" Count="0" />
      <LineId Id="2775" Count="0" />
      <LineId Id="2781" Count="0" />
      <LineId Id="2776" Count="0" />
      <LineId Id="1229" Count="1" />
      <LineId Id="1232" Count="5" />
      <LineId Id="1584" Count="0" />
      <LineId Id="1587" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="3445" Count="0" />
      <LineId Id="3487" Count="0" />
      <LineId Id="3448" Count="1" />
      <LineId Id="3488" Count="0" />
      <LineId Id="3454" Count="0" />
      <LineId Id="3451" Count="0" />
      <LineId Id="3489" Count="0" />
      <LineId Id="3455" Count="0" />
      <LineId Id="4781" Count="0" />
      <LineId Id="3453" Count="0" />
      <LineId Id="3490" Count="0" />
      <LineId Id="3456" Count="0" />
      <LineId Id="4785" Count="0" />
      <LineId Id="3446" Count="0" />
      <LineId Id="3444" Count="0" />
      <LineId Id="456" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="458" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="460" Count="1" />
      <LineId Id="2719" Count="0" />
      <LineId Id="2731" Count="0" />
      <LineId Id="2730" Count="0" />
      <LineId Id="2743" Count="9" />
      <LineId Id="2787" Count="11" />
      <LineId Id="2737" Count="1" />
      <LineId Id="2753" Count="10" />
      <LineId Id="3692" Count="0" />
      <LineId Id="3666" Count="0" />
      <LineId Id="3689" Count="0" />
      <LineId Id="3688" Count="0" />
      <LineId Id="2739" Count="0" />
      <LineId Id="2742" Count="0" />
      <LineId Id="2764" Count="10" />
      <LineId Id="4842" Count="0" />
      <LineId Id="2785" Count="0" />
      <LineId Id="4804" Count="1" />
      <LineId Id="2729" Count="0" />
      <LineId Id="3443" Count="0" />
      <LineId Id="462" Count="1" />
      <LineId Id="1246" Count="0" />
      <LineId Id="464" Count="1" />
      <LineId Id="2799" Count="10" />
      <LineId Id="3491" Count="13" />
      <LineId Id="2810" Count="9" />
      <LineId Id="2878" Count="37" />
      <LineId Id="4772" Count="0" />
      <LineId Id="3384" Count="0" />
      <LineId Id="3693" Count="0" />
      <LineId Id="2916" Count="12" />
      <LineId Id="4841" Count="0" />
      <LineId Id="2929" Count="0" />
      <LineId Id="4802" Count="1" />
      <LineId Id="2872" Count="0" />
      <LineId Id="3442" Count="0" />
      <LineId Id="2873" Count="4" />
      <LineId Id="2782" Count="0" />
      <LineId Id="2777" Count="0" />
      <LineId Id="3505" Count="13" />
      <LineId Id="1340" Count="0" />
      <LineId Id="1343" Count="7" />
      <LineId Id="3686" Count="0" />
      <LineId Id="3685" Count="0" />
      <LineId Id="3687" Count="0" />
      <LineId Id="3386" Count="0" />
      <LineId Id="1351" Count="8" />
      <LineId Id="2982" Count="37" />
      <LineId Id="3697" Count="0" />
      <LineId Id="3385" Count="0" />
      <LineId Id="3695" Count="1" />
      <LineId Id="3694" Count="0" />
      <LineId Id="3020" Count="12" />
      <LineId Id="4840" Count="0" />
      <LineId Id="3033" Count="0" />
      <LineId Id="4795" Count="1" />
      <LineId Id="1424" Count="0" />
      <LineId Id="4761" Count="0" />
      <LineId Id="3440" Count="0" />
      <LineId Id="1369" Count="3" />
      <LineId Id="1341" Count="0" />
      <LineId Id="2783" Count="0" />
      <LineId Id="2778" Count="0" />
      <LineId Id="2673" Count="7" />
      <LineId Id="3665" Count="0" />
      <LineId Id="3855" Count="0" />
      <LineId Id="4838" Count="0" />
      <LineId Id="3858" Count="0" />
      <LineId Id="3520" Count="11" />
      <LineId Id="4787" Count="2" />
      <LineId Id="3532" Count="0" />
      <LineId Id="2681" Count="8" />
      <LineId Id="3034" Count="37" />
      <LineId Id="3700" Count="0" />
      <LineId Id="3387" Count="0" />
      <LineId Id="3698" Count="1" />
      <LineId Id="3072" Count="12" />
      <LineId Id="4839" Count="0" />
      <LineId Id="3085" Count="0" />
      <LineId Id="4806" Count="1" />
      <LineId Id="2713" Count="0" />
      <LineId Id="4793" Count="0" />
      <LineId Id="4792" Count="0" />
      <LineId Id="3439" Count="0" />
      <LineId Id="2714" Count="4" />
      <LineId Id="1342" Count="0" />
      <LineId Id="2780" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="3667" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1399" Count="0" />
      <LineId Id="3678" Count="4" />
      <LineId Id="3853" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="3110" Count="0" />
      <LineId Id="3668" Count="0" />
      <LineId Id="3683" Count="1" />
      <LineId Id="3116" Count="0" />
      <LineId Id="3371" Count="0" />
      <LineId Id="3375" Count="7" />
      <LineId Id="3374" Count="0" />
      <LineId Id="3156" Count="11" />
      <LineId Id="3119" Count="0" />
      <LineId Id="3169" Count="0" />
      <LineId Id="3130" Count="20" />
      <LineId Id="3118" Count="0" />
      <LineId Id="4760" Count="0" />
      <LineId Id="3113" Count="0" />
      <LineId Id="3115" Count="0" />
      <LineId Id="765" Count="23" />
      <LineId Id="3869" Count="0" />
      <LineId Id="789" Count="20" />
      <LineId Id="3623" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="3619" Count="3" />
      <LineId Id="3618" Count="0" />
      <LineId Id="812" Count="2" />
      <LineId Id="836" Count="1" />
      <LineId Id="4751" Count="1" />
      <LineId Id="4748" Count="0" />
      <LineId Id="3653" Count="0" />
      <LineId Id="4743" Count="0" />
      <LineId Id="839" Count="2" />
      <LineId Id="3626" Count="3" />
      <LineId Id="844" Count="1" />
      <LineId Id="4762" Count="0" />
      <LineId Id="846" Count="0" />
      <LineId Id="4765" Count="0" />
      <LineId Id="847" Count="5" />
      <LineId Id="4763" Count="0" />
      <LineId Id="853" Count="9" />
      <LineId Id="4766" Count="0" />
      <LineId Id="863" Count="6" />
      <LineId Id="1373" Count="0" />
      <LineId Id="3701" Count="0" />
      <LineId Id="3174" Count="0" />
      <LineId Id="3181" Count="0" />
      <LineId Id="3184" Count="0" />
      <LineId Id="3188" Count="0" />
      <LineId Id="3190" Count="0" />
      <LineId Id="4837" Count="0" />
      <LineId Id="3185" Count="1" />
      <LineId Id="3178" Count="0" />
      <LineId Id="3191" Count="0" />
      <LineId Id="871" Count="1" />
      <LineId Id="874" Count="3" />
      <LineId Id="3860" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="3630" Count="0" />
      <LineId Id="879" Count="13" />
      <LineId Id="3871" Count="0" />
      <LineId Id="893" Count="1" />
      <LineId Id="1270" Count="0" />
      <LineId Id="895" Count="1" />
      <LineId Id="1223" Count="0" />
      <LineId Id="897" Count="4" />
      <LineId Id="1271" Count="0" />
      <LineId Id="1275" Count="0" />
      <LineId Id="1273" Count="0" />
      <LineId Id="902" Count="3" />
      <LineId Id="907" Count="13" />
      <LineId Id="3624" Count="0" />
      <LineId Id="3631" Count="0" />
      <LineId Id="3625" Count="0" />
      <LineId Id="921" Count="1" />
      <LineId Id="3632" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="1103" Count="0" />
      <LineId Id="3336" Count="0" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1060" Count="0" />
      <LineId Id="2671" Count="0" />
      <LineId Id="3383" Count="0" />
      <LineId Id="1039" Count="0" />
      <LineId Id="924" Count="0" />
      <LineId Id="1548" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="3702" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="3649" Count="0" />
      <LineId Id="1038" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1083" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1077" Count="1" />
      <LineId Id="1080" Count="2" />
      <LineId Id="1062" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1091" Count="1" />
      <LineId Id="1094" Count="2" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1293" Count="0" />
      <LineId Id="1291" Count="0" />
      <LineId Id="1281" Count="0" />
      <LineId Id="1609" Count="2" />
      <LineId Id="1606" Count="0" />
      <LineId Id="1332" Count="0" />
      <LineId Id="1328" Count="0" />
      <LineId Id="1592" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1593" Count="2" />
      <LineId Id="1623" Count="1" />
      <LineId Id="1628" Count="0" />
      <LineId Id="1625" Count="1" />
      <LineId Id="1622" Count="0" />
      <LineId Id="1330" Count="1" />
      <LineId Id="1327" Count="0" />
      <LineId Id="1337" Count="0" />
      <LineId Id="1612" Count="0" />
      <LineId Id="1338" Count="0" />
      <LineId Id="1613" Count="2" />
      <LineId Id="1336" Count="0" />
      <LineId Id="1287" Count="1" />
      <LineId Id="3535" Count="0" />
      <LineId Id="1617" Count="3" />
      <LineId Id="1616" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="311" Count="1" />
      <LineId Id="3842" Count="2" />
      <LineId Id="3829" Count="0" />
      <LineId Id="3834" Count="0" />
      <LineId Id="3837" Count="0" />
      <LineId Id="3841" Count="0" />
      <LineId Id="3840" Count="0" />
      <LineId Id="3839" Count="0" />
      <LineId Id="3838" Count="0" />
      <LineId Id="3836" Count="0" />
      <LineId Id="3831" Count="1" />
      <LineId Id="1475" Count="0" />
      <LineId Id="3651" Count="1" />
      <LineId Id="4738" Count="2" />
      <LineId Id="1493" Count="0" />
      <LineId Id="1522" Count="0" />
      <LineId Id="3862" Count="0" />
      <LineId Id="1523" Count="1" />
      <LineId Id="1559" Count="0" />
      <LineId Id="3808" Count="0" />
      <LineId Id="1560" Count="5" />
      <LineId Id="3742" Count="1" />
      <LineId Id="3718" Count="0" />
      <LineId Id="3720" Count="0" />
      <LineId Id="3730" Count="11" />
      <LineId Id="3719" Count="0" />
      <LineId Id="3827" Count="0" />
      <LineId Id="1539" Count="2" />
      <LineId Id="3863" Count="0" />
      <LineId Id="1542" Count="0" />
      <LineId Id="4771" Count="0" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1629" Count="0" />
      <LineId Id="1544" Count="0" />
      <LineId Id="1549" Count="0" />
      <LineId Id="3192" Count="0" />
      <LineId Id="4736" Count="0" />
      <LineId Id="1631" Count="1" />
      <LineId Id="3851" Count="0" />
      <LineId Id="1545" Count="1" />
      <LineId Id="3846" Count="1" />
      <LineId Id="3194" Count="2" />
      <LineId Id="3714" Count="1" />
      <LineId Id="3712" Count="0" />
      <LineId Id="3197" Count="1" />
      <LineId Id="3872" Count="0" />
      <LineId Id="3199" Count="0" />
      <LineId Id="4767" Count="0" />
      <LineId Id="3809" Count="0" />
      <LineId Id="3200" Count="5" />
      <LineId Id="3768" Count="1" />
      <LineId Id="3767" Count="0" />
      <LineId Id="3761" Count="0" />
      <LineId Id="3795" Count="12" />
      <LineId Id="3762" Count="0" />
      <LineId Id="3766" Count="0" />
      <LineId Id="3225" Count="2" />
      <LineId Id="3861" Count="0" />
      <LineId Id="3228" Count="0" />
      <LineId Id="4770" Count="0" />
      <LineId Id="3229" Count="0" />
      <LineId Id="4769" Count="0" />
      <LineId Id="3828" Count="0" />
      <LineId Id="3231" Count="3" />
      <LineId Id="4735" Count="0" />
      <LineId Id="3235" Count="0" />
      <LineId Id="3845" Count="0" />
      <LineId Id="3236" Count="0" />
      <LineId Id="3849" Count="1" />
      <LineId Id="3717" Count="0" />
      <LineId Id="3238" Count="0" />
      <LineId Id="4836" Count="0" />
      <LineId Id="3193" Count="0" />
      <LineId Id="3645" Count="0" />
      <LineId Id="1547" Count="0" />
      <LineId Id="3240" Count="0" />
      <LineId Id="3388" Count="0" />
      <LineId Id="3633" Count="0" />
      <LineId Id="3639" Count="3" />
      <LineId Id="3638" Count="0" />
      <LineId Id="3395" Count="0" />
      <LineId Id="3435" Count="3" />
      <LineId Id="3432" Count="0" />
      <LineId Id="3396" Count="35" />
      <LineId Id="3389" Count="5" />
      <LineId Id="1476" Count="0" />
      <LineId Id="1480" Count="12" />
      <LineId Id="313" Count="2" />
      <LineId Id="308" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._11_CalcolaListaProduzioneNew">
      <LineId Id="5131" Count="58" />
      <LineId Id="6480" Count="0" />
      <LineId Id="6564" Count="2" />
      <LineId Id="6563" Count="0" />
      <LineId Id="6485" Count="0" />
      <LineId Id="6484" Count="0" />
      <LineId Id="6490" Count="0" />
      <LineId Id="5190" Count="0" />
      <LineId Id="6234" Count="0" />
      <LineId Id="5191" Count="60" />
      <LineId Id="6444" Count="13" />
      <LineId Id="5266" Count="25" />
      <LineId Id="6492" Count="13" />
      <LineId Id="6491" Count="0" />
      <LineId Id="5292" Count="15" />
      <LineId Id="6507" Count="13" />
      <LineId Id="6506" Count="0" />
      <LineId Id="5308" Count="36" />
      <LineId Id="6458" Count="0" />
      <LineId Id="5346" Count="77" />
      <LineId Id="6561" Count="1" />
      <LineId Id="6586" Count="0" />
      <LineId Id="5424" Count="27" />
      <LineId Id="6526" Count="0" />
      <LineId Id="5452" Count="3" />
      <LineId Id="5458" Count="0" />
      <LineId Id="5460" Count="0" />
      <LineId Id="6653" Count="6" />
      <LineId Id="6533" Count="0" />
      <LineId Id="5461" Count="73" />
      <LineId Id="6560" Count="0" />
      <LineId Id="5535" Count="15" />
      <LineId Id="6527" Count="0" />
      <LineId Id="5551" Count="3" />
      <LineId Id="5557" Count="0" />
      <LineId Id="6539" Count="0" />
      <LineId Id="6534" Count="0" />
      <LineId Id="6647" Count="5" />
      <LineId Id="6639" Count="0" />
      <LineId Id="6646" Count="0" />
      <LineId Id="6568" Count="0" />
      <LineId Id="5560" Count="73" />
      <LineId Id="6559" Count="0" />
      <LineId Id="5634" Count="15" />
      <LineId Id="6529" Count="1" />
      <LineId Id="5651" Count="3" />
      <LineId Id="6544" Count="1" />
      <LineId Id="6660" Count="6" />
      <LineId Id="6540" Count="0" />
      <LineId Id="5660" Count="70" />
      <LineId Id="6558" Count="0" />
      <LineId Id="5731" Count="21" />
      <LineId Id="5755" Count="0" />
      <LineId Id="5757" Count="0" />
      <LineId Id="6587" Count="2" />
      <LineId Id="6579" Count="0" />
      <LineId Id="6600" Count="0" />
      <LineId Id="6605" Count="0" />
      <LineId Id="6601" Count="0" />
      <LineId Id="6627" Count="0" />
      <LineId Id="6607" Count="0" />
      <LineId Id="6628" Count="0" />
      <LineId Id="6625" Count="0" />
      <LineId Id="6629" Count="0" />
      <LineId Id="6626" Count="0" />
      <LineId Id="6581" Count="0" />
      <LineId Id="6630" Count="0" />
      <LineId Id="6582" Count="0" />
      <LineId Id="6613" Count="4" />
      <LineId Id="6612" Count="0" />
      <LineId Id="6583" Count="1" />
      <LineId Id="6619" Count="4" />
      <LineId Id="6618" Count="0" />
      <LineId Id="6585" Count="0" />
      <LineId Id="6580" Count="0" />
      <LineId Id="6597" Count="1" />
      <LineId Id="6576" Count="1" />
      <LineId Id="6547" Count="0" />
      <LineId Id="5758" Count="80" />
      <LineId Id="5105" Count="0" />
      <LineId Id="5855" Count="1" />
      <LineId Id="6257" Count="0" />
      <LineId Id="6323" Count="0" />
      <LineId Id="6325" Count="1" />
      <LineId Id="6330" Count="0" />
      <LineId Id="6466" Count="1" />
      <LineId Id="6331" Count="0" />
      <LineId Id="6267" Count="0" />
      <LineId Id="6259" Count="7" />
      <LineId Id="5993" Count="0" />
      <LineId Id="6270" Count="0" />
      <LineId Id="6461" Count="0" />
      <LineId Id="6274" Count="0" />
      <LineId Id="6276" Count="0" />
      <LineId Id="6268" Count="0" />
      <LineId Id="6278" Count="0" />
      <LineId Id="6468" Count="1" />
      <LineId Id="6282" Count="0" />
      <LineId Id="6284" Count="0" />
      <LineId Id="6269" Count="0" />
      <LineId Id="6277" Count="0" />
      <LineId Id="6285" Count="0" />
      <LineId Id="5994" Count="0" />
      <LineId Id="6289" Count="0" />
      <LineId Id="6287" Count="1" />
      <LineId Id="6286" Count="0" />
      <LineId Id="6293" Count="0" />
      <LineId Id="6291" Count="0" />
      <LineId Id="6294" Count="0" />
      <LineId Id="6292" Count="0" />
      <LineId Id="6296" Count="1" />
      <LineId Id="6295" Count="0" />
      <LineId Id="6298" Count="0" />
      <LineId Id="6300" Count="4" />
      <LineId Id="6299" Count="0" />
      <LineId Id="6306" Count="16" />
      <LineId Id="6305" Count="0" />
      <LineId Id="6464" Count="0" />
      <LineId Id="6332" Count="0" />
      <LineId Id="6258" Count="0" />
      <LineId Id="5995" Count="0" />
      <LineId Id="6470" Count="0" />
      <LineId Id="6327" Count="1" />
      <LineId Id="6333" Count="0" />
      <LineId Id="6419" Count="0" />
      <LineId Id="6335" Count="1" />
      <LineId Id="6338" Count="19" />
      <LineId Id="6334" Count="0" />
      <LineId Id="6361" Count="2" />
      <LineId Id="6359" Count="0" />
      <LineId Id="6671" Count="1" />
      <LineId Id="6670" Count="0" />
      <LineId Id="6669" Count="0" />
      <LineId Id="6668" Count="0" />
      <LineId Id="6365" Count="10" />
      <LineId Id="6465" Count="0" />
      <LineId Id="6376" Count="1" />
      <LineId Id="6360" Count="0" />
      <LineId Id="6378" Count="0" />
      <LineId Id="6358" Count="0" />
      <LineId Id="6329" Count="0" />
      <LineId Id="6379" Count="1" />
      <LineId Id="6382" Count="7" />
      <LineId Id="6427" Count="0" />
      <LineId Id="6473" Count="0" />
      <LineId Id="6472" Count="0" />
      <LineId Id="6421" Count="0" />
      <LineId Id="6423" Count="3" />
      <LineId Id="6422" Count="0" />
      <LineId Id="6428" Count="0" />
      <LineId Id="6391" Count="8" />
      <LineId Id="6471" Count="0" />
      <LineId Id="6400" Count="18" />
      <LineId Id="6381" Count="0" />
      <LineId Id="6429" Count="14" />
      <LineId Id="5998" Count="0" />
      <LineId Id="5853" Count="0" />
      <LineId Id="5999" Count="4" />
      <LineId Id="6006" Count="4" />
      <LineId Id="6474" Count="1" />
      <LineId Id="6149" Count="0" />
      <LineId Id="6476" Count="0" />
      <LineId Id="6157" Count="24" />
      <LineId Id="6463" Count="0" />
      <LineId Id="6182" Count="21" />
      <LineId Id="6208" Count="7" />
      <LineId Id="6217" Count="1" />
      <LineId Id="6481" Count="0" />
      <LineId Id="6483" Count="0" />
      <LineId Id="6482" Count="0" />
      <LineId Id="6219" Count="1" />
      <LineId Id="6478" Count="0" />
      <LineId Id="6225" Count="3" />
      <LineId Id="6145" Count="0" />
      <LineId Id="6487" Count="2" />
      <LineId Id="6486" Count="0" />
      <LineId Id="6146" Count="0" />
      <LineId Id="6479" Count="0" />
      <LineId Id="6005" Count="0" />
      <LineId Id="5854" Count="0" />
      <LineId Id="5852" Count="0" />
      <LineId Id="5841" Count="7" />
      <LineId Id="5839" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1086" Count="0" />
      <LineId Id="3388" Count="0" />
      <LineId Id="3633" Count="0" />
      <LineId Id="3639" Count="1" />
      <LineId Id="3642" Count="0" />
      <LineId Id="3638" Count="0" />
      <LineId Id="3392" Count="2" />
      <LineId Id="1476" Count="0" />
      <LineId Id="1480" Count="12" />
      <LineId Id="313" Count="2" />
      <LineId Id="308" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._11_CalcolaListaProduzioneNew1">
      <LineId Id="3875" Count="0" />
      <LineId Id="4728" Count="0" />
      <LineId Id="4709" Count="0" />
      <LineId Id="3874" Count="0" />
      <LineId Id="4726" Count="0" />
      <LineId Id="2670" Count="0" />
      <LineId Id="3364" Count="0" />
      <LineId Id="3357" Count="0" />
      <LineId Id="3359" Count="0" />
      <LineId Id="3362" Count="0" />
      <LineId Id="3242" Count="0" />
      <LineId Id="3643" Count="1" />
      <LineId Id="3328" Count="0" />
      <LineId Id="3332" Count="3" />
      <LineId Id="3243" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="5106" Count="3" />
      <LineId Id="3539" Count="0" />
      <LineId Id="3542" Count="2" />
      <LineId Id="3657" Count="1" />
      <LineId Id="3662" Count="0" />
      <LineId Id="3660" Count="0" />
      <LineId Id="3705" Count="0" />
      <LineId Id="4773" Count="0" />
      <LineId Id="4775" Count="0" />
      <LineId Id="4774" Count="0" />
      <LineId Id="4776" Count="0" />
      <LineId Id="4801" Count="0" />
      <LineId Id="4808" Count="1" />
      <LineId Id="4777" Count="0" />
      <LineId Id="4783" Count="1" />
      <LineId Id="5000" Count="0" />
      <LineId Id="4733" Count="0" />
      <LineId Id="3708" Count="2" />
      <LineId Id="3810" Count="0" />
      <LineId Id="4754" Count="5" />
      <LineId Id="5006" Count="0" />
      <LineId Id="5002" Count="0" />
      <LineId Id="5005" Count="0" />
      <LineId Id="5011" Count="0" />
      <LineId Id="5008" Count="1" />
      <LineId Id="4753" Count="0" />
      <LineId Id="4741" Count="0" />
      <LineId Id="3707" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1168" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="3365" Count="2" />
      <LineId Id="3533" Count="0" />
      <LineId Id="3537" Count="1" />
      <LineId Id="3536" Count="0" />
      <LineId Id="1155" Count="0" />
      <LineId Id="3282" Count="9" />
      <LineId Id="3272" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1178" Count="1" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1177" Count="0" />
      <LineId Id="3368" Count="2" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1407" Count="1" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1457" Count="4" />
      <LineId Id="3870" Count="0" />
      <LineId Id="1462" Count="1" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1583" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="3545" Count="7" />
      <LineId Id="3556" Count="0" />
      <LineId Id="5110" Count="0" />
      <LineId Id="5114" Count="0" />
      <LineId Id="5117" Count="1" />
      <LineId Id="5115" Count="1" />
      <LineId Id="5120" Count="3" />
      <LineId Id="5126" Count="1" />
      <LineId Id="5119" Count="0" />
      <LineId Id="5112" Count="1" />
      <LineId Id="5111" Count="0" />
      <LineId Id="3557" Count="54" />
      <LineId Id="3553" Count="2" />
      <LineId Id="3612" Count="0" />
      <LineId Id="1049" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1295" Count="0" />
      <LineId Id="1265" Count="4" />
      <LineId Id="1261" Count="0" />
      <LineId Id="3672" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1256" Count="0" />
      <LineId Id="4839" Count="0" />
      <LineId Id="4837" Count="0" />
      <LineId Id="4835" Count="0" />
      <LineId Id="4840" Count="0" />
      <LineId Id="4857" Count="0" />
      <LineId Id="4856" Count="0" />
      <LineId Id="4836" Count="0" />
      <LineId Id="4818" Count="0" />
      <LineId Id="3100" Count="4" />
      <LineId Id="5130" Count="0" />
      <LineId Id="4790" Count="0" />
      <LineId Id="4780" Count="0" />
      <LineId Id="4799" Count="0" />
      <LineId Id="4791" Count="0" />
      <LineId Id="3105" Count="4" />
      <LineId Id="1468" Count="0" />
      <LineId Id="1050" Count="1" />
      <LineId Id="4778" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1471" Count="0" />
      <LineId Id="3086" Count="0" />
      <LineId Id="3091" Count="1" />
      <LineId Id="3090" Count="0" />
      <LineId Id="4798" Count="0" />
      <LineId Id="4800" Count="0" />
      <LineId Id="3088" Count="0" />
      <LineId Id="3093" Count="0" />
      <LineId Id="4797" Count="0" />
      <LineId Id="3089" Count="0" />
      <LineId Id="3096" Count="1" />
      <LineId Id="3087" Count="0" />
      <LineId Id="3099" Count="0" />
      <LineId Id="3669" Count="1" />
      <LineId Id="3613" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="3674" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="3617" Count="0" />
      <LineId Id="1052" Count="1" />
      <LineId Id="1042" Count="0" />
      <LineId Id="1055" Count="0" />
      <LineId Id="3654" Count="0" />
      <LineId Id="1057" Count="1" />
      <LineId Id="3655" Count="0" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="3675" Count="2" />
      <LineId Id="3614" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="1193" Count="1" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="453" Count="1" />
      <LineId Id="467" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="3664" Count="0" />
      <LineId Id="2775" Count="0" />
      <LineId Id="2781" Count="0" />
      <LineId Id="2776" Count="0" />
      <LineId Id="1229" Count="0" />
      <LineId Id="4810" Count="0" />
      <LineId Id="1230" Count="0" />
      <LineId Id="4811" Count="0" />
      <LineId Id="1232" Count="0" />
      <LineId Id="4812" Count="0" />
      <LineId Id="1233" Count="0" />
      <LineId Id="4813" Count="0" />
      <LineId Id="1234" Count="0" />
      <LineId Id="4814" Count="0" />
      <LineId Id="1235" Count="0" />
      <LineId Id="4815" Count="0" />
      <LineId Id="1236" Count="0" />
      <LineId Id="4816" Count="0" />
      <LineId Id="1237" Count="0" />
      <LineId Id="4817" Count="0" />
      <LineId Id="1584" Count="0" />
      <LineId Id="1587" Count="0" />
      <LineId Id="4931" Count="0" />
      <LineId Id="3446" Count="0" />
      <LineId Id="3444" Count="0" />
      <LineId Id="456" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="458" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="4821" Count="0" />
      <LineId Id="4819" Count="0" />
      <LineId Id="4822" Count="0" />
      <LineId Id="4820" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="2719" Count="0" />
      <LineId Id="2731" Count="0" />
      <LineId Id="2730" Count="0" />
      <LineId Id="2743" Count="9" />
      <LineId Id="4832" Count="1" />
      <LineId Id="2787" Count="11" />
      <LineId Id="2737" Count="1" />
      <LineId Id="2753" Count="10" />
      <LineId Id="4905" Count="1" />
      <LineId Id="4904" Count="0" />
      <LineId Id="3692" Count="0" />
      <LineId Id="3666" Count="0" />
      <LineId Id="3689" Count="0" />
      <LineId Id="3688" Count="0" />
      <LineId Id="2739" Count="0" />
      <LineId Id="2742" Count="0" />
      <LineId Id="2764" Count="10" />
      <LineId Id="4891" Count="1" />
      <LineId Id="2785" Count="0" />
      <LineId Id="4804" Count="1" />
      <LineId Id="2729" Count="0" />
      <LineId Id="3443" Count="0" />
      <LineId Id="462" Count="1" />
      <LineId Id="1246" Count="0" />
      <LineId Id="464" Count="1" />
      <LineId Id="2799" Count="10" />
      <LineId Id="3491" Count="0" />
      <LineId Id="4932" Count="0" />
      <LineId Id="3504" Count="0" />
      <LineId Id="2810" Count="7" />
      <LineId Id="4824" Count="1" />
      <LineId Id="4823" Count="0" />
      <LineId Id="2818" Count="1" />
      <LineId Id="2878" Count="37" />
      <LineId Id="4908" Count="1" />
      <LineId Id="4907" Count="0" />
      <LineId Id="4893" Count="0" />
      <LineId Id="4772" Count="0" />
      <LineId Id="3384" Count="0" />
      <LineId Id="3693" Count="0" />
      <LineId Id="2916" Count="12" />
      <LineId Id="4895" Count="1" />
      <LineId Id="2929" Count="0" />
      <LineId Id="4802" Count="1" />
      <LineId Id="2872" Count="0" />
      <LineId Id="3442" Count="0" />
      <LineId Id="2873" Count="4" />
      <LineId Id="2782" Count="0" />
      <LineId Id="2777" Count="0" />
      <LineId Id="3518" Count="0" />
      <LineId Id="1340" Count="0" />
      <LineId Id="1343" Count="7" />
      <LineId Id="4911" Count="1" />
      <LineId Id="4910" Count="0" />
      <LineId Id="4927" Count="1" />
      <LineId Id="4913" Count="0" />
      <LineId Id="3386" Count="0" />
      <LineId Id="1352" Count="5" />
      <LineId Id="4827" Count="1" />
      <LineId Id="4826" Count="0" />
      <LineId Id="1358" Count="1" />
      <LineId Id="2982" Count="37" />
      <LineId Id="3697" Count="0" />
      <LineId Id="3385" Count="0" />
      <LineId Id="3695" Count="1" />
      <LineId Id="3694" Count="0" />
      <LineId Id="3020" Count="12" />
      <LineId Id="4897" Count="1" />
      <LineId Id="3033" Count="0" />
      <LineId Id="4795" Count="1" />
      <LineId Id="1424" Count="0" />
      <LineId Id="4761" Count="0" />
      <LineId Id="3440" Count="0" />
      <LineId Id="1369" Count="3" />
      <LineId Id="1341" Count="0" />
      <LineId Id="2783" Count="0" />
      <LineId Id="2778" Count="0" />
      <LineId Id="2673" Count="7" />
      <LineId Id="4899" Count="1" />
      <LineId Id="3665" Count="0" />
      <LineId Id="3855" Count="0" />
      <LineId Id="4929" Count="1" />
      <LineId Id="3532" Count="0" />
      <LineId Id="2681" Count="6" />
      <LineId Id="4830" Count="1" />
      <LineId Id="4829" Count="0" />
      <LineId Id="2688" Count="1" />
      <LineId Id="3034" Count="37" />
      <LineId Id="4935" Count="1" />
      <LineId Id="4934" Count="0" />
      <LineId Id="3700" Count="0" />
      <LineId Id="3387" Count="0" />
      <LineId Id="3698" Count="1" />
      <LineId Id="3072" Count="12" />
      <LineId Id="4901" Count="1" />
      <LineId Id="3085" Count="0" />
      <LineId Id="4806" Count="1" />
      <LineId Id="2713" Count="0" />
      <LineId Id="4793" Count="0" />
      <LineId Id="4792" Count="0" />
      <LineId Id="3439" Count="0" />
      <LineId Id="2714" Count="4" />
      <LineId Id="1342" Count="0" />
      <LineId Id="2780" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="3667" Count="0" />
      <LineId Id="1399" Count="0" />
      <LineId Id="3678" Count="0" />
      <LineId Id="5104" Count="1" />
      <LineId Id="3679" Count="2" />
      <LineId Id="4974" Count="1" />
      <LineId Id="5131" Count="0" />
      <LineId Id="4848" Count="0" />
      <LineId Id="4858" Count="1" />
      <LineId Id="4957" Count="3" />
      <LineId Id="5101" Count="2" />
      <LineId Id="5100" Count="0" />
      <LineId Id="4964" Count="0" />
      <LineId Id="4966" Count="7" />
      <LineId Id="4956" Count="0" />
      <LineId Id="4862" Count="1" />
      <LineId Id="4890" Count="0" />
      <LineId Id="4864" Count="0" />
      <LineId Id="5132" Count="0" />
      <LineId Id="4860" Count="0" />
      <LineId Id="4937" Count="1" />
      <LineId Id="4865" Count="0" />
      <LineId Id="4977" Count="0" />
      <LineId Id="4869" Count="5" />
      <LineId Id="4879" Count="0" />
      <LineId Id="4889" Count="0" />
      <LineId Id="4876" Count="1" />
      <LineId Id="4868" Count="0" />
      <LineId Id="4979" Count="8" />
      <LineId Id="4867" Count="0" />
      <LineId Id="5013" Count="22" />
      <LineId Id="5012" Count="0" />
      <LineId Id="4999" Count="0" />
      <LineId Id="5036" Count="0" />
      <LineId Id="5038" Count="2" />
      <LineId Id="5037" Count="0" />
      <LineId Id="4989" Count="0" />
      <LineId Id="5042" Count="2" />
      <LineId Id="5041" Count="0" />
      <LineId Id="5045" Count="0" />
      <LineId Id="4866" Count="0" />
      <LineId Id="4976" Count="0" />
      <LineId Id="4861" Count="0" />
      <LineId Id="5047" Count="0" />
      <LineId Id="5051" Count="8" />
      <LineId Id="5094" Count="1" />
      <LineId Id="5093" Count="0" />
      <LineId Id="5096" Count="0" />
      <LineId Id="5060" Count="1" />
      <LineId Id="5064" Count="0" />
      <LineId Id="5091" Count="1" />
      <LineId Id="5088" Count="2" />
      <LineId Id="5067" Count="5" />
      <LineId Id="5074" Count="0" />
      <LineId Id="5076" Count="11" />
      <LineId Id="5049" Count="0" />
      <LineId Id="4988" Count="0" />
      <LineId Id="4878" Count="0" />
      <LineId Id="5262" Count="0" />
      <LineId Id="5267" Count="2" />
      <LineId Id="5266" Count="0" />
      <LineId Id="5264" Count="1" />
      <LineId Id="4851" Count="0" />
      <LineId Id="4854" Count="1" />
      <LineId Id="5136" Count="0" />
      <LineId Id="5142" Count="2" />
      <LineId Id="5137" Count="1" />
      <LineId Id="5146" Count="11" />
      <LineId Id="5223" Count="5" />
      <LineId Id="5222" Count="0" />
      <LineId Id="5174" Count="0" />
      <LineId Id="5179" Count="0" />
      <LineId Id="5181" Count="0" />
      <LineId Id="5177" Count="0" />
      <LineId Id="5180" Count="0" />
      <LineId Id="5229" Count="0" />
      <LineId Id="5192" Count="0" />
      <LineId Id="5187" Count="0" />
      <LineId Id="5182" Count="0" />
      <LineId Id="5189" Count="0" />
      <LineId Id="5195" Count="2" />
      <LineId Id="5201" Count="0" />
      <LineId Id="5178" Count="0" />
      <LineId Id="5204" Count="0" />
      <LineId Id="5221" Count="0" />
      <LineId Id="5239" Count="0" />
      <LineId Id="5237" Count="0" />
      <LineId Id="5216" Count="2" />
      <LineId Id="5175" Count="1" />
      <LineId Id="5230" Count="3" />
      <LineId Id="5163" Count="0" />
      <LineId Id="5167" Count="0" />
      <LineId Id="5171" Count="1" />
      <LineId Id="5145" Count="0" />
      <LineId Id="5139" Count="1" />
      <LineId Id="5241" Count="0" />
      <LineId Id="5259" Count="2" />
      <LineId Id="5245" Count="4" />
      <LineId Id="5253" Count="5" />
      <LineId Id="5240" Count="0" />
      <LineId Id="5141" Count="0" />
      <LineId Id="5134" Count="1" />
      <LineId Id="4852" Count="0" />
      <LineId Id="5263" Count="0" />
      <LineId Id="4844" Count="0" />
      <LineId Id="3853" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="3621" Count="1" />
      <LineId Id="3618" Count="0" />
      <LineId Id="920" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="3842" Count="2" />
      <LineId Id="3836" Count="0" />
      <LineId Id="3831" Count="1" />
      <LineId Id="4740" Count="0" />
      <LineId Id="3734" Count="0" />
      <LineId Id="3714" Count="1" />
      <LineId Id="3712" Count="0" />
      <LineId Id="3226" Count="0" />
      <LineId Id="3238" Count="0" />
      <LineId Id="1547" Count="0" />
      <LineId Id="3240" Count="0" />
      <LineId Id="3388" Count="0" />
      <LineId Id="3633" Count="0" />
      <LineId Id="3639" Count="3" />
      <LineId Id="3638" Count="0" />
      <LineId Id="3392" Count="2" />
      <LineId Id="1476" Count="0" />
      <LineId Id="1480" Count="12" />
      <LineId Id="313" Count="2" />
      <LineId Id="308" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain._11_CalcolaListaProduzioneold">
      <LineId Id="739" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="1122" Count="0" />
      <LineId Id="1633" Count="0" />
      <LineId Id="1123" Count="1" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1589" Count="0" />
      <LineId Id="1596" Count="0" />
      <LineId Id="1598" Count="0" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1168" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1154" Count="9" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1178" Count="1" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1177" Count="0" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1407" Count="1" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1457" Count="6" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1583" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1296" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="1049" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1295" Count="0" />
      <LineId Id="1265" Count="4" />
      <LineId Id="1261" Count="0" />
      <LineId Id="1264" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1256" Count="0" />
      <LineId Id="1465" Count="0" />
      <LineId Id="1464" Count="0" />
      <LineId Id="1466" Count="2" />
      <LineId Id="1050" Count="1" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1471" Count="3" />
      <LineId Id="1470" Count="0" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1597" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="1044" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="1052" Count="1" />
      <LineId Id="1042" Count="0" />
      <LineId Id="1055" Count="0" />
      <LineId Id="1057" Count="1" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="1193" Count="1" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="453" Count="1" />
      <LineId Id="467" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1339" Count="0" />
      <LineId Id="1229" Count="1" />
      <LineId Id="1232" Count="5" />
      <LineId Id="1584" Count="0" />
      <LineId Id="1587" Count="0" />
      <LineId Id="455" Count="2" />
      <LineId Id="477" Count="0" />
      <LineId Id="458" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="460" Count="1" />
      <LineId Id="1425" Count="1" />
      <LineId Id="1444" Count="0" />
      <LineId Id="1427" Count="6" />
      <LineId Id="1590" Count="0" />
      <LineId Id="1434" Count="3" />
      <LineId Id="1445" Count="0" />
      <LineId Id="1438" Count="5" />
      <LineId Id="1452" Count="0" />
      <LineId Id="1245" Count="0" />
      <LineId Id="462" Count="1" />
      <LineId Id="1246" Count="0" />
      <LineId Id="464" Count="1" />
      <LineId Id="1340" Count="0" />
      <LineId Id="1343" Count="16" />
      <LineId Id="1411" Count="0" />
      <LineId Id="1416" Count="1" />
      <LineId Id="1447" Count="0" />
      <LineId Id="1418" Count="5" />
      <LineId Id="1591" Count="0" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1360" Count="2" />
      <LineId Id="1448" Count="0" />
      <LineId Id="1363" Count="5" />
      <LineId Id="1451" Count="0" />
      <LineId Id="1424" Count="0" />
      <LineId Id="1369" Count="3" />
      <LineId Id="1341" Count="1" />
      <LineId Id="466" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="1186" Count="0" />
      <LineId Id="1021" Count="1" />
      <LineId Id="1399" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="1386" Count="0" />
      <LineId Id="756" Count="7" />
      <LineId Id="1387" Count="0" />
      <LineId Id="1390" Count="3" />
      <LineId Id="1409" Count="1" />
      <LineId Id="1449" Count="0" />
      <LineId Id="1394" Count="4" />
      <LineId Id="1389" Count="0" />
      <LineId Id="764" Count="50" />
      <LineId Id="836" Count="33" />
      <LineId Id="1373" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="1374" Count="2" />
      <LineId Id="871" Count="23" />
      <LineId Id="1270" Count="0" />
      <LineId Id="895" Count="1" />
      <LineId Id="1223" Count="0" />
      <LineId Id="897" Count="4" />
      <LineId Id="1271" Count="0" />
      <LineId Id="1275" Count="0" />
      <LineId Id="1273" Count="0" />
      <LineId Id="902" Count="21" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1104" Count="4" />
      <LineId Id="1098" Count="1" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1039" Count="0" />
      <LineId Id="924" Count="0" />
      <LineId Id="1548" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="1038" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1083" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1077" Count="1" />
      <LineId Id="1080" Count="2" />
      <LineId Id="1062" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1091" Count="1" />
      <LineId Id="1094" Count="2" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1293" Count="0" />
      <LineId Id="1291" Count="0" />
      <LineId Id="1600" Count="0" />
      <LineId Id="1602" Count="0" />
      <LineId Id="1599" Count="0" />
      <LineId Id="1281" Count="0" />
      <LineId Id="1605" Count="0" />
      <LineId Id="1609" Count="2" />
      <LineId Id="1606" Count="0" />
      <LineId Id="1332" Count="0" />
      <LineId Id="1328" Count="0" />
      <LineId Id="1592" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1593" Count="2" />
      <LineId Id="1623" Count="1" />
      <LineId Id="1628" Count="0" />
      <LineId Id="1625" Count="1" />
      <LineId Id="1622" Count="0" />
      <LineId Id="1330" Count="1" />
      <LineId Id="1327" Count="0" />
      <LineId Id="1337" Count="0" />
      <LineId Id="1612" Count="0" />
      <LineId Id="1338" Count="0" />
      <LineId Id="1613" Count="2" />
      <LineId Id="1336" Count="0" />
      <LineId Id="1287" Count="1" />
      <LineId Id="1617" Count="3" />
      <LineId Id="1616" Count="0" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="311" Count="1" />
      <LineId Id="1475" Count="0" />
      <LineId Id="1493" Count="0" />
      <LineId Id="1522" Count="2" />
      <LineId Id="1559" Count="23" />
      <LineId Id="1536" Count="1" />
      <LineId Id="1539" Count="3" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1630" Count="0" />
      <LineId Id="1629" Count="0" />
      <LineId Id="1544" Count="0" />
      <LineId Id="1549" Count="0" />
      <LineId Id="1631" Count="1" />
      <LineId Id="1545" Count="1" />
      <LineId Id="1550" Count="0" />
      <LineId Id="1547" Count="0" />
      <LineId Id="1476" Count="16" />
      <LineId Id="313" Count="2" />
      <LineId Id="308" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="TFMachinePalletizerMain.TEST_Variabili">
      <LineId Id="2" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="255" Count="6" />
      <LineId Id="203" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="204" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="197" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="216" Count="4" />
      <LineId Id="222" Count="4" />
      <LineId Id="221" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="211" Count="4" />
      <LineId Id="38" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="48" Count="5" />
      <LineId Id="45" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="68" Count="21" />
      <LineId Id="97" Count="1" />
      <LineId Id="90" Count="6" />
      <LineId Id="65" Count="0" />
      <LineId Id="113" Count="13" />
      <LineId Id="128" Count="58" />
      <LineId Id="127" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>